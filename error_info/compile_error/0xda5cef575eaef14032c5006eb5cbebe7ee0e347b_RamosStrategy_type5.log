Traceback (most recent call last):
  File "/Users/longfeichen/研究生/Web3MLM/testing/sol_batch_compile-main/batchCompile.py", line 161, in multi_process_directory
    compiled_sol = compile_contract(path, version, filename, copy.deepcopy(settings))
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/longfeichen/研究生/Web3MLM/testing/sol_batch_compile-main/batchCompile.py", line 115, in compile_contract
    compiled_sol = compile_standard(setting, allow_paths=path, solc_version=version)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/longfeichen/.env/compile_solidity/lib/python3.12/site-packages/solcx/main.py", line 369, in compile_standard
    raise SolcError(
solcx.exceptions.SolcError: YulException: Variable _1 is 3 slot(s) too deep inside the stack. Stack too deep. Try compiling with `--via-ir` (cli) or the equivalent `viaIR: true` (standard JSON) while enabling the optimizer. Otherwise, try removing local variables.


> command: `/Users/longfeichen/.solcx/solc-v0.8.19 --standard-json --allow-paths /Users/longfeichen/研究生/Web3MLM/testing/sol_batch_compile-main/contracts/0xda5cef575eaef14032c5006eb5cbebe7ee0e347b_RamosStrategy`
> return code: `0`
> stdout:
{"contracts":{"01_27_RamosStrategy.sol":{"RamosStrategy":{"abi":[{"inputs":[{"internalType":"address","name":"_initialRescuer","type":"address"},{"internalType":"address","name":"_initialExecutor","type":"address"},{"internalType":"string","name":"_strategyName","type":"string"},{"internalType":"address","name":"_treasuryReservesVault","type":"address"},{"internalType":"address","name":"_ramos","type":"address"},{"internalType":"address","name":"_templeToken","type":"address"},{"internalType":"address","name":"_quoteToken","type":"address"},{"internalType":"address","name":"_circuitBreakerProxy","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"InvalidAccess","type":"error"},{"inputs":[],"name":"InvalidAddress","type":"error"},{"inputs":[{"internalType":"string","name":"expected","type":"string"},{"internalType":"string","name":"actual","type":"string"}],"name":"InvalidVersion","type":"error"},{"inputs":[{"internalType":"address","name":"caller","type":"address"}],"name":"OnlyTreasuryReserveVault","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"quoteTokenAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"protocolTokenAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"bptTokensStaked","type":"uint256"}],"name":"AddLiquidity","type":"event"},{"anonymous":false,"inputs":[{"components":[{"internalType":"address","name":"asset","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"}],"indexed":false,"internalType":"struct ITempleStrategy.AssetBalance[]","name":"assetBalances","type":"tuple[]"}],"name":"AssetBalancesCheckpoint","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"BorrowToken","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"bytes4","name":"fnSelector","type":"bytes4"},{"indexed":true,"internalType":"bool","name":"value","type":"bool"}],"name":"ExplicitAccessSet","type":"event"},{"anonymous":false,"inputs":[{"components":[{"internalType":"address","name":"asset","type":"address"},{"internalType":"int256","name":"delta","type":"int256"}],"indexed":false,"internalType":"struct ITempleStrategy.AssetBalanceDelta[]","name":"adjustments","type":"tuple[]"}],"name":"ManualAdjustmentsSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldExecutor","type":"address"},{"indexed":true,"internalType":"address","name":"newExecutor","type":"address"}],"name":"NewExecutorAccepted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldExecutor","type":"address"},{"indexed":true,"internalType":"address","name":"oldProposedExecutor","type":"address"},{"indexed":true,"internalType":"address","name":"newProposedExecutor","type":"address"}],"name":"NewExecutorProposed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldRescuer","type":"address"},{"indexed":true,"internalType":"address","name":"newRescuer","type":"address"}],"name":"NewRescuerAccepted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldRescuer","type":"address"},{"indexed":true,"internalType":"address","name":"oldProposedRescuer","type":"address"},{"indexed":true,"internalType":"address","name":"newProposedRescuer","type":"address"}],"name":"NewRescuerProposed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"quoteTokenAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"protocolTokenAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"bptIn","type":"uint256"}],"name":"RemoveLiquidity","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"RepayToken","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bool","name":"value","type":"bool"}],"name":"RescueModeSet","type":"event"},{"anonymous":false,"inputs":[],"name":"Shutdown","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"TokenAllowanceSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"trv","type":"address"}],"name":"TreasuryReservesVaultSet","type":"event"},{"inputs":[],"name":"acceptExecutor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"acceptRescuer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address[]","name":"assets","type":"address[]"},{"internalType":"uint256[]","name":"maxAmountsIn","type":"uint256[]"},{"internalType":"bytes","name":"userData","type":"bytes"},{"internalType":"bool","name":"fromInternalBalance","type":"bool"}],"internalType":"struct IBalancerVault.JoinPoolRequest","name":"_requestData","type":"tuple"}],"name":"addLiquidity","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"apiVersion","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"shutdownParamsData","type":"bytes"}],"name":"automatedShutdown","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"recipient","type":"address"}],"name":"borrowProtocolToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"recipient","type":"address"}],"name":"borrowQuoteToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"checkpointAssetBalances","outputs":[{"components":[{"internalType":"address","name":"asset","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"}],"internalType":"struct ITempleStrategy.AssetBalance[]","name":"","type":"tuple[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"circuitBreakerProxy","outputs":[{"internalType":"contract ITempleCircuitBreakerProxy","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"uint256","name":"newDebtCeiling","type":"uint256"}],"name":"debtCeilingUpdated","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"executor","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"bytes4","name":"","type":"bytes4"}],"name":"explicitFunctionAccess","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"inRescueMode","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"latestAssetBalances","outputs":[{"components":[{"internalType":"address","name":"asset","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"}],"internalType":"struct ITempleStrategy.AssetBalance[]","name":"assetBalances","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"manualAdjustments","outputs":[{"components":[{"internalType":"address","name":"asset","type":"address"},{"internalType":"int256","name":"delta","type":"int256"}],"internalType":"struct ITempleStrategy.AssetBalanceDelta[]","name":"adjustments","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"populateParamsData","type":"bytes"}],"name":"populateShutdownData","outputs":[{"internalType":"bytes","name":"shutdownData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_quoteTokenAmount","type":"uint256"},{"internalType":"uint256","name":"_slippageBps","type":"uint256"}],"name":"proportionalAddLiquidityQuote","outputs":[{"internalType":"uint256","name":"templeAmount","type":"uint256"},{"internalType":"uint256","name":"expectedBptAmount","type":"uint256"},{"internalType":"uint256","name":"minBptAmount","type":"uint256"},{"components":[{"internalType":"address[]","name":"assets","type":"address[]"},{"internalType":"uint256[]","name":"maxAmountsIn","type":"uint256[]"},{"internalType":"bytes","name":"userData","type":"bytes"},{"internalType":"bool","name":"fromInternalBalance","type":"bool"}],"internalType":"struct IBalancerVault.JoinPoolRequest","name":"requestData","type":"tuple"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_bptAmount","type":"uint256"},{"internalType":"uint256","name":"_slippageBps","type":"uint256"}],"name":"proportionalRemoveLiquidityQuote","outputs":[{"internalType":"uint256","name":"expectedTempleAmount","type":"uint256"},{"internalType":"uint256","name":"expectedQuoteTokenAmount","type":"uint256"},{"internalType":"uint256","name":"minTempleAmount","type":"uint256"},{"internalType":"uint256","name":"minQuoteTokenAmount","type":"uint256"},{"components":[{"internalType":"address[]","name":"assets","type":"address[]"},{"internalType":"uint256[]","name":"minAmountsOut","type":"uint256[]"},{"internalType":"bytes","name":"userData","type":"bytes"},{"internalType":"bool","name":"toInternalBalance","type":"bool"}],"internalType":"struct IBalancerVault.ExitPoolRequest","name":"requestData","type":"tuple"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"proposeNewExecutor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"proposeNewRescuer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"quoteToken","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ramos","outputs":[{"internalType":"contract IRamos","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"recoverToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address[]","name":"assets","type":"address[]"},{"internalType":"uint256[]","name":"minAmountsOut","type":"uint256[]"},{"internalType":"bytes","name":"userData","type":"bytes"},{"internalType":"bool","name":"toInternalBalance","type":"bool"}],"internalType":"struct IBalancerVault.ExitPoolRequest","name":"_requestData","type":"tuple"},{"internalType":"uint256","name":"_bptAmount","type":"uint256"}],"name":"removeLiquidity","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"repayProtocolToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"repayQuoteToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rescuer","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"allowedCaller","type":"address"},{"components":[{"internalType":"bytes4","name":"fnSelector","type":"bytes4"},{"internalType":"bool","name":"allowed","type":"bool"}],"internalType":"struct ITempleElevatedAccess.ExplicitAccess[]","name":"access","type":"tuple[]"}],"name":"setExplicitAccess","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"asset","type":"address"},{"internalType":"int256","name":"delta","type":"int256"}],"internalType":"struct ITempleStrategy.AssetBalanceDelta[]","name":"adjustments","type":"tuple[]"}],"name":"setManualAdjustments","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"value","type":"bool"}],"name":"setRescueMode","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"setTokenAllowance","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_trv","type":"address"}],"name":"setTreasuryReservesVault","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"strategyName","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"strategyVersion","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"templeToken","outputs":[{"internalType":"contract ITempleERC20Token","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"treasuryReservesVault","outputs":[{"internalType":"contract ITreasuryReservesVault","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"automatedShutdown(bytes)":{"details":"Each strategy may require a different set of params to do the shutdown. It can abi encode/decode that data off chain, or by first calling populateShutdownData()"},"borrowProtocolToken(uint256,address)":{"params":{"amount":"The requested amount to borrow","recipient":"The recipient to send the `protocolToken` tokens to"}},"borrowQuoteToken(uint256,address)":{"params":{"amount":"The requested amount to borrow","recipient":"The recipient to send the `quoteToken` tokens to"}},"debtCeilingUpdated(address,uint256)":{"details":"by default it's a no-op unless the strategy implements `_debtCeilingUpdated()`"},"latestAssetBalances()":{"details":"The asset value may be stale at any point in time, depending on the strategy.  It may optionally implement `checkpointAssetBalances()` in order to update those balances."},"populateShutdownData(bytes)":{"params":{"populateParamsData":"abi encoded data of struct `PopulateShutdownParams`"},"returns":{"shutdownData":"abi encoded data of struct `ShutdownParams`"}},"proportionalAddLiquidityQuote(uint256,uint256)":{"details":"Since this is not the view function, this should be called with `callStatic`"},"proportionalRemoveLiquidityQuote(uint256,uint256)":{"details":"Since this is not the view function, this should be called with `callStatic`"},"repayProtocolToken(uint256)":{"params":{"amount":"The requested amount to repay"}},"repayQuoteToken(uint256)":{"params":{"amount":"The requested amount to repay"}},"setExplicitAccess(address,(bytes4,bool)[])":{"details":"fnSelector == bytes4(keccak256(\"fn(argType1,argType2,...)\"))"}},"title":"Ramos Strategy","version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initialRescuer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initialExecutor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_strategyName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_treasuryReservesVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ramos\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_templeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_quoteToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_circuitBreakerProxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidAccess\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"expected\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"actual\",\"type\":\"string\"}],\"name\":\"InvalidVersion\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"OnlyTreasuryReserveVault\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quoteTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bptTokensStaked\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ITempleStrategy.AssetBalance[]\",\"name\":\"assetBalances\",\"type\":\"tuple[]\"}],\"name\":\"AssetBalancesCheckpoint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BorrowToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"fnSelector\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"ExplicitAccessSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"delta\",\"type\":\"int256\"}],\"indexed\":false,\"internalType\":\"struct ITempleStrategy.AssetBalanceDelta[]\",\"name\":\"adjustments\",\"type\":\"tuple[]\"}],\"name\":\"ManualAdjustmentsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldExecutor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newExecutor\",\"type\":\"address\"}],\"name\":\"NewExecutorAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldExecutor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldProposedExecutor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newProposedExecutor\",\"type\":\"address\"}],\"name\":\"NewExecutorProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRescuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRescuer\",\"type\":\"address\"}],\"name\":\"NewRescuerAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRescuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldProposedRescuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newProposedRescuer\",\"type\":\"address\"}],\"name\":\"NewRescuerProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quoteTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bptIn\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RepayToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"RescueModeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Shutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenAllowanceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trv\",\"type\":\"address\"}],\"name\":\"TreasuryReservesVaultSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptRescuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IBalancerVault.JoinPoolRequest\",\"name\":\"_requestData\",\"type\":\"tuple\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apiVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"shutdownParamsData\",\"type\":\"bytes\"}],\"name\":\"automatedShutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"borrowProtocolToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"borrowQuoteToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointAssetBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct ITempleStrategy.AssetBalance[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circuitBreakerProxy\",\"outputs\":[{\"internalType\":\"contract ITempleCircuitBreakerProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newDebtCeiling\",\"type\":\"uint256\"}],\"name\":\"debtCeilingUpdated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"explicitFunctionAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inRescueMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAssetBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct ITempleStrategy.AssetBalance[]\",\"name\":\"assetBalances\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualAdjustments\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"delta\",\"type\":\"int256\"}],\"internalType\":\"struct ITempleStrategy.AssetBalanceDelta[]\",\"name\":\"adjustments\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"populateParamsData\",\"type\":\"bytes\"}],\"name\":\"populateShutdownData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"shutdownData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quoteTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippageBps\",\"type\":\"uint256\"}],\"name\":\"proportionalAddLiquidityQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"templeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedBptAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBptAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IBalancerVault.JoinPoolRequest\",\"name\":\"requestData\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bptAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippageBps\",\"type\":\"uint256\"}],\"name\":\"proportionalRemoveLiquidityQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"expectedTempleAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedQuoteTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTempleAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minQuoteTokenAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IBalancerVault.ExitPoolRequest\",\"name\":\"requestData\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"proposeNewExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"proposeNewRescuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ramos\",\"outputs\":[{\"internalType\":\"contract IRamos\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IBalancerVault.ExitPoolRequest\",\"name\":\"_requestData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_bptAmount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repayProtocolToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repayQuoteToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescuer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"allowedCaller\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"fnSelector\",\"type\":\"bytes4\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"internalType\":\"struct ITempleElevatedAccess.ExplicitAccess[]\",\"name\":\"access\",\"type\":\"tuple[]\"}],\"name\":\"setExplicitAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"delta\",\"type\":\"int256\"}],\"internalType\":\"struct ITempleStrategy.AssetBalanceDelta[]\",\"name\":\"adjustments\",\"type\":\"tuple[]\"}],\"name\":\"setManualAdjustments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setRescueMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setTokenAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trv\",\"type\":\"address\"}],\"name\":\"setTreasuryReservesVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"templeToken\",\"outputs\":[{\"internalType\":\"contract ITempleERC20Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryReservesVault\",\"outputs\":[{\"internalType\":\"contract ITreasuryReservesVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"automatedShutdown(bytes)\":{\"details\":\"Each strategy may require a different set of params to do the shutdown. It can abi encode/decode that data off chain, or by first calling populateShutdownData()\"},\"borrowProtocolToken(uint256,address)\":{\"params\":{\"amount\":\"The requested amount to borrow\",\"recipient\":\"The recipient to send the `protocolToken` tokens to\"}},\"borrowQuoteToken(uint256,address)\":{\"params\":{\"amount\":\"The requested amount to borrow\",\"recipient\":\"The recipient to send the `quoteToken` tokens to\"}},\"debtCeilingUpdated(address,uint256)\":{\"details\":\"by default it's a no-op unless the strategy implements `_debtCeilingUpdated()`\"},\"latestAssetBalances()\":{\"details\":\"The asset value may be stale at any point in time, depending on the strategy.  It may optionally implement `checkpointAssetBalances()` in order to update those balances.\"},\"populateShutdownData(bytes)\":{\"params\":{\"populateParamsData\":\"abi encoded data of struct `PopulateShutdownParams`\"},\"returns\":{\"shutdownData\":\"abi encoded data of struct `ShutdownParams`\"}},\"proportionalAddLiquidityQuote(uint256,uint256)\":{\"details\":\"Since this is not the view function, this should be called with `callStatic`\"},\"proportionalRemoveLiquidityQuote(uint256,uint256)\":{\"details\":\"Since this is not the view function, this should be called with `callStatic`\"},\"repayProtocolToken(uint256)\":{\"params\":{\"amount\":\"The requested amount to repay\"}},\"repayQuoteToken(uint256)\":{\"params\":{\"amount\":\"The requested amount to repay\"}},\"setExplicitAccess(address,(bytes4,bool)[])\":{\"details\":\"fnSelector == bytes4(keccak256(\\\"fn(argType1,argType2,...)\\\"))\"}},\"title\":\"Ramos Strategy\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptExecutor()\":{\"notice\":\"Caller accepts the role as new Executor. Can only be called by the proposed executor\"},\"acceptRescuer()\":{\"notice\":\"Caller accepts the role as new Rescuer. Can only be called by the proposed rescuer\"},\"addLiquidity((address[],uint256[],bytes,bool))\":{\"notice\":\"Add liquidity This is a wrapper function for Ramos::addLiquidity\"},\"apiVersion()\":{\"notice\":\"Track the deployed version of this contract. \"},\"automatedShutdown(bytes)\":{\"notice\":\"The strategy executor can shutdown this strategy, only after Executors have marked the strategy as `isShuttingDown` in the TRV. This should handle all liquidations and send all funds back to the TRV, and will then call `TRV.shutdown()` to apply the shutdown.\"},\"borrowProtocolToken(uint256,address)\":{\"notice\":\"Send `protocolToken` to recipient\"},\"borrowQuoteToken(uint256,address)\":{\"notice\":\"Send `quoteToken` to recipient\"},\"checkpointAssetBalances()\":{\"notice\":\"By default, we assume there is no checkpoint required for a strategy In which case it would be identical to just calling `latestAssetBalances()` A strategy can override this if on-chain functions are required to run to force balance updates first - eg checkpoint DSR\"},\"circuitBreakerProxy()\":{\"notice\":\"New withdrawals of tokens from TRV are checked against a circuit breaker to ensure no more than a cap is withdrawn in a given period\"},\"debtCeilingUpdated(address,uint256)\":{\"notice\":\"A hook which is called by the Treasury Reserves Vault when the debt ceiling for this strategy is updated\"},\"executor()\":{\"notice\":\"The address which is approved to execute normal operations on behalf of the DAO.\"},\"explicitFunctionAccess(address,bytes4)\":{\"notice\":\"Explicit approval for an address to execute a function. allowedCaller => function selector => true/false\"},\"inRescueMode()\":{\"notice\":\"Under normal circumstances, rescuers don't have access to admin/operational functions. However when rescue mode is enabled (by rescuers or executors), they claim the access rights.\"},\"latestAssetBalances()\":{\"notice\":\"The latest checkpoint of each asset balance this strategy holds, and the current debt. This will be used to report equity performance: `sum(asset value in STABLE) - debt` The conversion of each asset price into the stable token (eg DAI) will be done off-chain\"},\"manualAdjustments()\":{\"notice\":\"Get the set of manual adjustment deltas, set by the Strategy Executor.\"},\"populateShutdownData(bytes)\":{\"notice\":\"Populate data to automatically shutdown. This gets a quote to unstake all BPT and liquidate proportionally into stables & temple.\"},\"proportionalAddLiquidityQuote(uint256,uint256)\":{\"notice\":\"Get the quote used to add liquidity proportionally\"},\"proportionalRemoveLiquidityQuote(uint256,uint256)\":{\"notice\":\"Get the quote used to remove liquidity\"},\"proposeNewExecutor(address)\":{\"notice\":\"Proposes a new Executor. Can only be called by the current executor or rescuer (if in resuce mode)\"},\"proposeNewRescuer(address)\":{\"notice\":\"Proposes a new Rescuer. Can only be called by the current rescuer.\"},\"quoteToken()\":{\"notice\":\"The Quote token - eg DAI, one side of the Balancer LP used by Ramos\"},\"ramos()\":{\"notice\":\"The RAMOS contract used to manage the TPI\"},\"recoverToken(address,address,uint256)\":{\"notice\":\"Executors can recover any token from the strategy.\"},\"removeLiquidity((address[],uint256[],bytes,bool),uint256)\":{\"notice\":\"Remove liquidity This is a wrapper function for Ramos:removeLiquidity.\"},\"repayProtocolToken(uint256)\":{\"notice\":\"Pull `protocolToken` from the caller\"},\"repayQuoteToken(uint256)\":{\"notice\":\"Pull `quoteToken` from the caller\"},\"rescuer()\":{\"notice\":\"The address which is approved to execute emergency operations.\"},\"setExplicitAccess(address,(bytes4,bool)[])\":{\"notice\":\"Grant `allowedCaller` the rights to call the function selectors in the access list.\"},\"setManualAdjustments((address,int256)[])\":{\"notice\":\"The Strategy Executor may set manual adjustments to asset balances if they cannot be reported automatically - eg a staked position with no receipt token.\"},\"setRescueMode(bool)\":{\"notice\":\"Set the contract into or out of rescue mode. Only the rescuers are allowed to set.\"},\"setTokenAllowance(address,address,uint256)\":{\"notice\":\"Executors can set the allowance of any token spend from the strategy\"},\"setTreasuryReservesVault(address)\":{\"notice\":\"Executors can set the address of the treasury reserves vault.\"},\"strategyName()\":{\"notice\":\"A human readable name of the strategy\"},\"strategyVersion()\":{\"notice\":\"The version of this particular strategy\"},\"templeToken()\":{\"notice\":\"The Temple token, one side of the Balancer LP used by Ramos\"},\"treasuryReservesVault()\":{\"notice\":\"The address of the treasury reserves vault.\"}},\"notice\":\"Executors can add/remove proportional liquidity into Ramos via the strategy It also serves as the 'token vault' - Ramos will call into this strategy to obtain Temple and QuoteToken (eg DAI)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"01_27_RamosStrategy.sol\":\"RamosStrategy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":false}},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"01_27_RamosStrategy.sol\":{\"keccak256\":\"0x2c3ffe03f807e56b33115d7c6ccd42e0fce44a816cb2552dab2ac3816da5f645\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://e172c44f7c6dc902e791639e23dcab87523ebedd57ec30a97a25a76acedd06ad\",\"dweb:/ipfs/QmSzJqPu5JC2QSPRBZJHvb2ddLaFFjaGLSipD91vsDg7hE\"]},\"02_27_IERC20Metadata.sol\":{\"keccak256\":\"0xa25ab9a66cae9ca6a3a4665ca798366110e116b34ecee4b840f95a40b0243f49\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a701f9d7ca720f9fb194eb95d08a364605acf68b8e69d50ef63e11ea6b508460\",\"dweb:/ipfs/QmWYXJSGnmX48yqkMiJHxwQLBn4hdMDVbga9QvCmUWgnRi\"]},\"03_27_IERC20Permit.sol\":{\"keccak256\":\"0xc8bf75ec561e3a6bc96dfa960474861101cc4470eaa4cc230e62e2109da98ffb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://05f5d1f6f034cbccdc135d7af4467c724d4e3cb2a2059d0710c73e3e8b3546fd\",\"dweb:/ipfs/QmZ67kCexxWwCLLozFTkbL3JJNPYdPXmYf6ry6rTJtM1hW\"]},\"04_27_IERC20.sol\":{\"keccak256\":\"0x3cedce2cd7eacaae0bc44842b12b842e38aaa2add3f660bfca6c3dfa88542fe2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5b5f40ecf34ab169edc109702d94db1c4f1e71c467cfeb077879694d681e1ba8\",\"dweb:/ipfs/QmWF8AMSAbaxbqp2ViuXQnzyPbuiPPNriaBZ5Lh7o1LmCH\"]},\"05_27_SafeERC20.sol\":{\"keccak256\":\"0xa7dd0b56447a17e3715ad7aa4fea3e816ab08ee589c72fd07b559d75ceebcdbd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://044d5da925a1fac55e604ae2805351d010cf7e135693d6b36347dc536f9d9b4e\",\"dweb:/ipfs/QmTUdweXA7LC5Q4fYqze3FtYrX5d6nsaRABxU1Gp3dy3LE\"]},\"06_27_Address.sol\":{\"keccak256\":\"0xc85130d28a00a83610c70ae0891fc036c4167fbfc41846baca77ffa1487b7903\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://008b7d115a008ae33d349451b26ac20c81090720ab29c4fb5fd4cb97794331c3\",\"dweb:/ipfs/QmSpEvrtE11EknJNz81RGwqZTYUC7tFAp3YTwnPgCiEvPR\"]},\"07_27_EnumerableSet.sol\":{\"keccak256\":\"0xacdc138ae0950e019d111bf32ee85aa70a3dcc582855a8e36a87abf98f5897d4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec90543eed2d8cca1bd9c17e24fddba77911df9b8a80f873b32193d3fd071921\",\"dweb:/ipfs/QmS5yELvgfx1pZB9rpWJV8CQ5AnPQ2jJEhzpwjqwqDJw73\"]},\"08_27_CommonEventsAndErrors.sol\":{\"keccak256\":\"0x8122d02f4c35665a555ac910315f16b56d9eab82c57ad39fc8382596e39ec91f\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://f0db50a1459d9473213f5c3147c1d0f7b57bda564b5992978a9d5894b7bda6da\",\"dweb:/ipfs/Qmbo1KWjGbdMg6iazBrwFbvuPJ2Jv5fKfy1HEsmZFXQCQM\"]},\"09_27_IBalancerPoolHelper.sol\":{\"keccak256\":\"0xf3428601a1825ae3604ab3716766e56c51dfd6eef576f5c5d33169f6549d5e43\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://5fd4e51428b1f62e4debb05dafd23f02bf25fe7ebcb33652ec29e40ef6076bc8\",\"dweb:/ipfs/QmcNFxJ4BDWCgzrBGLaE4ihuXZncspk4EhVzzaQv69rNPW\"]},\"10_27_IRamosTokenVault.sol\":{\"keccak256\":\"0xd1dc062b900e7daf9ed73a7e629c6d138818b8e95db2481ad3f6ba2e24a671b2\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://05b0ce8f05041789aaf4a7b31d0b5a04a8c3036687a08edd30c0b3c7e277fca9\",\"dweb:/ipfs/Qmas5ZtwZHnxiaxrpEEbiNQzrcyBnMLnBK7SaKKoGzWyCX\"]},\"11_27_IAuraStaking.sol\":{\"keccak256\":\"0xd80a4372ae48dead847a60ad216721c3a9103dc98776d725639b720f16f5b343\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://13bb6611ff67fe081c99290516636e4846524951c7a8935842816201a128c61e\",\"dweb:/ipfs/QmYCxDLpbVuzqLVh5nnEHuXPVUjZqYA4qbJvGQmVtiziWT\"]},\"12_27_IRamos.sol\":{\"keccak256\":\"0xe1da946527b154871e7a453f90da4278fa21915663f9a8047fcc2b8ccc57a692\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://8617f97b86e09f89b9faf181596e48a35974b698145b9059f5c1248a735e6f80\",\"dweb:/ipfs/QmUmuaqCSTqr9HRk5wM121eMcG8icq6UqBT5kHNqAs7zFG\"]},\"13_27_ITempleERC20Token.sol\":{\"keccak256\":\"0x5448a939ff85d37c0dd06a4912f8aa55a5cf7c0eb642330ade1560215b74b349\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://c6243c7affee6122d801251a3b6f635ac94feda4e0cd7f65f3d753cb69d0355b\",\"dweb:/ipfs/QmRcGLByo45ESckYu9GRUhkwNiK4uTJQQRqqoEK5mSsVQu\"]},\"14_27_IAuraBooster.sol\":{\"keccak256\":\"0x7768de2548579b4b8f4b907d28378e6cf78813b548797c255c7271122c435aaa\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://088117d3940e21b3c828d02fa88bb54dec26a5c0f061e98d95d7b097825dfe11\",\"dweb:/ipfs/Qmcws7hkD4T4XR2cy7UyXAcpGCXp8DYPbQGaCopMfDjW3H\"]},\"15_27_IBalancerBptToken.sol\":{\"keccak256\":\"0xcb48c3a89b267407ab57826dbab3e59ed48156517c630cc8dbf5b18a5d958ff0\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://ab626b536f18181b957957545c9f64283e906903223fde5b8230045f50a0e162\",\"dweb:/ipfs/QmYKMLbZ7LD8WH5yJ4CNhtTV2vGLSUVJGZCq8FQrrSr5Ve\"]},\"16_27_IBalancerHelpers.sol\":{\"keccak256\":\"0xfcba81b302d3dfe62204f43cff088ad49182116acc7f95bc020a061de5ac9d70\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://6a93f3132b883eb93d225bd029c87365731b5185caa099af26102f3719c6861f\",\"dweb:/ipfs/QmNrjrf6e9wkbFhDsHa9fzc6y4FKS8SMxW1LwsBSfmeUkw\"]},\"17_27_IBalancerVault.sol\":{\"keccak256\":\"0x46bd97b033d550f451627650eb8262db5f13b6abeeaeceb1f2f94f26664b3fac\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://0bd6fc0769136a989a74e0cc7aba72621655e65416ee62378f99fb9797675b8f\",\"dweb:/ipfs/QmPPWLZu6EmtbhDdgwt9bvBAtnNPM3GX1oiQsPqm3knN3h\"]},\"18_27_ITempleElevatedAccess.sol\":{\"keccak256\":\"0xe5a19949ec514acf13d40c2dcda3356e803d93ed0cb5d8b76825c99250a234f4\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://ed239ebf015364133360cbeebc6193d630b32bcead90c832765d4e39b3727ee8\",\"dweb:/ipfs/QmZLQaTrraMRg7aGSyrFVh2dTKaC9Ua5LY1ZF53zbpndtu\"]},\"19_27_ITempleCircuitBreaker.sol\":{\"keccak256\":\"0xbea5774ff5b68b1e768177139233d1d5b7d9a172017708d9fe021ebea8c96e5e\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://5c52fcb2a708e847d2eb3da29e8066a693c395c77effd7bd86d96dfe0df4bf7c\",\"dweb:/ipfs/QmZUUsdDHjP5yFwexL5JVvWD39NVdVXv9UvxLUoGCnWZeE\"]},\"20_27_ITempleCircuitBreakerProxy.sol\":{\"keccak256\":\"0x5e8c6c070569b3e92d7ce0d27d07120b2ffb156fdee2a5411f98b3c8e025f243\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://1bd025d8f6146d6cd7e9e3f780b21dcb7d51d400563595d2589d35b237b70565\",\"dweb:/ipfs/Qmai6aZEswQT3KcLnmzDdeavi1HQDGwGksupDebPtxzs2r\"]},\"21_27_ITempleDebtToken.sol\":{\"keccak256\":\"0x9b9bef93b388da13ea8a3903a6b172ee0d7785559f9e8b39c153c238f4081281\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://7953a23b36d8f7fb50d05145b26bea9d411b5ec2b0849f95e1a82e1d4922940e\",\"dweb:/ipfs/QmXSt4awrTaDcs3r7Y2q7NBRi3vY3sbvESnPBc4PZb7sNL\"]},\"22_27_ITreasuryPriceIndexOracle.sol\":{\"keccak256\":\"0x208f4d65ae984c3d51f7bc0fb9801b987ce8e27e19e289d7b3e2de6933928c9e\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://9641530ca07f12d061c63c238e316176d11aaa22d7c00def1ecf070d9f9666e3\",\"dweb:/ipfs/QmdhgtiSK8oFYcBTRhfP7yRez6iSHShctn2bBzQX5VE6JE\"]},\"23_27_ITreasuryReservesVault.sol\":{\"keccak256\":\"0xd4f7ec3bf3176adf8fae61cb877b64edcca2c505307dfb10f891c8a7bcaf7db4\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://1dc5adf21fb220f3f981cad42c075bc34799507af404e9c15938dd11e22cac00\",\"dweb:/ipfs/QmbWgahn5ty784oniZjXGfG29zQqQLf7jhHmu8cdKHzNn1\"]},\"24_27_ITempleBaseStrategy.sol\":{\"keccak256\":\"0x1ec79d6cd3e471bddb18277b2f33db5e56f33dbe8f4f9e4ffa30f1a11ad3fcd1\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://bf17e9521e75d8320d101b20ab4422e7e832f38ed00fc1fd0bc80c526c5b358f\",\"dweb:/ipfs/QmfQ2yEhgU1GVEWVrVUJqjvnSWqtB9KamNvDbLqcWW4qkk\"]},\"25_27_ITempleStrategy.sol\":{\"keccak256\":\"0xba3a25785e50de9a5497d838a16f09dd051d2cd0ae7e4b0bbbfd65b26bdb715e\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://8c1769dace4a9977b7e021d2042ed9cd3caf124a726417791c52f111575a44d5\",\"dweb:/ipfs/QmfNz3REQxsqRet4Hio2CWTTSRzoyYP2GX8ySNLk9LHRAU\"]},\"26_27_TempleElevatedAccess.sol\":{\"keccak256\":\"0x962e879c4006014ae040e2e99b2687989344106c87b222c4542998736cf50366\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://87a817390f4f05881c158f580d67f0faf3c8a1cef12e3ffe0c01852d6209283a\",\"dweb:/ipfs/QmTzQ5jjD8Gc9WDcqBxztnCuvLE6T2kXKjKkaN9TF8BSG2\"]},\"27_27_AbstractStrategy.sol\":{\"keccak256\":\"0x38d7e531f0eaf66e187fdf2c6aa8827caa638c37f459e67dfbf7378885adf590\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://edb6e3c6673882c24f3878cc69d52c1840dbc3cbca6a3c42940f31ed38d2fe32\",\"dweb:/ipfs/QmYSDMMskA6PZzXyBuvbSM9eESLp3ukawaXaCaPPQrA4to\"]}},\"version\":1}","userdoc":{"kind":"user","methods":{"acceptExecutor()":{"notice":"Caller accepts the role as new Executor. Can only be called by the proposed executor"},"acceptRescuer()":{"notice":"Caller accepts the role as new Rescuer. Can only be called by the proposed rescuer"},"addLiquidity((address[],uint256[],bytes,bool))":{"notice":"Add liquidity This is a wrapper function for Ramos::addLiquidity"},"apiVersion()":{"notice":"Track the deployed version of this contract. "},"automatedShutdown(bytes)":{"notice":"The strategy executor can shutdown this strategy, only after Executors have marked the strategy as `isShuttingDown` in the TRV. This should handle all liquidations and send all funds back to the TRV, and will then call `TRV.shutdown()` to apply the shutdown."},"borrowProtocolToken(uint256,address)":{"notice":"Send `protocolToken` to recipient"},"borrowQuoteToken(uint256,address)":{"notice":"Send `quoteToken` to recipient"},"checkpointAssetBalances()":{"notice":"By default, we assume there is no checkpoint required for a strategy In which case it would be identical to just calling `latestAssetBalances()` A strategy can override this if on-chain functions are required to run to force balance updates first - eg checkpoint DSR"},"circuitBreakerProxy()":{"notice":"New withdrawals of tokens from TRV are checked against a circuit breaker to ensure no more than a cap is withdrawn in a given period"},"debtCeilingUpdated(address,uint256)":{"notice":"A hook which is called by the Treasury Reserves Vault when the debt ceiling for this strategy is updated"},"executor()":{"notice":"The address which is approved to execute normal operations on behalf of the DAO."},"explicitFunctionAccess(address,bytes4)":{"notice":"Explicit approval for an address to execute a function. allowedCaller => function selector => true/false"},"inRescueMode()":{"notice":"Under normal circumstances, rescuers don't have access to admin/operational functions. However when rescue mode is enabled (by rescuers or executors), they claim the access rights."},"latestAssetBalances()":{"notice":"The latest checkpoint of each asset balance this strategy holds, and the current debt. This will be used to report equity performance: `sum(asset value in STABLE) - debt` The conversion of each asset price into the stable token (eg DAI) will be done off-chain"},"manualAdjustments()":{"notice":"Get the set of manual adjustment deltas, set by the Strategy Executor."},"populateShutdownData(bytes)":{"notice":"Populate data to automatically shutdown. This gets a quote to unstake all BPT and liquidate proportionally into stables & temple."},"proportionalAddLiquidityQuote(uint256,uint256)":{"notice":"Get the quote used to add liquidity proportionally"},"proportionalRemoveLiquidityQuote(uint256,uint256)":{"notice":"Get the quote used to remove liquidity"},"proposeNewExecutor(address)":{"notice":"Proposes a new Executor. Can only be called by the current executor or rescuer (if in resuce mode)"},"proposeNewRescuer(address)":{"notice":"Proposes a new Rescuer. Can only be called by the current rescuer."},"quoteToken()":{"notice":"The Quote token - eg DAI, one side of the Balancer LP used by Ramos"},"ramos()":{"notice":"The RAMOS contract used to manage the TPI"},"recoverToken(address,address,uint256)":{"notice":"Executors can recover any token from the strategy."},"removeLiquidity((address[],uint256[],bytes,bool),uint256)":{"notice":"Remove liquidity This is a wrapper function for Ramos:removeLiquidity."},"repayProtocolToken(uint256)":{"notice":"Pull `protocolToken` from the caller"},"repayQuoteToken(uint256)":{"notice":"Pull `quoteToken` from the caller"},"rescuer()":{"notice":"The address which is approved to execute emergency operations."},"setExplicitAccess(address,(bytes4,bool)[])":{"notice":"Grant `allowedCaller` the rights to call the function selectors in the access list."},"setManualAdjustments((address,int256)[])":{"notice":"The Strategy Executor may set manual adjustments to asset balances if they cannot be reported automatically - eg a staked position with no receipt token."},"setRescueMode(bool)":{"notice":"Set the contract into or out of rescue mode. Only the rescuers are allowed to set."},"setTokenAllowance(address,address,uint256)":{"notice":"Executors can set the allowance of any token spend from the strategy"},"setTreasuryReservesVault(address)":{"notice":"Executors can set the address of the treasury reserves vault."},"strategyName()":{"notice":"A human readable name of the strategy"},"strategyVersion()":{"notice":"The version of this particular strategy"},"templeToken()":{"notice":"The Temple token, one side of the Balancer LP used by Ramos"},"treasuryReservesVault()":{"notice":"The address of the treasury reserves vault."}},"notice":"Executors can add/remove proportional liquidity into Ramos via the strategy It also serves as the 'token vault' - Ramos will call into this strategy to obtain Temple and QuoteToken (eg DAI)","version":1}}},"02_27_IERC20Metadata.sol":{"IERC20Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"decimals()":{"details":"Returns the decimals places of the token."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"02_27_IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":false}},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"02_27_IERC20Metadata.sol\":{\"keccak256\":\"0xa25ab9a66cae9ca6a3a4665ca798366110e116b34ecee4b840f95a40b0243f49\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a701f9d7ca720f9fb194eb95d08a364605acf68b8e69d50ef63e11ea6b508460\",\"dweb:/ipfs/QmWYXJSGnmX48yqkMiJHxwQLBn4hdMDVbga9QvCmUWgnRi\"]},\"04_27_IERC20.sol\":{\"keccak256\":\"0x3cedce2cd7eacaae0bc44842b12b842e38aaa2add3f660bfca6c3dfa88542fe2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5b5f40ecf34ab169edc109702d94db1c4f1e71c467cfeb077879694d681e1ba8\",\"dweb:/ipfs/QmWF8AMSAbaxbqp2ViuXQnzyPbuiPPNriaBZ5Lh7o1LmCH\"]}},\"version\":1}","userdoc":{"kind":"user","methods":{},"version":1}}},"03_27_IERC20Permit.sol":{"IERC20Permit":{"abi":[{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.","kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"nonces(address)":{"details":"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"03_27_IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":false}},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"03_27_IERC20Permit.sol\":{\"keccak256\":\"0xc8bf75ec561e3a6bc96dfa960474861101cc4470eaa4cc230e62e2109da98ffb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://05f5d1f6f034cbccdc135d7af4467c724d4e3cb2a2059d0710c73e3e8b3546fd\",\"dweb:/ipfs/QmZ67kCexxWwCLLozFTkbL3JJNPYdPXmYf6ry6rTJtM1hW\"]}},\"version\":1}","userdoc":{"kind":"user","methods":{},"version":1}}},"04_27_IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"04_27_IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":false}},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"04_27_IERC20.sol\":{\"keccak256\":\"0x3cedce2cd7eacaae0bc44842b12b842e38aaa2add3f660bfca6c3dfa88542fe2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5b5f40ecf34ab169edc109702d94db1c4f1e71c467cfeb077879694d681e1ba8\",\"dweb:/ipfs/QmWF8AMSAbaxbqp2ViuXQnzyPbuiPPNriaBZ5Lh7o1LmCH\"]}},\"version\":1}","userdoc":{"kind":"user","methods":{},"version":1}}},"05_27_SafeERC20.sol":{"SafeERC20":{"abi":[],"devdoc":{"details":"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.","kind":"dev","methods":{},"title":"SafeERC20","version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"05_27_SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":false}},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"03_27_IERC20Permit.sol\":{\"keccak256\":\"0xc8bf75ec561e3a6bc96dfa960474861101cc4470eaa4cc230e62e2109da98ffb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://05f5d1f6f034cbccdc135d7af4467c724d4e3cb2a2059d0710c73e3e8b3546fd\",\"dweb:/ipfs/QmZ67kCexxWwCLLozFTkbL3JJNPYdPXmYf6ry6rTJtM1hW\"]},\"04_27_IERC20.sol\":{\"keccak256\":\"0x3cedce2cd7eacaae0bc44842b12b842e38aaa2add3f660bfca6c3dfa88542fe2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5b5f40ecf34ab169edc109702d94db1c4f1e71c467cfeb077879694d681e1ba8\",\"dweb:/ipfs/QmWF8AMSAbaxbqp2ViuXQnzyPbuiPPNriaBZ5Lh7o1LmCH\"]},\"05_27_SafeERC20.sol\":{\"keccak256\":\"0xa7dd0b56447a17e3715ad7aa4fea3e816ab08ee589c72fd07b559d75ceebcdbd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://044d5da925a1fac55e604ae2805351d010cf7e135693d6b36347dc536f9d9b4e\",\"dweb:/ipfs/QmTUdweXA7LC5Q4fYqze3FtYrX5d6nsaRABxU1Gp3dy3LE\"]},\"06_27_Address.sol\":{\"keccak256\":\"0xc85130d28a00a83610c70ae0891fc036c4167fbfc41846baca77ffa1487b7903\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://008b7d115a008ae33d349451b26ac20c81090720ab29c4fb5fd4cb97794331c3\",\"dweb:/ipfs/QmSpEvrtE11EknJNz81RGwqZTYUC7tFAp3YTwnPgCiEvPR\"]}},\"version\":1}","userdoc":{"kind":"user","methods":{},"version":1}}},"06_27_Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"06_27_Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":false}},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"06_27_Address.sol\":{\"keccak256\":\"0xc85130d28a00a83610c70ae0891fc036c4167fbfc41846baca77ffa1487b7903\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://008b7d115a008ae33d349451b26ac20c81090720ab29c4fb5fd4cb97794331c3\",\"dweb:/ipfs/QmSpEvrtE11EknJNz81RGwqZTYUC7tFAp3YTwnPgCiEvPR\"]}},\"version\":1}","userdoc":{"kind":"user","methods":{},"version":1}}},"07_27_EnumerableSet.sol":{"EnumerableSet":{"abi":[],"devdoc":{"details":"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ```solidity contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====","kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ```solidity contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"07_27_EnumerableSet.sol\":\"EnumerableSet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":false}},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"07_27_EnumerableSet.sol\":{\"keccak256\":\"0xacdc138ae0950e019d111bf32ee85aa70a3dcc582855a8e36a87abf98f5897d4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec90543eed2d8cca1bd9c17e24fddba77911df9b8a80f873b32193d3fd071921\",\"dweb:/ipfs/QmS5yELvgfx1pZB9rpWJV8CQ5AnPQ2jJEhzpwjqwqDJw73\"]}},\"version\":1}","userdoc":{"kind":"user","methods":{},"version":1}}},"08_27_CommonEventsAndErrors.sol":{"CommonEventsAndErrors":{"abi":[{"inputs":[],"name":"ExpectedNonZero","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"required","type":"uint256"},{"internalType":"uint256","name":"balance","type":"uint256"}],"name":"InsufficientBalance","type":"error"},{"inputs":[],"name":"InvalidAccess","type":"error"},{"inputs":[],"name":"InvalidAddress","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"InvalidAmount","type":"error"},{"inputs":[],"name":"InvalidParam","type":"error"},{"inputs":[],"name":"Unimplemented","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"TokenRecovered","type":"event"}],"devdoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ExpectedNonZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAccess\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParam\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unimplemented\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenRecovered\",\"type\":\"event\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A collection of common errors thrown within the Temple contracts\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"08_27_CommonEventsAndErrors.sol\":\"CommonEventsAndErrors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":false}},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"08_27_CommonEventsAndErrors.sol\":{\"keccak256\":\"0x8122d02f4c35665a555ac910315f16b56d9eab82c57ad39fc8382596e39ec91f\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://f0db50a1459d9473213f5c3147c1d0f7b57bda564b5992978a9d5894b7bda6da\",\"dweb:/ipfs/Qmbo1KWjGbdMg6iazBrwFbvuPJ2Jv5fKfy1HEsmZFXQCQM\"]}},\"version\":1}","userdoc":{"kind":"user","methods":{},"notice":"A collection of common errors thrown within the Temple contracts","version":1}}},"09_27_IBalancerPoolHelper.sol":{"IBalancerPoolHelper":{"abi":[{"inputs":[],"name":"BPS_PRECISION","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PRICE_PRECISION","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"amo","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"slippageBps","type":"uint256"}],"name":"applySlippage","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"balancerHelpers","outputs":[{"internalType":"contract IBalancerHelpers","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"balancerPoolId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"balancerVault","outputs":[{"internalType":"contract IBalancerVault","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"bptToken","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"bptAmountIn","type":"uint256"},{"internalType":"uint256","name":"minAmountOut","type":"uint256"},{"internalType":"uint256","name":"rebalancePercentageBoundLow","type":"uint256"},{"internalType":"uint256","name":"rebalancePercentageBoundUp","type":"uint256"},{"internalType":"uint256","name":"postRebalanceDelta","type":"uint256"},{"internalType":"uint256","name":"exitTokenIndex","type":"uint256"},{"internalType":"uint256","name":"treasuryPriceIndex","type":"uint256"},{"internalType":"contract IERC20","name":"exitPoolToken","type":"address"}],"name":"exitPool","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getBalances","outputs":[{"internalType":"uint256[]","name":"balances","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPairBalances","outputs":[{"internalType":"uint256","name":"protocolTokenBalance","type":"uint256"},{"internalType":"uint256","name":"quoteTokenBalance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"spotPriceBeforeScaled","type":"uint256"}],"name":"getSlippage","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSpotPrice","outputs":[{"internalType":"uint256","name":"spotPriceScaled","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"treasuryPriceIndex","type":"uint256"}],"name":"isSpotPriceAboveTpi","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"slippage","type":"uint256"},{"internalType":"uint256","name":"treasuryPriceIndex","type":"uint256"}],"name":"isSpotPriceAboveTpi","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"rebalancePercentageBoundUp","type":"uint256"},{"internalType":"uint256","name":"treasuryPriceIndex","type":"uint256"}],"name":"isSpotPriceAboveTpiUpperBound","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"slippage","type":"uint256"},{"internalType":"uint256","name":"treasuryPriceIndex","type":"uint256"}],"name":"isSpotPriceBelowTpi","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"treasuryPriceIndex","type":"uint256"}],"name":"isSpotPriceBelowTpi","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"rebalancePercentageBoundLow","type":"uint256"},{"internalType":"uint256","name":"treasuryPriceIndex","type":"uint256"}],"name":"isSpotPriceBelowTpiLowerBound","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"minBptOut","type":"uint256"},{"internalType":"uint256","name":"rebalancePercentageBoundUp","type":"uint256"},{"internalType":"uint256","name":"rebalancePercentageBoundLow","type":"uint256"},{"internalType":"uint256","name":"treasuryPriceIndex","type":"uint256"},{"internalType":"uint256","name":"postRebalanceDelta","type":"uint256"},{"internalType":"uint256","name":"joinTokenIndex","type":"uint256"},{"internalType":"contract IERC20","name":"joinPoolToken","type":"address"}],"name":"joinPool","outputs":[{"internalType":"uint256","name":"bptIn","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"quoteTokenAmount","type":"uint256"},{"internalType":"uint256","name":"slippageBps","type":"uint256"}],"name":"proportionalAddLiquidityQuote","outputs":[{"internalType":"uint256","name":"protocolTokenAmount","type":"uint256"},{"internalType":"uint256","name":"expectedBptAmount","type":"uint256"},{"internalType":"uint256","name":"minBptAmount","type":"uint256"},{"components":[{"internalType":"address[]","name":"assets","type":"address[]"},{"internalType":"uint256[]","name":"maxAmountsIn","type":"uint256[]"},{"internalType":"bytes","name":"userData","type":"bytes"},{"internalType":"bool","name":"fromInternalBalance","type":"bool"}],"internalType":"struct IBalancerVault.JoinPoolRequest","name":"requestData","type":"tuple"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"bptAmount","type":"uint256"},{"internalType":"uint256","name":"slippageBps","type":"uint256"}],"name":"proportionalRemoveLiquidityQuote","outputs":[{"internalType":"uint256","name":"expectedProtocolTokenAmount","type":"uint256"},{"internalType":"uint256","name":"expectedQuoteTokenAmount","type":"uint256"},{"internalType":"uint256","name":"minProtocolTokenAmount","type":"uint256"},{"internalType":"uint256","name":"minQuoteTokenAmount","type":"uint256"},{"components":[{"internalType":"address[]","name":"assets","type":"address[]"},{"internalType":"uint256[]","name":"minAmountsOut","type":"uint256[]"},{"internalType":"bytes","name":"userData","type":"bytes"},{"internalType":"bool","name":"toInternalBalance","type":"bool"}],"internalType":"struct IBalancerVault.ExitPoolRequest","name":"requestData","type":"tuple"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"protocolToken","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"protocolTokenIndexInBalancerPool","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"quoteToken","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokensOut","type":"uint256"},{"internalType":"uint256","name":"rebalancePercentageBoundUp","type":"uint256"},{"internalType":"uint256","name":"treasuryPriceIndex","type":"uint256"}],"name":"willExitTakePriceAboveTpiUpperBound","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokensIn","type":"uint256"},{"internalType":"uint256","name":"rebalancePercentageBoundLow","type":"uint256"},{"internalType":"uint256","name":"treasuryPriceIndex","type":"uint256"}],"name":"willJoinTakePriceBelowTpiLowerBound","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokensOut","type":"uint256"},{"internalType":"uint256","name":"rebalancePercentageBoundLow","type":"uint256"},{"internalType":"uint256","name":"treasuryPriceIndex","type":"uint256"}],"name":"willQuoteTokenExitTakePriceBelowTpiLowerBound","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokensIn","type":"uint256"},{"internalType":"uint256","name":"rebalancePercentageBoundUp","type":"uint256"},{"internalType":"uint256","name":"treasuryPriceIndex","type":"uint256"}],"name":"willQuoteTokenJoinTakePriceAboveTpiUpperBound","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"proportionalAddLiquidityQuote(uint256,uint256)":{"details":"Since this is not the view function, this should be called with `callStatic`"},"proportionalRemoveLiquidityQuote(uint256,uint256)":{"details":"Since this is not the view function, this should be called with `callStatic`"}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BPS_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageBps\",\"type\":\"uint256\"}],\"name\":\"applySlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerHelpers\",\"outputs\":[{\"internalType\":\"contract IBalancerHelpers\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerPoolId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerVault\",\"outputs\":[{\"internalType\":\"contract IBalancerVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bptToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bptAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rebalancePercentageBoundLow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rebalancePercentageBoundUp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postRebalanceDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exitTokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryPriceIndex\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"exitPoolToken\",\"type\":\"address\"}],\"name\":\"exitPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPairBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"protocolTokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteTokenBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"spotPriceBeforeScaled\",\"type\":\"uint256\"}],\"name\":\"getSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSpotPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"spotPriceScaled\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"treasuryPriceIndex\",\"type\":\"uint256\"}],\"name\":\"isSpotPriceAboveTpi\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryPriceIndex\",\"type\":\"uint256\"}],\"name\":\"isSpotPriceAboveTpi\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rebalancePercentageBoundUp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryPriceIndex\",\"type\":\"uint256\"}],\"name\":\"isSpotPriceAboveTpiUpperBound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryPriceIndex\",\"type\":\"uint256\"}],\"name\":\"isSpotPriceBelowTpi\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"treasuryPriceIndex\",\"type\":\"uint256\"}],\"name\":\"isSpotPriceBelowTpi\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rebalancePercentageBoundLow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryPriceIndex\",\"type\":\"uint256\"}],\"name\":\"isSpotPriceBelowTpiLowerBound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBptOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rebalancePercentageBoundUp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rebalancePercentageBoundLow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryPriceIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postRebalanceDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"joinTokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"joinPoolToken\",\"type\":\"address\"}],\"name\":\"joinPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bptIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quoteTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageBps\",\"type\":\"uint256\"}],\"name\":\"proportionalAddLiquidityQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"protocolTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedBptAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBptAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IBalancerVault.JoinPoolRequest\",\"name\":\"requestData\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bptAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageBps\",\"type\":\"uint256\"}],\"name\":\"proportionalRemoveLiquidityQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"expectedProtocolTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedQuoteTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minProtocolTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minQuoteTokenAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IBalancerVault.ExitPoolRequest\",\"name\":\"requestData\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolTokenIndexInBalancerPool\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rebalancePercentageBoundUp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryPriceIndex\",\"type\":\"uint256\"}],\"name\":\"willExitTakePriceAboveTpiUpperBound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rebalancePercentageBoundLow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryPriceIndex\",\"type\":\"uint256\"}],\"name\":\"willJoinTakePriceBelowTpiLowerBound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rebalancePercentageBoundLow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryPriceIndex\",\"type\":\"uint256\"}],\"name\":\"willQuoteTokenExitTakePriceBelowTpiLowerBound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rebalancePercentageBoundUp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryPriceIndex\",\"type\":\"uint256\"}],\"name\":\"willQuoteTokenJoinTakePriceAboveTpiUpperBound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"proportionalAddLiquidityQuote(uint256,uint256)\":{\"details\":\"Since this is not the view function, this should be called with `callStatic`\"},\"proportionalRemoveLiquidityQuote(uint256,uint256)\":{\"details\":\"Since this is not the view function, this should be called with `callStatic`\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"proportionalAddLiquidityQuote(uint256,uint256)\":{\"notice\":\"Get the quote used to add liquidity proportionally\"},\"proportionalRemoveLiquidityQuote(uint256,uint256)\":{\"notice\":\"Get the quote used to remove liquidity\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"09_27_IBalancerPoolHelper.sol\":\"IBalancerPoolHelper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":false}},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"04_27_IERC20.sol\":{\"keccak256\":\"0x3cedce2cd7eacaae0bc44842b12b842e38aaa2add3f660bfca6c3dfa88542fe2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5b5f40ecf34ab169edc109702d94db1c4f1e71c467cfeb077879694d681e1ba8\",\"dweb:/ipfs/QmWF8AMSAbaxbqp2ViuXQnzyPbuiPPNriaBZ5Lh7o1LmCH\"]},\"09_27_IBalancerPoolHelper.sol\":{\"keccak256\":\"0xf3428601a1825ae3604ab3716766e56c51dfd6eef576f5c5d33169f6549d5e43\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://5fd4e51428b1f62e4debb05dafd23f02bf25fe7ebcb33652ec29e40ef6076bc8\",\"dweb:/ipfs/QmcNFxJ4BDWCgzrBGLaE4ihuXZncspk4EhVzzaQv69rNPW\"]},\"16_27_IBalancerHelpers.sol\":{\"keccak256\":\"0xfcba81b302d3dfe62204f43cff088ad49182116acc7f95bc020a061de5ac9d70\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://6a93f3132b883eb93d225bd029c87365731b5185caa099af26102f3719c6861f\",\"dweb:/ipfs/QmNrjrf6e9wkbFhDsHa9fzc6y4FKS8SMxW1LwsBSfmeUkw\"]},\"17_27_IBalancerVault.sol\":{\"keccak256\":\"0x46bd97b033d550f451627650eb8262db5f13b6abeeaeceb1f2f94f26664b3fac\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://0bd6fc0769136a989a74e0cc7aba72621655e65416ee62378f99fb9797675b8f\",\"dweb:/ipfs/QmPPWLZu6EmtbhDdgwt9bvBAtnNPM3GX1oiQsPqm3knN3h\"]}},\"version\":1}","userdoc":{"kind":"user","methods":{"proportionalAddLiquidityQuote(uint256,uint256)":{"notice":"Get the quote used to add liquidity proportionally"},"proportionalRemoveLiquidityQuote(uint256,uint256)":{"notice":"Get the quote used to remove liquidity"}},"version":1}}},"10_27_IRamosTokenVault.sol":{"IRamosTokenVault":{"abi":[{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"recipient","type":"address"}],"name":"borrowProtocolToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"recipient","type":"address"}],"name":"borrowQuoteToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"repayProtocolToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"repayQuoteToken","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"borrowProtocolToken(uint256,address)":{"params":{"amount":"The requested amount to borrow","recipient":"The recipient to send the `protocolToken` tokens to"}},"borrowQuoteToken(uint256,address)":{"params":{"amount":"The requested amount to borrow","recipient":"The recipient to send the `quoteToken` tokens to"}},"repayProtocolToken(uint256)":{"params":{"amount":"The requested amount to repay"}},"repayQuoteToken(uint256)":{"params":{"amount":"The requested amount to repay"}}},"title":"Ramos Token Vault","version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"borrowProtocolToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"borrowQuoteToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repayProtocolToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repayQuoteToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"borrowProtocolToken(uint256,address)\":{\"params\":{\"amount\":\"The requested amount to borrow\",\"recipient\":\"The recipient to send the `protocolToken` tokens to\"}},\"borrowQuoteToken(uint256,address)\":{\"params\":{\"amount\":\"The requested amount to borrow\",\"recipient\":\"The recipient to send the `quoteToken` tokens to\"}},\"repayProtocolToken(uint256)\":{\"params\":{\"amount\":\"The requested amount to repay\"}},\"repayQuoteToken(uint256)\":{\"params\":{\"amount\":\"The requested amount to repay\"}}},\"title\":\"Ramos Token Vault\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"borrowProtocolToken(uint256,address)\":{\"notice\":\"Send `protocolToken` to recipient\"},\"borrowQuoteToken(uint256,address)\":{\"notice\":\"Send `quoteToken` to recipient\"},\"repayProtocolToken(uint256)\":{\"notice\":\"Pull `protocolToken` from the caller\"},\"repayQuoteToken(uint256)\":{\"notice\":\"Pull `quoteToken` from the caller\"}},\"notice\":\"A vault to provide protocol and quote tokens to Ramos as it rebalances or updates liquidity. These two tokens are the pair of tokens in a liquidity pool, eg:   protocolToken = TEMPLE   quoteToken = DAI\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"10_27_IRamosTokenVault.sol\":\"IRamosTokenVault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":false}},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"10_27_IRamosTokenVault.sol\":{\"keccak256\":\"0xd1dc062b900e7daf9ed73a7e629c6d138818b8e95db2481ad3f6ba2e24a671b2\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://05b0ce8f05041789aaf4a7b31d0b5a04a8c3036687a08edd30c0b3c7e277fca9\",\"dweb:/ipfs/Qmas5ZtwZHnxiaxrpEEbiNQzrcyBnMLnBK7SaKKoGzWyCX\"]}},\"version\":1}","userdoc":{"kind":"user","methods":{"borrowProtocolToken(uint256,address)":{"notice":"Send `protocolToken` to recipient"},"borrowQuoteToken(uint256,address)":{"notice":"Send `quoteToken` to recipient"},"repayProtocolToken(uint256)":{"notice":"Pull `protocolToken` from the caller"},"repayQuoteToken(uint256)":{"notice":"Pull `quoteToken` from the caller"}},"notice":"A vault to provide protocol and quote tokens to Ramos as it rebalances or updates liquidity. These two tokens are the pair of tokens in a liquidity pool, eg:   protocolToken = TEMPLE   quoteToken = DAI","version":1}}},"11_27_IAuraStaking.sol":{"IAuraStaking":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"RecoveredToken","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address[]","name":"rewardTokens","type":"address[]"}],"name":"RewardTokensSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint32","name":"pId","type":"uint32"},{"indexed":false,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"address","name":"rewards","type":"address"}],"name":"SetAuraPoolInfo","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"recipient","type":"address"}],"name":"SetRewardsRecipient","type":"event"},{"inputs":[],"name":"auraPoolInfo","outputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"rewards","type":"address"},{"internalType":"uint32","name":"pId","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"booster","outputs":[{"internalType":"contract IAuraBooster","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"bptToken","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"depositAndStake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"earned","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bool","name":"claimExtras","type":"bool"}],"name":"getReward","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"isAuraShutdown","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"recoverToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"rewardTokens","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rewardsRecipient","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"_pId","type":"uint32"},{"internalType":"address","name":"_token","type":"address"},{"internalType":"address","name":"_rewards","type":"address"}],"name":"setAuraPoolInfo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"_rewardTokens","type":"address[]"}],"name":"setRewardTokens","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_recipeint","type":"address"}],"name":"setRewardsRecipient","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"showPositions","outputs":[{"components":[{"internalType":"uint256","name":"staked","type":"uint256"},{"internalType":"uint256","name":"earned","type":"uint256"}],"internalType":"struct IAuraStaking.Position","name":"position","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"stakedBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bool","name":"claim","type":"bool"},{"internalType":"address","name":"recipient","type":"address"}],"name":"withdrawAllAndUnwrap","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bool","name":"claim","type":"bool"},{"internalType":"address","name":"recipient","type":"address"}],"name":"withdrawAndUnwrap","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoveredToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"rewardTokens\",\"type\":\"address[]\"}],\"name\":\"RewardTokensSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"pId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewards\",\"type\":\"address\"}],\"name\":\"SetAuraPoolInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"SetRewardsRecipient\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"auraPoolInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewards\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"pId\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"booster\",\"outputs\":[{\"internalType\":\"contract IAuraBooster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bptToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositAndStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"claimExtras\",\"type\":\"bool\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAuraShutdown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_pId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewards\",\"type\":\"address\"}],\"name\":\"setAuraPoolInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"}],\"name\":\"setRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipeint\",\"type\":\"address\"}],\"name\":\"setRewardsRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showPositions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"staked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"}],\"internalType\":\"struct IAuraStaking.Position\",\"name\":\"position\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"claim\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawAllAndUnwrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claim\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawAndUnwrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"totalBalance()\":{\"notice\":\"The total balance of BPT owned by this contract - either staked in Aura  or unstaked\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"11_27_IAuraStaking.sol\":\"IAuraStaking\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":false}},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"04_27_IERC20.sol\":{\"keccak256\":\"0x3cedce2cd7eacaae0bc44842b12b842e38aaa2add3f660bfca6c3dfa88542fe2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5b5f40ecf34ab169edc109702d94db1c4f1e71c467cfeb077879694d681e1ba8\",\"dweb:/ipfs/QmWF8AMSAbaxbqp2ViuXQnzyPbuiPPNriaBZ5Lh7o1LmCH\"]},\"11_27_IAuraStaking.sol\":{\"keccak256\":\"0xd80a4372ae48dead847a60ad216721c3a9103dc98776d725639b720f16f5b343\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://13bb6611ff67fe081c99290516636e4846524951c7a8935842816201a128c61e\",\"dweb:/ipfs/QmYCxDLpbVuzqLVh5nnEHuXPVUjZqYA4qbJvGQmVtiziWT\"]},\"14_27_IAuraBooster.sol\":{\"keccak256\":\"0x7768de2548579b4b8f4b907d28378e6cf78813b548797c255c7271122c435aaa\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://088117d3940e21b3c828d02fa88bb54dec26a5c0f061e98d95d7b097825dfe11\",\"dweb:/ipfs/Qmcws7hkD4T4XR2cy7UyXAcpGCXp8DYPbQGaCopMfDjW3H\"]}},\"version\":1}","userdoc":{"kind":"user","methods":{"totalBalance()":{"notice":"The total balance of BPT owned by this contract - either staked in Aura  or unstaked"}},"version":1}}},"12_27_IRamos.sol":{"IRamos":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"bptAmount","type":"uint256"}],"name":"DepositAndStakeBptTokens","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"feeCollector","type":"address"}],"name":"FeeCollectorSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"quoteTokenAdded","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"protocolTokenAdded","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"bptReceived","type":"uint256"}],"name":"LiquidityAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"quoteTokenReceived","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"protocolTokenReceived","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"bptRemoved","type":"uint256"}],"name":"LiquidityRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"bptAmountIn","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"quoteTokenRepaid","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"quoteTokenFee","type":"uint256"}],"name":"RebalanceDownExit","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"protocolTokenAmountIn","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"bptTokensStaked","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"protocolTokenFee","type":"uint256"}],"name":"RebalanceDownJoin","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"rebalanceJoinFeeBps","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"rebalanceExitFeeBps","type":"uint256"}],"name":"RebalanceFeesSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"bptAmountIn","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"protocolTokenRepaid","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"protocolTokenFee","type":"uint256"}],"name":"RebalanceUpExit","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"quoteTokenAmountIn","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"bptTokensStaked","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"quoteTokenFee","type":"uint256"}],"name":"RebalanceUpJoin","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"RecoveredToken","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"cooldownSecs","type":"uint64"}],"name":"SetCooldown","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"bptMaxAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"quoteTokenMaxAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"protocolTokenMaxAmount","type":"uint256"}],"name":"SetMaxRebalanceAmounts","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"poolHelper","type":"address"}],"name":"SetPoolHelper","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"deltaBps","type":"uint64"}],"name":"SetPostRebalanceDelta","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"belowTpi","type":"uint64"},{"indexed":false,"internalType":"uint64","name":"aboveTpi","type":"uint64"}],"name":"SetRebalancePercentageBounds","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"vault","type":"address"}],"name":"TokenVaultSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"tpiOracle","type":"address"}],"name":"TpiOracleSet","type":"event"},{"inputs":[],"name":"BPS_PRECISION","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address[]","name":"assets","type":"address[]"},{"internalType":"uint256[]","name":"maxAmountsIn","type":"uint256[]"},{"internalType":"bytes","name":"userData","type":"bytes"},{"internalType":"bool","name":"fromInternalBalance","type":"bool"}],"internalType":"struct IBalancerVault.JoinPoolRequest","name":"request","type":"tuple"}],"name":"addLiquidity","outputs":[{"internalType":"uint256","name":"quoteTokenAmount","type":"uint256"},{"internalType":"uint256","name":"protocolTokenAmount","type":"uint256"},{"internalType":"uint256","name":"bptTokensStaked","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"amoStaking","outputs":[{"internalType":"contract IAuraStaking","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"balancerPoolId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"balancerVault","outputs":[{"internalType":"contract IBalancerVault","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"bptToken","outputs":[{"internalType":"contract IBalancerBptToken","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"cooldownSecs","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bool","name":"useContractBalance","type":"bool"}],"name":"depositAndStakeBptTokens","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"feeCollector","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastRebalanceTimeSecs","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxRebalanceAmounts","outputs":[{"internalType":"uint256","name":"bpt","type":"uint256"},{"internalType":"uint256","name":"quoteToken","type":"uint256"},{"internalType":"uint256","name":"protocolToken","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxRebalanceFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"poolHelper","outputs":[{"internalType":"contract IBalancerPoolHelper","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"positions","outputs":[{"internalType":"uint256","name":"bptBalance","type":"uint256"},{"internalType":"uint256","name":"protoclTokenBalance","type":"uint256"},{"internalType":"uint256","name":"quoteTokenBalance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"postRebalanceDelta","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"protocolToken","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"protocolTokenBalancerPoolIndex","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"quoteToken","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"bptAmountIn","type":"uint256"},{"internalType":"uint256","name":"minQuoteTokenAmountOut","type":"uint256"}],"name":"rebalanceDownExit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"protocolTokenAmountIn","type":"uint256"},{"internalType":"uint256","name":"minBptOut","type":"uint256"}],"name":"rebalanceDownJoin","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rebalanceFees","outputs":[{"internalType":"uint128","name":"rebalanceJoinFeeBps","type":"uint128"},{"internalType":"uint128","name":"rebalanceExitFeeBps","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rebalancePercentageBoundLow","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rebalancePercentageBoundUp","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"bptAmountIn","type":"uint256"},{"internalType":"uint256","name":"minProtocolTokenOut","type":"uint256"}],"name":"rebalanceUpExit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"quoteTokenAmountIn","type":"uint256"},{"internalType":"uint256","name":"minBptOut","type":"uint256"}],"name":"rebalanceUpJoin","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address[]","name":"assets","type":"address[]"},{"internalType":"uint256[]","name":"minAmountsOut","type":"uint256[]"},{"internalType":"bytes","name":"userData","type":"bytes"},{"internalType":"bool","name":"toInternalBalance","type":"bool"}],"internalType":"struct IBalancerVault.ExitPoolRequest","name":"request","type":"tuple"},{"internalType":"uint256","name":"bptIn","type":"uint256"}],"name":"removeLiquidity","outputs":[{"internalType":"uint256","name":"quoteTokenAmount","type":"uint256"},{"internalType":"uint256","name":"protocolTokenAmount","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"rebalanceJoinFeeBps","type":"uint256"},{"internalType":"uint256","name":"rebalanceExitFeeBps","type":"uint256"}],"name":"setRebalanceFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"vault","type":"address"}],"name":"setTokenVault","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"tpiOracleAddress","type":"address"}],"name":"setTpiOracle","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"tokenVault","outputs":[{"internalType":"contract IRamosTokenVault","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tpiOracle","outputs":[{"internalType":"contract ITreasuryPriceIndexOracle","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"treasuryPriceIndex","outputs":[{"internalType":"uint96","name":"","type":"uint96"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"addLiquidity((address[],uint256[],bytes,bool))":{"params":{"request":"Request data for joining balancer pool. Assumes userdata of request is encoded with EXACT_TOKENS_IN_FOR_BPT_OUT type"}},"depositAndStakeBptTokens(uint256,bool)":{"params":{"amount":"Amount of Bpt tokens to depositt","useContractBalance":"If to use bpt tokens in contract"}},"positions()":{"details":"Calculated by pulling the total balances of each token in the pool and getting RAMOS proportion of the owned BPT's"},"rebalanceDownExit(uint256,uint256)":{"params":{"bptAmountIn":"Amount of BPT tokens to deposit into balancer pool","minQuoteTokenAmountOut":"Minimum amount of `quoteToken` expected to receive"}},"rebalanceDownJoin(uint256,uint256)":{"details":"The `protocolToken` are borrowed from the `TokenVault`","params":{"minBptOut":"Minimum amount of BPT tokens expected to receive","protocolTokenAmountIn":"Amount of `protocolToken` tokens to deposit into balancer pool"}},"rebalanceUpExit(uint256,uint256)":{"params":{"bptAmountIn":"amount of BPT tokens going in balancer pool for exit","minProtocolTokenOut":"amount of `protocolToken` expected out of balancer pool"}},"rebalanceUpJoin(uint256,uint256)":{"details":"The `quoteToken` amount must be deposited into this contract first","params":{"minBptOut":"Minimum amount of BPT tokens expected to receive","quoteTokenAmountIn":"Amount of `quoteToken` to deposit into balancer pool"}},"removeLiquidity((address[],uint256[],bytes,bool),uint256)":{"params":{"bptIn":"Amount of BPT tokens to send into balancer pool","request":"Request for use in balancer pool exit"}},"setRebalanceFees(uint256,uint256)":{"params":{"rebalanceExitFeeBps":"The fee for when a `rebalanceUpExit` or `rebalanceDownExit` is performed","rebalanceJoinFeeBps":"The fee for when a `rebalanceUpJoin` or `rebalanceDownJoin` is performed"}}},"title":"AMO built for a 50/50 balancer pool","version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bptAmount\",\"type\":\"uint256\"}],\"name\":\"DepositAndStakeBptTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"}],\"name\":\"FeeCollectorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quoteTokenAdded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolTokenAdded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bptReceived\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quoteTokenReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolTokenReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bptRemoved\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bptAmountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quoteTokenRepaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quoteTokenFee\",\"type\":\"uint256\"}],\"name\":\"RebalanceDownExit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolTokenAmountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bptTokensStaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolTokenFee\",\"type\":\"uint256\"}],\"name\":\"RebalanceDownJoin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rebalanceJoinFeeBps\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rebalanceExitFeeBps\",\"type\":\"uint256\"}],\"name\":\"RebalanceFeesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bptAmountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolTokenRepaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolTokenFee\",\"type\":\"uint256\"}],\"name\":\"RebalanceUpExit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quoteTokenAmountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bptTokensStaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quoteTokenFee\",\"type\":\"uint256\"}],\"name\":\"RebalanceUpJoin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoveredToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"cooldownSecs\",\"type\":\"uint64\"}],\"name\":\"SetCooldown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bptMaxAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quoteTokenMaxAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolTokenMaxAmount\",\"type\":\"uint256\"}],\"name\":\"SetMaxRebalanceAmounts\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolHelper\",\"type\":\"address\"}],\"name\":\"SetPoolHelper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"deltaBps\",\"type\":\"uint64\"}],\"name\":\"SetPostRebalanceDelta\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"belowTpi\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"aboveTpi\",\"type\":\"uint64\"}],\"name\":\"SetRebalancePercentageBounds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"TokenVaultSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tpiOracle\",\"type\":\"address\"}],\"name\":\"TpiOracleSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BPS_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IBalancerVault.JoinPoolRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quoteTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bptTokensStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amoStaking\",\"outputs\":[{\"internalType\":\"contract IAuraStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerPoolId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerVault\",\"outputs\":[{\"internalType\":\"contract IBalancerVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bptToken\",\"outputs\":[{\"internalType\":\"contract IBalancerBptToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownSecs\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"useContractBalance\",\"type\":\"bool\"}],\"name\":\"depositAndStakeBptTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRebalanceTimeSecs\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRebalanceAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bpt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRebalanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolHelper\",\"outputs\":[{\"internalType\":\"contract IBalancerPoolHelper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bptBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protoclTokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteTokenBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postRebalanceDelta\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolTokenBalancerPoolIndex\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bptAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minQuoteTokenAmountOut\",\"type\":\"uint256\"}],\"name\":\"rebalanceDownExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"protocolTokenAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBptOut\",\"type\":\"uint256\"}],\"name\":\"rebalanceDownJoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalanceFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"rebalanceJoinFeeBps\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rebalanceExitFeeBps\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalancePercentageBoundLow\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalancePercentageBoundUp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bptAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minProtocolTokenOut\",\"type\":\"uint256\"}],\"name\":\"rebalanceUpExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quoteTokenAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBptOut\",\"type\":\"uint256\"}],\"name\":\"rebalanceUpJoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IBalancerVault.ExitPoolRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"bptIn\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quoteTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rebalanceJoinFeeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rebalanceExitFeeBps\",\"type\":\"uint256\"}],\"name\":\"setRebalanceFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"setTokenVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tpiOracleAddress\",\"type\":\"address\"}],\"name\":\"setTpiOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenVault\",\"outputs\":[{\"internalType\":\"contract IRamosTokenVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tpiOracle\",\"outputs\":[{\"internalType\":\"contract ITreasuryPriceIndexOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryPriceIndex\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addLiquidity((address[],uint256[],bytes,bool))\":{\"params\":{\"request\":\"Request data for joining balancer pool. Assumes userdata of request is encoded with EXACT_TOKENS_IN_FOR_BPT_OUT type\"}},\"depositAndStakeBptTokens(uint256,bool)\":{\"params\":{\"amount\":\"Amount of Bpt tokens to depositt\",\"useContractBalance\":\"If to use bpt tokens in contract\"}},\"positions()\":{\"details\":\"Calculated by pulling the total balances of each token in the pool and getting RAMOS proportion of the owned BPT's\"},\"rebalanceDownExit(uint256,uint256)\":{\"params\":{\"bptAmountIn\":\"Amount of BPT tokens to deposit into balancer pool\",\"minQuoteTokenAmountOut\":\"Minimum amount of `quoteToken` expected to receive\"}},\"rebalanceDownJoin(uint256,uint256)\":{\"details\":\"The `protocolToken` are borrowed from the `TokenVault`\",\"params\":{\"minBptOut\":\"Minimum amount of BPT tokens expected to receive\",\"protocolTokenAmountIn\":\"Amount of `protocolToken` tokens to deposit into balancer pool\"}},\"rebalanceUpExit(uint256,uint256)\":{\"params\":{\"bptAmountIn\":\"amount of BPT tokens going in balancer pool for exit\",\"minProtocolTokenOut\":\"amount of `protocolToken` expected out of balancer pool\"}},\"rebalanceUpJoin(uint256,uint256)\":{\"details\":\"The `quoteToken` amount must be deposited into this contract first\",\"params\":{\"minBptOut\":\"Minimum amount of BPT tokens expected to receive\",\"quoteTokenAmountIn\":\"Amount of `quoteToken` to deposit into balancer pool\"}},\"removeLiquidity((address[],uint256[],bytes,bool),uint256)\":{\"params\":{\"bptIn\":\"Amount of BPT tokens to send into balancer pool\",\"request\":\"Request for use in balancer pool exit\"}},\"setRebalanceFees(uint256,uint256)\":{\"params\":{\"rebalanceExitFeeBps\":\"The fee for when a `rebalanceUpExit` or `rebalanceDownExit` is performed\",\"rebalanceJoinFeeBps\":\"The fee for when a `rebalanceUpJoin` or `rebalanceDownJoin` is performed\"}}},\"title\":\"AMO built for a 50/50 balancer pool\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"BPS_PRECISION()\":{\"notice\":\"Precision for BPS calculations. 1% == 100\"},\"addLiquidity((address[],uint256[],bytes,bool))\":{\"notice\":\"Add liquidity with both `protocolToken` and `quoteToken` into balancer pool.  TPI is expected to be within bounds of multisig set range. BPT tokens are then deposited and staked in Aura.\"},\"amoStaking()\":{\"notice\":\"AMO contract for staking into aura \"},\"balancerPoolId()\":{\"notice\":\"The balancer 50/50 pool ID.\"},\"balancerVault()\":{\"notice\":\"The Balancer vault singleton\"},\"bptToken()\":{\"notice\":\"BPT token address for this LP\"},\"cooldownSecs()\":{\"notice\":\"The minimum amount of time which must pass since `lastRebalanceTimeSecs` before another rebalance can occur\"},\"depositAndStakeBptTokens(uint256,bool)\":{\"notice\":\"Allow owner to deposit and stake bpt tokens directly\"},\"feeCollector()\":{\"notice\":\"The address to send proportion of rebalance as fees to\"},\"lastRebalanceTimeSecs()\":{\"notice\":\"The time when the last rebalance occured\"},\"maxRebalanceAmounts()\":{\"notice\":\"Maximum amount of tokens that can be rebalanced on each run\"},\"maxRebalanceFee()\":{\"notice\":\"The maximum rebalance fee which can be set\"},\"poolHelper()\":{\"notice\":\"Balancer pool helper contract\"},\"positions()\":{\"notice\":\"The total amount of `protocolToken` and `quoteToken` that Ramos holds via it's  staked and unstaked BPT.\"},\"postRebalanceDelta()\":{\"notice\":\"A limit on how much the price can be impacted by a rebalance.  A price change over this limit will revert. Specified in bps\"},\"protocolToken()\":{\"notice\":\"The Protocol token  \"},\"protocolTokenBalancerPoolIndex()\":{\"notice\":\"protocolToken index in balancer pool. to avoid recalculation or external calls\"},\"quoteToken()\":{\"notice\":\"The quoteToken this is paired with in the LP. It may be a stable,  or another Balancer linear token like BB-A-USD\"},\"rebalanceDownExit(uint256,uint256)\":{\"notice\":\"Rebalance down when `protocolToken` spot price is above TPI. Single-side WITHDRAW `quoteToken` from balancer liquidity pool to lower price. BPT tokens are withdrawn from Aura rewards staking contract and used for balancer pool exit.  Ramos rebalance fees are deducted from the amount of `quoteToken` returned from the exit The remainder `quoteToken` are repaid via the token vault\"},\"rebalanceDownJoin(uint256,uint256)\":{\"notice\":\"Rebalance down when `protocolToken` spot price is above TPI. Single-side ADD `protocolToken` into the balancer liquidity pool to lower price. Returned BPT tokens are deposited and staked into Aura for rewards using the staking contract. Ramos rebalance fees are deducted from the amount of `protocolToken` input The remainder `protocolToken` are added into the balancer pool\"},\"rebalanceFees()\":{\"notice\":\"The fees (in basis points) taken on a rebalance\"},\"rebalancePercentageBoundLow()\":{\"notice\":\"The percentage bounds (in bps) beyond which to rebalance up or down\"},\"rebalanceUpExit(uint256,uint256)\":{\"notice\":\"Rebalance up when `protocolToken` spot price is below TPI. Single-side WITHDRAW `protocolToken` from balancer liquidity pool to raise price. BPT tokens are withdrawn from Aura rewards staking contract and used for balancer pool exit.  Ramos rebalance fees are deducted from the amount of `protocolToken` returned from the exit The remainder `protocolToken` are repaid to the `TokenVault`\"},\"rebalanceUpJoin(uint256,uint256)\":{\"notice\":\"Rebalance up when `protocolToken` spot price is below TPI. Single-side ADD `quoteToken` into the balancer liquidity pool to raise price. Returned BPT tokens are deposited and staked into Aura for rewards using the staking contract. Ramos rebalance fees are deducted from the amount of `quoteToken` input The remainder `quoteToken` are added into the balancer pool\"},\"removeLiquidity((address[],uint256[],bytes,bool),uint256)\":{\"notice\":\"Remove liquidity from balancer pool receiving both `protocolToken` and `quoteToken` from balancer pool.  TPI is expected to be within bounds of multisig set range. Withdraw and unwrap BPT tokens from Aura staking and send to balancer pool to receive both tokens.\"},\"setRebalanceFees(uint256,uint256)\":{\"notice\":\"Set the rebalance fees, in basis points\"},\"setTokenVault(address)\":{\"notice\":\"Set the Treasury Price Index (TPI) Oracle\"},\"setTpiOracle(address)\":{\"notice\":\"Set the Treasury Price Index (TPI) Oracle\"},\"tokenVault()\":{\"notice\":\"The vault from where to borrow and repay the Protocol Token\"},\"tpiOracle()\":{\"notice\":\"The Treasury Price Index (TPI) Oracle\"},\"treasuryPriceIndex()\":{\"notice\":\"The Treasury Price Index - the target price of the Treasury, in `quoteTokenToken` terms.\"}},\"notice\":\"RAMOS rebalances the pool to trend towards the Treasury Price Index (TPI). In order to accomplish this:   1. When the price is BELOW the TPI it will either:      - Single side withdraw `protocolToken`      - Single side add `quoteToken`   2. When the price is ABOVE the TPI it will either:      - Single side add `protocolToken`      - Single side withdraw `quoteToken` Any idle BPTs (Balancer LP tokens) are deposited into Aura to earn yield. `protocolToken` can be sourced/disposed of by either having direct mint & burn rights or by pulling and sending tokens to an address.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"12_27_IRamos.sol\":\"IRamos\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":false}},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"04_27_IERC20.sol\":{\"keccak256\":\"0x3cedce2cd7eacaae0bc44842b12b842e38aaa2add3f660bfca6c3dfa88542fe2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5b5f40ecf34ab169edc109702d94db1c4f1e71c467cfeb077879694d681e1ba8\",\"dweb:/ipfs/QmWF8AMSAbaxbqp2ViuXQnzyPbuiPPNriaBZ5Lh7o1LmCH\"]},\"09_27_IBalancerPoolHelper.sol\":{\"keccak256\":\"0xf3428601a1825ae3604ab3716766e56c51dfd6eef576f5c5d33169f6549d5e43\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://5fd4e51428b1f62e4debb05dafd23f02bf25fe7ebcb33652ec29e40ef6076bc8\",\"dweb:/ipfs/QmcNFxJ4BDWCgzrBGLaE4ihuXZncspk4EhVzzaQv69rNPW\"]},\"10_27_IRamosTokenVault.sol\":{\"keccak256\":\"0xd1dc062b900e7daf9ed73a7e629c6d138818b8e95db2481ad3f6ba2e24a671b2\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://05b0ce8f05041789aaf4a7b31d0b5a04a8c3036687a08edd30c0b3c7e277fca9\",\"dweb:/ipfs/Qmas5ZtwZHnxiaxrpEEbiNQzrcyBnMLnBK7SaKKoGzWyCX\"]},\"11_27_IAuraStaking.sol\":{\"keccak256\":\"0xd80a4372ae48dead847a60ad216721c3a9103dc98776d725639b720f16f5b343\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://13bb6611ff67fe081c99290516636e4846524951c7a8935842816201a128c61e\",\"dweb:/ipfs/QmYCxDLpbVuzqLVh5nnEHuXPVUjZqYA4qbJvGQmVtiziWT\"]},\"12_27_IRamos.sol\":{\"keccak256\":\"0xe1da946527b154871e7a453f90da4278fa21915663f9a8047fcc2b8ccc57a692\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://8617f97b86e09f89b9faf181596e48a35974b698145b9059f5c1248a735e6f80\",\"dweb:/ipfs/QmUmuaqCSTqr9HRk5wM121eMcG8icq6UqBT5kHNqAs7zFG\"]},\"14_27_IAuraBooster.sol\":{\"keccak256\":\"0x7768de2548579b4b8f4b907d28378e6cf78813b548797c255c7271122c435aaa\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://088117d3940e21b3c828d02fa88bb54dec26a5c0f061e98d95d7b097825dfe11\",\"dweb:/ipfs/Qmcws7hkD4T4XR2cy7UyXAcpGCXp8DYPbQGaCopMfDjW3H\"]},\"15_27_IBalancerBptToken.sol\":{\"keccak256\":\"0xcb48c3a89b267407ab57826dbab3e59ed48156517c630cc8dbf5b18a5d958ff0\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://ab626b536f18181b957957545c9f64283e906903223fde5b8230045f50a0e162\",\"dweb:/ipfs/QmYKMLbZ7LD8WH5yJ4CNhtTV2vGLSUVJGZCq8FQrrSr5Ve\"]},\"16_27_IBalancerHelpers.sol\":{\"keccak256\":\"0xfcba81b302d3dfe62204f43cff088ad49182116acc7f95bc020a061de5ac9d70\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://6a93f3132b883eb93d225bd029c87365731b5185caa099af26102f3719c6861f\",\"dweb:/ipfs/QmNrjrf6e9wkbFhDsHa9fzc6y4FKS8SMxW1LwsBSfmeUkw\"]},\"17_27_IBalancerVault.sol\":{\"keccak256\":\"0x46bd97b033d550f451627650eb8262db5f13b6abeeaeceb1f2f94f26664b3fac\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://0bd6fc0769136a989a74e0cc7aba72621655e65416ee62378f99fb9797675b8f\",\"dweb:/ipfs/QmPPWLZu6EmtbhDdgwt9bvBAtnNPM3GX1oiQsPqm3knN3h\"]},\"18_27_ITempleElevatedAccess.sol\":{\"keccak256\":\"0xe5a19949ec514acf13d40c2dcda3356e803d93ed0cb5d8b76825c99250a234f4\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://ed239ebf015364133360cbeebc6193d630b32bcead90c832765d4e39b3727ee8\",\"dweb:/ipfs/QmZLQaTrraMRg7aGSyrFVh2dTKaC9Ua5LY1ZF53zbpndtu\"]},\"22_27_ITreasuryPriceIndexOracle.sol\":{\"keccak256\":\"0x208f4d65ae984c3d51f7bc0fb9801b987ce8e27e19e289d7b3e2de6933928c9e\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://9641530ca07f12d061c63c238e316176d11aaa22d7c00def1ecf070d9f9666e3\",\"dweb:/ipfs/QmdhgtiSK8oFYcBTRhfP7yRez6iSHShctn2bBzQX5VE6JE\"]}},\"version\":1}","userdoc":{"kind":"user","methods":{"BPS_PRECISION()":{"notice":"Precision for BPS calculations. 1% == 100"},"addLiquidity((address[],uint256[],bytes,bool))":{"notice":"Add liquidity with both `protocolToken` and `quoteToken` into balancer pool.  TPI is expected to be within bounds of multisig set range. BPT tokens are then deposited and staked in Aura."},"amoStaking()":{"notice":"AMO contract for staking into aura "},"balancerPoolId()":{"notice":"The balancer 50/50 pool ID."},"balancerVault()":{"notice":"The Balancer vault singleton"},"bptToken()":{"notice":"BPT token address for this LP"},"cooldownSecs()":{"notice":"The minimum amount of time which must pass since `lastRebalanceTimeSecs` before another rebalance can occur"},"depositAndStakeBptTokens(uint256,bool)":{"notice":"Allow owner to deposit and stake bpt tokens directly"},"feeCollector()":{"notice":"The address to send proportion of rebalance as fees to"},"lastRebalanceTimeSecs()":{"notice":"The time when the last rebalance occured"},"maxRebalanceAmounts()":{"notice":"Maximum amount of tokens that can be rebalanced on each run"},"maxRebalanceFee()":{"notice":"The maximum rebalance fee which can be set"},"poolHelper()":{"notice":"Balancer pool helper contract"},"positions()":{"notice":"The total amount of `protocolToken` and `quoteToken` that Ramos holds via it's  staked and unstaked BPT."},"postRebalanceDelta()":{"notice":"A limit on how much the price can be impacted by a rebalance.  A price change over this limit will revert. Specified in bps"},"protocolToken()":{"notice":"The Protocol token  "},"protocolTokenBalancerPoolIndex()":{"notice":"protocolToken index in balancer pool. to avoid recalculation or external calls"},"quoteToken()":{"notice":"The quoteToken this is paired with in the LP. It may be a stable,  or another Balancer linear token like BB-A-USD"},"rebalanceDownExit(uint256,uint256)":{"notice":"Rebalance down when `protocolToken` spot price is above TPI. Single-side WITHDRAW `quoteToken` from balancer liquidity pool to lower price. BPT tokens are withdrawn from Aura rewards staking contract and used for balancer pool exit.  Ramos rebalance fees are deducted from the amount of `quoteToken` returned from the exit The remainder `quoteToken` are repaid via the token vault"},"rebalanceDownJoin(uint256,uint256)":{"notice":"Rebalance down when `protocolToken` spot price is above TPI. Single-side ADD `protocolToken` into the balancer liquidity pool to lower price. Returned BPT tokens are deposited and staked into Aura for rewards using the staking contract. Ramos rebalance fees are deducted from the amount of `protocolToken` input The remainder `protocolToken` are added into the balancer pool"},"rebalanceFees()":{"notice":"The fees (in basis points) taken on a rebalance"},"rebalancePercentageBoundLow()":{"notice":"The percentage bounds (in bps) beyond which to rebalance up or down"},"rebalanceUpExit(uint256,uint256)":{"notice":"Rebalance up when `protocolToken` spot price is below TPI. Single-side WITHDRAW `protocolToken` from balancer liquidity pool to raise price. BPT tokens are withdrawn from Aura rewards staking contract and used for balancer pool exit.  Ramos rebalance fees are deducted from the amount of `protocolToken` returned from the exit The remainder `protocolToken` are repaid to the `TokenVault`"},"rebalanceUpJoin(uint256,uint256)":{"notice":"Rebalance up when `protocolToken` spot price is below TPI. Single-side ADD `quoteToken` into the balancer liquidity pool to raise price. Returned BPT tokens are deposited and staked into Aura for rewards using the staking contract. Ramos rebalance fees are deducted from the amount of `quoteToken` input The remainder `quoteToken` are added into the balancer pool"},"removeLiquidity((address[],uint256[],bytes,bool),uint256)":{"notice":"Remove liquidity from balancer pool receiving both `protocolToken` and `quoteToken` from balancer pool.  TPI is expected to be within bounds of multisig set range. Withdraw and unwrap BPT tokens from Aura staking and send to balancer pool to receive both tokens."},"setRebalanceFees(uint256,uint256)":{"notice":"Set the rebalance fees, in basis points"},"setTokenVault(address)":{"notice":"Set the Treasury Price Index (TPI) Oracle"},"setTpiOracle(address)":{"notice":"Set the Treasury Price Index (TPI) Oracle"},"tokenVault()":{"notice":"The vault from where to borrow and repay the Protocol Token"},"tpiOracle()":{"notice":"The Treasury Price Index (TPI) Oracle"},"treasuryPriceIndex()":{"notice":"The Treasury Price Index - the target price of the Treasury, in `quoteTokenToken` terms."}},"notice":"RAMOS rebalances the pool to trend towards the Treasury Price Index (TPI). In order to accomplish this:   1. When the price is BELOW the TPI it will either:      - Single side withdraw `protocolToken`      - Single side add `quoteToken`   2. When the price is ABOVE the TPI it will either:      - Single side add `protocolToken`      - Single side withdraw `quoteToken` Any idle BPTs (Balancer LP tokens) are deposited into Aura to earn yield. `protocolToken` can be sourced/disposed of by either having direct mint & burn rights or by pulling and sending tokens to an address.","version":1}}},"13_27_ITempleERC20Token.sol":{"ITempleERC20Token":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"burn(uint256)":{"details":"Destroys `amount` tokens from the caller. See {ERC20-_burn}."},"burnFrom(address,uint256)":{"details":"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"burn(uint256)\":{\"details\":\"Destroys `amount` tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"13_27_ITempleERC20Token.sol\":\"ITempleERC20Token\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":false}},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"04_27_IERC20.sol\":{\"keccak256\":\"0x3cedce2cd7eacaae0bc44842b12b842e38aaa2add3f660bfca6c3dfa88542fe2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5b5f40ecf34ab169edc109702d94db1c4f1e71c467cfeb077879694d681e1ba8\",\"dweb:/ipfs/QmWF8AMSAbaxbqp2ViuXQnzyPbuiPPNriaBZ5Lh7o1LmCH\"]},\"13_27_ITempleERC20Token.sol\":{\"keccak256\":\"0x5448a939ff85d37c0dd06a4912f8aa55a5cf7c0eb642330ade1560215b74b349\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://c6243c7affee6122d801251a3b6f635ac94feda4e0cd7f65f3d753cb69d0355b\",\"dweb:/ipfs/QmRcGLByo45ESckYu9GRUhkwNiK4uTJQQRqqoEK5mSsVQu\"]}},\"version\":1}","userdoc":{"kind":"user","methods":{},"version":1}}},"14_27_IAuraBooster.sol":{"IAuraBooster":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"uint256","name":"poolid","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Deposited","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"uint256","name":"poolid","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Withdrawn","type":"event"},{"inputs":[{"internalType":"uint256","name":"_pid","type":"uint256"},{"internalType":"address","name":"_gauge","type":"address"}],"name":"claimRewards","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_pid","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"bool","name":"_stake","type":"bool"}],"name":"deposit","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_pid","type":"uint256"},{"internalType":"bool","name":"_stake","type":"bool"}],"name":"depositAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_feeToken","type":"address"}],"name":"earmarkFees","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_pid","type":"uint256"}],"name":"earmarkRewards","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"isShutdown","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"minter","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_pid","type":"uint256"}],"name":"poolInfo","outputs":[{"components":[{"internalType":"address","name":"lptoken","type":"address"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"gauge","type":"address"},{"internalType":"address","name":"crvRewards","type":"address"},{"internalType":"address","name":"stash","type":"address"},{"internalType":"bool","name":"shutdown","type":"bool"}],"internalType":"struct IAuraBooster.PoolInfo","name":"","type":"tuple"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_stake\",\"type\":\"bool\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_stake\",\"type\":\"bool\"}],\"name\":\"depositAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToken\",\"type\":\"address\"}],\"name\":\"earmarkFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"earmarkRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isShutdown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lptoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"crvRewards\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stash\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"shutdown\",\"type\":\"bool\"}],\"internalType\":\"struct IAuraBooster.PoolInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"14_27_IAuraBooster.sol\":\"IAuraBooster\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":false}},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"14_27_IAuraBooster.sol\":{\"keccak256\":\"0x7768de2548579b4b8f4b907d28378e6cf78813b548797c255c7271122c435aaa\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://088117d3940e21b3c828d02fa88bb54dec26a5c0f061e98d95d7b097825dfe11\",\"dweb:/ipfs/Qmcws7hkD4T4XR2cy7UyXAcpGCXp8DYPbQGaCopMfDjW3H\"]}},\"version\":1}","userdoc":{"kind":"user","methods":{},"version":1}}},"15_27_IBalancerBptToken.sol":{"IBalancerBptToken":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getActualSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActualSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"15_27_IBalancerBptToken.sol\":\"IBalancerBptToken\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":false}},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"04_27_IERC20.sol\":{\"keccak256\":\"0x3cedce2cd7eacaae0bc44842b12b842e38aaa2add3f660bfca6c3dfa88542fe2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5b5f40ecf34ab169edc109702d94db1c4f1e71c467cfeb077879694d681e1ba8\",\"dweb:/ipfs/QmWF8AMSAbaxbqp2ViuXQnzyPbuiPPNriaBZ5Lh7o1LmCH\"]},\"15_27_IBalancerBptToken.sol\":{\"keccak256\":\"0xcb48c3a89b267407ab57826dbab3e59ed48156517c630cc8dbf5b18a5d958ff0\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://ab626b536f18181b957957545c9f64283e906903223fde5b8230045f50a0e162\",\"dweb:/ipfs/QmYKMLbZ7LD8WH5yJ4CNhtTV2vGLSUVJGZCq8FQrrSr5Ve\"]}},\"version\":1}","userdoc":{"kind":"user","methods":{},"version":1}}},"16_27_IBalancerHelpers.sol":{"IBalancerHelpers":{"abi":[{"inputs":[{"internalType":"bytes32","name":"poolId","type":"bytes32"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"components":[{"internalType":"address[]","name":"assets","type":"address[]"},{"internalType":"uint256[]","name":"minAmountsOut","type":"uint256[]"},{"internalType":"bytes","name":"userData","type":"bytes"},{"internalType":"bool","name":"toInternalBalance","type":"bool"}],"internalType":"struct IBalancerVault.ExitPoolRequest","name":"request","type":"tuple"}],"name":"queryExit","outputs":[{"internalType":"uint256","name":"bptIn","type":"uint256"},{"internalType":"uint256[]","name":"amountsOut","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"poolId","type":"bytes32"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"components":[{"internalType":"address[]","name":"assets","type":"address[]"},{"internalType":"uint256[]","name":"maxAmountsIn","type":"uint256[]"},{"internalType":"bytes","name":"userData","type":"bytes"},{"internalType":"bool","name":"fromInternalBalance","type":"bool"}],"internalType":"struct IBalancerVault.JoinPoolRequest","name":"request","type":"tuple"}],"name":"queryJoin","outputs":[{"internalType":"uint256","name":"bptOut","type":"uint256"},{"internalType":"uint256[]","name":"amountsIn","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IBalancerVault.ExitPoolRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"queryExit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bptIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsOut\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IBalancerVault.JoinPoolRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"queryJoin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bptOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsIn\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"16_27_IBalancerHelpers.sol\":\"IBalancerHelpers\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":false}},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"16_27_IBalancerHelpers.sol\":{\"keccak256\":\"0xfcba81b302d3dfe62204f43cff088ad49182116acc7f95bc020a061de5ac9d70\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://6a93f3132b883eb93d225bd029c87365731b5185caa099af26102f3719c6861f\",\"dweb:/ipfs/QmNrjrf6e9wkbFhDsHa9fzc6y4FKS8SMxW1LwsBSfmeUkw\"]},\"17_27_IBalancerVault.sol\":{\"keccak256\":\"0x46bd97b033d550f451627650eb8262db5f13b6abeeaeceb1f2f94f26664b3fac\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://0bd6fc0769136a989a74e0cc7aba72621655e65416ee62378f99fb9797675b8f\",\"dweb:/ipfs/QmPPWLZu6EmtbhDdgwt9bvBAtnNPM3GX1oiQsPqm3knN3h\"]}},\"version\":1}","userdoc":{"kind":"user","methods":{},"version":1}}},"17_27_IBalancerVault.sol":{"IBalancerVault":{"abi":[{"inputs":[{"internalType":"enum IBalancerVault.SwapKind","name":"kind","type":"uint8"},{"components":[{"internalType":"bytes32","name":"poolId","type":"bytes32"},{"internalType":"uint256","name":"assetInIndex","type":"uint256"},{"internalType":"uint256","name":"assetOutIndex","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"userData","type":"bytes"}],"internalType":"struct IBalancerVault.BatchSwapStep[]","name":"swaps","type":"tuple[]"},{"internalType":"address[]","name":"assets","type":"address[]"},{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"bool","name":"fromInternalBalance","type":"bool"},{"internalType":"address payable","name":"recipient","type":"address"},{"internalType":"bool","name":"toInternalBalance","type":"bool"}],"internalType":"struct IBalancerVault.FundManagement","name":"funds","type":"tuple"},{"internalType":"int256[]","name":"limits","type":"int256[]"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"batchSwap","outputs":[{"internalType":"int256[]","name":"assetDeltas","type":"int256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"poolId","type":"bytes32"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"components":[{"internalType":"address[]","name":"assets","type":"address[]"},{"internalType":"uint256[]","name":"minAmountsOut","type":"uint256[]"},{"internalType":"bytes","name":"userData","type":"bytes"},{"internalType":"bool","name":"toInternalBalance","type":"bool"}],"internalType":"struct IBalancerVault.ExitPoolRequest","name":"request","type":"tuple"}],"name":"exitPool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"poolId","type":"bytes32"}],"name":"getPoolTokens","outputs":[{"internalType":"address[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"balances","type":"uint256[]"},{"internalType":"uint256","name":"lastChangeBlock","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"poolId","type":"bytes32"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"components":[{"internalType":"address[]","name":"assets","type":"address[]"},{"internalType":"uint256[]","name":"maxAmountsIn","type":"uint256[]"},{"internalType":"bytes","name":"userData","type":"bytes"},{"internalType":"bool","name":"fromInternalBalance","type":"bool"}],"internalType":"struct IBalancerVault.JoinPoolRequest","name":"request","type":"tuple"}],"name":"joinPool","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"enum IBalancerVault.SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"assetInIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetOutIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct IBalancerVault.BatchSwapStep[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IBalancerVault.FundManagement\",\"name\":\"funds\",\"type\":\"tuple\"},{\"internalType\":\"int256[]\",\"name\":\"limits\",\"type\":\"int256[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"batchSwap\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"assetDeltas\",\"type\":\"int256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IBalancerVault.ExitPoolRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"exitPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"}],\"name\":\"getPoolTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"lastChangeBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IBalancerVault.JoinPoolRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"joinPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"17_27_IBalancerVault.sol\":\"IBalancerVault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":false}},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"17_27_IBalancerVault.sol\":{\"keccak256\":\"0x46bd97b033d550f451627650eb8262db5f13b6abeeaeceb1f2f94f26664b3fac\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://0bd6fc0769136a989a74e0cc7aba72621655e65416ee62378f99fb9797675b8f\",\"dweb:/ipfs/QmPPWLZu6EmtbhDdgwt9bvBAtnNPM3GX1oiQsPqm3knN3h\"]}},\"version\":1}","userdoc":{"kind":"user","methods":{},"version":1}}},"18_27_ITempleElevatedAccess.sol":{"ITempleElevatedAccess":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"bytes4","name":"fnSelector","type":"bytes4"},{"indexed":true,"internalType":"bool","name":"value","type":"bool"}],"name":"ExplicitAccessSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldExecutor","type":"address"},{"indexed":true,"internalType":"address","name":"newExecutor","type":"address"}],"name":"NewExecutorAccepted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldExecutor","type":"address"},{"indexed":true,"internalType":"address","name":"oldProposedExecutor","type":"address"},{"indexed":true,"internalType":"address","name":"newProposedExecutor","type":"address"}],"name":"NewExecutorProposed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldRescuer","type":"address"},{"indexed":true,"internalType":"address","name":"newRescuer","type":"address"}],"name":"NewRescuerAccepted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldRescuer","type":"address"},{"indexed":true,"internalType":"address","name":"oldProposedRescuer","type":"address"},{"indexed":true,"internalType":"address","name":"newProposedRescuer","type":"address"}],"name":"NewRescuerProposed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bool","name":"value","type":"bool"}],"name":"RescueModeSet","type":"event"},{"inputs":[],"name":"acceptExecutor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"acceptRescuer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"executor","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"contractAddr","type":"address"},{"internalType":"bytes4","name":"functionSelector","type":"bytes4"}],"name":"explicitFunctionAccess","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"inRescueMode","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"proposeNewExecutor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"proposeNewRescuer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rescuer","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"allowedCaller","type":"address"},{"components":[{"internalType":"bytes4","name":"fnSelector","type":"bytes4"},{"internalType":"bool","name":"allowed","type":"bool"}],"internalType":"struct ITempleElevatedAccess.ExplicitAccess[]","name":"access","type":"tuple[]"}],"name":"setExplicitAccess","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"value","type":"bool"}],"name":"setRescueMode","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"setExplicitAccess(address,(bytes4,bool)[])":{"details":"fnSelector == bytes4(keccak256(\"fn(argType1,argType2,...)\"))"}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"fnSelector\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"ExplicitAccessSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldExecutor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newExecutor\",\"type\":\"address\"}],\"name\":\"NewExecutorAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldExecutor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldProposedExecutor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newProposedExecutor\",\"type\":\"address\"}],\"name\":\"NewExecutorProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRescuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRescuer\",\"type\":\"address\"}],\"name\":\"NewRescuerAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRescuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldProposedRescuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newProposedRescuer\",\"type\":\"address\"}],\"name\":\"NewRescuerProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"RescueModeSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptRescuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"}],\"name\":\"explicitFunctionAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inRescueMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"proposeNewExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"proposeNewRescuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescuer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"allowedCaller\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"fnSelector\",\"type\":\"bytes4\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"internalType\":\"struct ITempleElevatedAccess.ExplicitAccess[]\",\"name\":\"access\",\"type\":\"tuple[]\"}],\"name\":\"setExplicitAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setRescueMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"setExplicitAccess(address,(bytes4,bool)[])\":{\"details\":\"fnSelector == bytes4(keccak256(\\\"fn(argType1,argType2,...)\\\"))\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptExecutor()\":{\"notice\":\"Caller accepts the role as new Executor. Can only be called by the proposed executor\"},\"acceptRescuer()\":{\"notice\":\"Caller accepts the role as new Rescuer. Can only be called by the proposed rescuer\"},\"executor()\":{\"notice\":\"A set of addresses which are approved to execute normal operations on behalf of the DAO.\"},\"explicitFunctionAccess(address,bytes4)\":{\"notice\":\"Explicit approval for an address to execute a function. allowedCaller => function selector => true/false\"},\"inRescueMode()\":{\"notice\":\"Under normal circumstances, rescuers don't have access to admin/operational functions. However when rescue mode is enabled (by rescuers or executors), they claim the access rights.\"},\"proposeNewExecutor(address)\":{\"notice\":\"Proposes a new Executor. Can only be called by the current executor or resucer (if in resuce mode)\"},\"proposeNewRescuer(address)\":{\"notice\":\"Proposes a new Rescuer. Can only be called by the current rescuer.\"},\"rescuer()\":{\"notice\":\"A set of addresses which are approved to execute emergency operations.\"},\"setExplicitAccess(address,(bytes4,bool)[])\":{\"notice\":\"Grant `allowedCaller` the rights to call the function selectors in the access list.\"},\"setRescueMode(bool)\":{\"notice\":\"Set the contract into or out of rescue mode. Only the rescuers or executors are allowed to set.\"}},\"notice\":\"Inherit to add Executor and Rescuer roles for DAO elevated access.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"18_27_ITempleElevatedAccess.sol\":\"ITempleElevatedAccess\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":false}},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"18_27_ITempleElevatedAccess.sol\":{\"keccak256\":\"0xe5a19949ec514acf13d40c2dcda3356e803d93ed0cb5d8b76825c99250a234f4\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://ed239ebf015364133360cbeebc6193d630b32bcead90c832765d4e39b3727ee8\",\"dweb:/ipfs/QmZLQaTrraMRg7aGSyrFVh2dTKaC9Ua5LY1ZF53zbpndtu\"]}},\"version\":1}","userdoc":{"kind":"user","methods":{"acceptExecutor()":{"notice":"Caller accepts the role as new Executor. Can only be called by the proposed executor"},"acceptRescuer()":{"notice":"Caller accepts the role as new Rescuer. Can only be called by the proposed rescuer"},"executor()":{"notice":"A set of addresses which are approved to execute normal operations on behalf of the DAO."},"explicitFunctionAccess(address,bytes4)":{"notice":"Explicit approval for an address to execute a function. allowedCaller => function selector => true/false"},"inRescueMode()":{"notice":"Under normal circumstances, rescuers don't have access to admin/operational functions. However when rescue mode is enabled (by rescuers or executors), they claim the access rights."},"proposeNewExecutor(address)":{"notice":"Proposes a new Executor. Can only be called by the current executor or resucer (if in resuce mode)"},"proposeNewRescuer(address)":{"notice":"Proposes a new Rescuer. Can only be called by the current rescuer."},"rescuer()":{"notice":"A set of addresses which are approved to execute emergency operations."},"setExplicitAccess(address,(bytes4,bool)[])":{"notice":"Grant `allowedCaller` the rights to call the function selectors in the access list."},"setRescueMode(bool)":{"notice":"Set the contract into or out of rescue mode. Only the rescuers or executors are allowed to set."}},"notice":"Inherit to add Executor and Rescuer roles for DAO elevated access.","version":1}}},"19_27_ITempleCircuitBreaker.sol":{"ITempleCircuitBreaker":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"bytes4","name":"fnSelector","type":"bytes4"},{"indexed":true,"internalType":"bool","name":"value","type":"bool"}],"name":"ExplicitAccessSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldExecutor","type":"address"},{"indexed":true,"internalType":"address","name":"newExecutor","type":"address"}],"name":"NewExecutorAccepted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldExecutor","type":"address"},{"indexed":true,"internalType":"address","name":"oldProposedExecutor","type":"address"},{"indexed":true,"internalType":"address","name":"newProposedExecutor","type":"address"}],"name":"NewExecutorProposed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldRescuer","type":"address"},{"indexed":true,"internalType":"address","name":"newRescuer","type":"address"}],"name":"NewRescuerAccepted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldRescuer","type":"address"},{"indexed":true,"internalType":"address","name":"oldProposedRescuer","type":"address"},{"indexed":true,"internalType":"address","name":"newProposedRescuer","type":"address"}],"name":"NewRescuerProposed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bool","name":"value","type":"bool"}],"name":"RescueModeSet","type":"event"},{"inputs":[],"name":"acceptExecutor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"acceptRescuer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"executor","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"contractAddr","type":"address"},{"internalType":"bytes4","name":"functionSelector","type":"bytes4"}],"name":"explicitFunctionAccess","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"inRescueMode","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"onBehalfOf","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"preCheck","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"proposeNewExecutor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"proposeNewRescuer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rescuer","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"allowedCaller","type":"address"},{"components":[{"internalType":"bytes4","name":"fnSelector","type":"bytes4"},{"internalType":"bool","name":"allowed","type":"bool"}],"internalType":"struct ITempleElevatedAccess.ExplicitAccess[]","name":"access","type":"tuple[]"}],"name":"setExplicitAccess","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"value","type":"bool"}],"name":"setRescueMode","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"setExplicitAccess(address,(bytes4,bool)[])":{"details":"fnSelector == bytes4(keccak256(\"fn(argType1,argType2,...)\"))"}},"title":"Temple Circuit Breaker ","version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"fnSelector\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"ExplicitAccessSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldExecutor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newExecutor\",\"type\":\"address\"}],\"name\":\"NewExecutorAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldExecutor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldProposedExecutor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newProposedExecutor\",\"type\":\"address\"}],\"name\":\"NewExecutorProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRescuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRescuer\",\"type\":\"address\"}],\"name\":\"NewRescuerAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRescuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldProposedRescuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newProposedRescuer\",\"type\":\"address\"}],\"name\":\"NewRescuerProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"RescueModeSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptRescuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"}],\"name\":\"explicitFunctionAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inRescueMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"preCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"proposeNewExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"proposeNewRescuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescuer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"allowedCaller\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"fnSelector\",\"type\":\"bytes4\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"internalType\":\"struct ITempleElevatedAccess.ExplicitAccess[]\",\"name\":\"access\",\"type\":\"tuple[]\"}],\"name\":\"setExplicitAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setRescueMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"setExplicitAccess(address,(bytes4,bool)[])\":{\"details\":\"fnSelector == bytes4(keccak256(\\\"fn(argType1,argType2,...)\\\"))\"}},\"title\":\"Temple Circuit Breaker \",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptExecutor()\":{\"notice\":\"Caller accepts the role as new Executor. Can only be called by the proposed executor\"},\"acceptRescuer()\":{\"notice\":\"Caller accepts the role as new Rescuer. Can only be called by the proposed rescuer\"},\"executor()\":{\"notice\":\"A set of addresses which are approved to execute normal operations on behalf of the DAO.\"},\"explicitFunctionAccess(address,bytes4)\":{\"notice\":\"Explicit approval for an address to execute a function. allowedCaller => function selector => true/false\"},\"inRescueMode()\":{\"notice\":\"Under normal circumstances, rescuers don't have access to admin/operational functions. However when rescue mode is enabled (by rescuers or executors), they claim the access rights.\"},\"preCheck(address,uint256)\":{\"notice\":\"Verify the new amount requested for the sender does not breach the cap in this rolling period.\"},\"proposeNewExecutor(address)\":{\"notice\":\"Proposes a new Executor. Can only be called by the current executor or resucer (if in resuce mode)\"},\"proposeNewRescuer(address)\":{\"notice\":\"Proposes a new Rescuer. Can only be called by the current rescuer.\"},\"rescuer()\":{\"notice\":\"A set of addresses which are approved to execute emergency operations.\"},\"setExplicitAccess(address,(bytes4,bool)[])\":{\"notice\":\"Grant `allowedCaller` the rights to call the function selectors in the access list.\"},\"setRescueMode(bool)\":{\"notice\":\"Set the contract into or out of rescue mode. Only the rescuers or executors are allowed to set.\"}},\"notice\":\"A circuit breaker can perform checks and record state for transactions which have already happened cumulative totals, totals within a rolling period window, sender specific totals, etc.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"19_27_ITempleCircuitBreaker.sol\":\"ITempleCircuitBreaker\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":false}},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"18_27_ITempleElevatedAccess.sol\":{\"keccak256\":\"0xe5a19949ec514acf13d40c2dcda3356e803d93ed0cb5d8b76825c99250a234f4\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://ed239ebf015364133360cbeebc6193d630b32bcead90c832765d4e39b3727ee8\",\"dweb:/ipfs/QmZLQaTrraMRg7aGSyrFVh2dTKaC9Ua5LY1ZF53zbpndtu\"]},\"19_27_ITempleCircuitBreaker.sol\":{\"keccak256\":\"0xbea5774ff5b68b1e768177139233d1d5b7d9a172017708d9fe021ebea8c96e5e\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://5c52fcb2a708e847d2eb3da29e8066a693c395c77effd7bd86d96dfe0df4bf7c\",\"dweb:/ipfs/QmZUUsdDHjP5yFwexL5JVvWD39NVdVXv9UvxLUoGCnWZeE\"]}},\"version\":1}","userdoc":{"kind":"user","methods":{"acceptExecutor()":{"notice":"Caller accepts the role as new Executor. Can only be called by the proposed executor"},"acceptRescuer()":{"notice":"Caller accepts the role as new Rescuer. Can only be called by the proposed rescuer"},"executor()":{"notice":"A set of addresses which are approved to execute normal operations on behalf of the DAO."},"explicitFunctionAccess(address,bytes4)":{"notice":"Explicit approval for an address to execute a function. allowedCaller => function selector => true/false"},"inRescueMode()":{"notice":"Under normal circumstances, rescuers don't have access to admin/operational functions. However when rescue mode is enabled (by rescuers or executors), they claim the access rights."},"preCheck(address,uint256)":{"notice":"Verify the new amount requested for the sender does not breach the cap in this rolling period."},"proposeNewExecutor(address)":{"notice":"Proposes a new Executor. Can only be called by the current executor or resucer (if in resuce mode)"},"proposeNewRescuer(address)":{"notice":"Proposes a new Rescuer. Can only be called by the current rescuer."},"rescuer()":{"notice":"A set of addresses which are approved to execute emergency operations."},"setExplicitAccess(address,(bytes4,bool)[])":{"notice":"Grant `allowedCaller` the rights to call the function selectors in the access list."},"setRescueMode(bool)":{"notice":"Set the contract into or out of rescue mode. Only the rescuers or executors are allowed to set."}},"notice":"A circuit breaker can perform checks and record state for transactions which have already happened cumulative totals, totals within a rolling period window, sender specific totals, etc.","version":1}}},"20_27_ITempleCircuitBreakerProxy.sol":{"ITempleCircuitBreakerProxy":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"identifier","type":"bytes32"},{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"address","name":"circuitBreaker","type":"address"}],"name":"CircuitBreakerSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"bytes4","name":"fnSelector","type":"bytes4"},{"indexed":true,"internalType":"bool","name":"value","type":"bool"}],"name":"ExplicitAccessSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"caller","type":"address"},{"indexed":false,"internalType":"string","name":"identifierString","type":"string"},{"indexed":false,"internalType":"bytes32","name":"identifier","type":"bytes32"}],"name":"IdentifierForCallerSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldExecutor","type":"address"},{"indexed":true,"internalType":"address","name":"newExecutor","type":"address"}],"name":"NewExecutorAccepted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldExecutor","type":"address"},{"indexed":true,"internalType":"address","name":"oldProposedExecutor","type":"address"},{"indexed":true,"internalType":"address","name":"newProposedExecutor","type":"address"}],"name":"NewExecutorProposed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldRescuer","type":"address"},{"indexed":true,"internalType":"address","name":"newRescuer","type":"address"}],"name":"NewRescuerAccepted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldRescuer","type":"address"},{"indexed":true,"internalType":"address","name":"oldProposedRescuer","type":"address"},{"indexed":true,"internalType":"address","name":"newProposedRescuer","type":"address"}],"name":"NewRescuerProposed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bool","name":"value","type":"bool"}],"name":"RescueModeSet","type":"event"},{"inputs":[],"name":"acceptExecutor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"acceptRescuer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"callerToIdentifier","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"identifier","type":"bytes32"},{"internalType":"address","name":"token","type":"address"}],"name":"circuitBreakers","outputs":[{"internalType":"contract ITempleCircuitBreaker","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"executor","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"contractAddr","type":"address"},{"internalType":"bytes4","name":"functionSelector","type":"bytes4"}],"name":"explicitFunctionAccess","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"identifiers","outputs":[{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"inRescueMode","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"onBehalfOf","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"preCheck","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"proposeNewExecutor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"proposeNewRescuer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rescuer","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"identifier","type":"bytes32"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"circuitBreaker","type":"address"}],"name":"setCircuitBreaker","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"allowedCaller","type":"address"},{"components":[{"internalType":"bytes4","name":"fnSelector","type":"bytes4"},{"internalType":"bool","name":"allowed","type":"bool"}],"internalType":"struct ITempleElevatedAccess.ExplicitAccess[]","name":"access","type":"tuple[]"}],"name":"setExplicitAccess","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"caller","type":"address"},{"internalType":"string","name":"identifierString","type":"string"}],"name":"setIdentifierForCaller","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"value","type":"bool"}],"name":"setRescueMode","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"setExplicitAccess(address,(bytes4,bool)[])":{"details":"fnSelector == bytes4(keccak256(\"fn(argType1,argType2,...)\"))"}},"title":"Temple Circuit Breaker Proxy ","version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"circuitBreaker\",\"type\":\"address\"}],\"name\":\"CircuitBreakerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"fnSelector\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"ExplicitAccessSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"identifierString\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"}],\"name\":\"IdentifierForCallerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldExecutor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newExecutor\",\"type\":\"address\"}],\"name\":\"NewExecutorAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldExecutor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldProposedExecutor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newProposedExecutor\",\"type\":\"address\"}],\"name\":\"NewExecutorProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRescuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRescuer\",\"type\":\"address\"}],\"name\":\"NewRescuerAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRescuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldProposedRescuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newProposedRescuer\",\"type\":\"address\"}],\"name\":\"NewRescuerProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"RescueModeSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptRescuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"callerToIdentifier\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"circuitBreakers\",\"outputs\":[{\"internalType\":\"contract ITempleCircuitBreaker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"}],\"name\":\"explicitFunctionAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identifiers\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inRescueMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"preCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"proposeNewExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"proposeNewRescuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescuer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"circuitBreaker\",\"type\":\"address\"}],\"name\":\"setCircuitBreaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"allowedCaller\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"fnSelector\",\"type\":\"bytes4\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"internalType\":\"struct ITempleElevatedAccess.ExplicitAccess[]\",\"name\":\"access\",\"type\":\"tuple[]\"}],\"name\":\"setExplicitAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"identifierString\",\"type\":\"string\"}],\"name\":\"setIdentifierForCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setRescueMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"setExplicitAccess(address,(bytes4,bool)[])\":{\"details\":\"fnSelector == bytes4(keccak256(\\\"fn(argType1,argType2,...)\\\"))\"}},\"title\":\"Temple Circuit Breaker Proxy \",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptExecutor()\":{\"notice\":\"Caller accepts the role as new Executor. Can only be called by the proposed executor\"},\"acceptRescuer()\":{\"notice\":\"Caller accepts the role as new Rescuer. Can only be called by the proposed rescuer\"},\"callerToIdentifier(address)\":{\"notice\":\"A calling contract of the circuit breaker (eg TLC) is mapped to an identifier which means circuit breaker caps can be shared across multiple callers.\"},\"circuitBreakers(bytes32,address)\":{\"notice\":\"The mapping of a (identifier, tokenAddress) tuple to the underlying circuit breaker contract\"},\"executor()\":{\"notice\":\"A set of addresses which are approved to execute normal operations on behalf of the DAO.\"},\"explicitFunctionAccess(address,bytes4)\":{\"notice\":\"Explicit approval for an address to execute a function. allowedCaller => function selector => true/false\"},\"identifiers()\":{\"notice\":\"The set of all identifiers registered\"},\"inRescueMode()\":{\"notice\":\"Under normal circumstances, rescuers don't have access to admin/operational functions. However when rescue mode is enabled (by rescuers or executors), they claim the access rights.\"},\"preCheck(address,address,uint256)\":{\"notice\":\"For a given identifier & token, verify the new amount requested for the sender does not breach the cap in this rolling period.\"},\"proposeNewExecutor(address)\":{\"notice\":\"Proposes a new Executor. Can only be called by the current executor or resucer (if in resuce mode)\"},\"proposeNewRescuer(address)\":{\"notice\":\"Proposes a new Rescuer. Can only be called by the current rescuer.\"},\"rescuer()\":{\"notice\":\"A set of addresses which are approved to execute emergency operations.\"},\"setCircuitBreaker(bytes32,address,address)\":{\"notice\":\"Set the address of the circuit breaker for a particular identifier and token\"},\"setExplicitAccess(address,(bytes4,bool)[])\":{\"notice\":\"Grant `allowedCaller` the rights to call the function selectors in the access list.\"},\"setIdentifierForCaller(address,string)\":{\"notice\":\"Set the identifier for a given caller of the circuit breaker. These identifiers can be shared, such that multiple contracts share the same cap limits for a given token.\"},\"setRescueMode(bool)\":{\"notice\":\"Set the contract into or out of rescue mode. Only the rescuers or executors are allowed to set.\"}},\"notice\":\"Direct circuit breaker requests to the correct underlying implementation, based on a pre-defined bytes32 identifier, and a token.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"20_27_ITempleCircuitBreakerProxy.sol\":\"ITempleCircuitBreakerProxy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":false}},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"18_27_ITempleElevatedAccess.sol\":{\"keccak256\":\"0xe5a19949ec514acf13d40c2dcda3356e803d93ed0cb5d8b76825c99250a234f4\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://ed239ebf015364133360cbeebc6193d630b32bcead90c832765d4e39b3727ee8\",\"dweb:/ipfs/QmZLQaTrraMRg7aGSyrFVh2dTKaC9Ua5LY1ZF53zbpndtu\"]},\"19_27_ITempleCircuitBreaker.sol\":{\"keccak256\":\"0xbea5774ff5b68b1e768177139233d1d5b7d9a172017708d9fe021ebea8c96e5e\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://5c52fcb2a708e847d2eb3da29e8066a693c395c77effd7bd86d96dfe0df4bf7c\",\"dweb:/ipfs/QmZUUsdDHjP5yFwexL5JVvWD39NVdVXv9UvxLUoGCnWZeE\"]},\"20_27_ITempleCircuitBreakerProxy.sol\":{\"keccak256\":\"0x5e8c6c070569b3e92d7ce0d27d07120b2ffb156fdee2a5411f98b3c8e025f243\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://1bd025d8f6146d6cd7e9e3f780b21dcb7d51d400563595d2589d35b237b70565\",\"dweb:/ipfs/Qmai6aZEswQT3KcLnmzDdeavi1HQDGwGksupDebPtxzs2r\"]}},\"version\":1}","userdoc":{"kind":"user","methods":{"acceptExecutor()":{"notice":"Caller accepts the role as new Executor. Can only be called by the proposed executor"},"acceptRescuer()":{"notice":"Caller accepts the role as new Rescuer. Can only be called by the proposed rescuer"},"callerToIdentifier(address)":{"notice":"A calling contract of the circuit breaker (eg TLC) is mapped to an identifier which means circuit breaker caps can be shared across multiple callers."},"circuitBreakers(bytes32,address)":{"notice":"The mapping of a (identifier, tokenAddress) tuple to the underlying circuit breaker contract"},"executor()":{"notice":"A set of addresses which are approved to execute normal operations on behalf of the DAO."},"explicitFunctionAccess(address,bytes4)":{"notice":"Explicit approval for an address to execute a function. allowedCaller => function selector => true/false"},"identifiers()":{"notice":"The set of all identifiers registered"},"inRescueMode()":{"notice":"Under normal circumstances, rescuers don't have access to admin/operational functions. However when rescue mode is enabled (by rescuers or executors), they claim the access rights."},"preCheck(address,address,uint256)":{"notice":"For a given identifier & token, verify the new amount requested for the sender does not breach the cap in this rolling period."},"proposeNewExecutor(address)":{"notice":"Proposes a new Executor. Can only be called by the current executor or resucer (if in resuce mode)"},"proposeNewRescuer(address)":{"notice":"Proposes a new Rescuer. Can only be called by the current rescuer."},"rescuer()":{"notice":"A set of addresses which are approved to execute emergency operations."},"setCircuitBreaker(bytes32,address,address)":{"notice":"Set the address of the circuit breaker for a particular identifier and token"},"setExplicitAccess(address,(bytes4,bool)[])":{"notice":"Grant `allowedCaller` the rights to call the function selectors in the access list."},"setIdentifierForCaller(address,string)":{"notice":"Set the identifier for a given caller of the circuit breaker. These identifiers can be shared, such that multiple contracts share the same cap limits for a given token."},"setRescueMode(bool)":{"notice":"Set the contract into or out of rescue mode. Only the rescuers or executors are allowed to set."}},"notice":"Direct circuit breaker requests to the correct underlying implementation, based on a pre-defined bytes32 identifier, and a token.","version":1}}},"21_27_ITempleDebtToken.sol":{"ITempleDebtToken":{"abi":[{"inputs":[{"internalType":"address","name":"caller","type":"address"}],"name":"CannotMintOrBurn","type":"error"},{"inputs":[],"name":"NonTransferrable","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"}],"name":"AddedMinter","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint96","name":"rate","type":"uint96"}],"name":"BaseInterestRateSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"debtor","type":"address"},{"indexed":false,"internalType":"uint128","name":"principal","type":"uint128"},{"indexed":false,"internalType":"uint128","name":"baseInterest","type":"uint128"},{"indexed":false,"internalType":"uint128","name":"riskPremiumInterest","type":"uint128"}],"name":"DebtorBalance","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"bytes4","name":"fnSelector","type":"bytes4"},{"indexed":true,"internalType":"bool","name":"value","type":"bool"}],"name":"ExplicitAccessSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldExecutor","type":"address"},{"indexed":true,"internalType":"address","name":"newExecutor","type":"address"}],"name":"NewExecutorAccepted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldExecutor","type":"address"},{"indexed":true,"internalType":"address","name":"oldProposedExecutor","type":"address"},{"indexed":true,"internalType":"address","name":"newProposedExecutor","type":"address"}],"name":"NewExecutorProposed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldRescuer","type":"address"},{"indexed":true,"internalType":"address","name":"newRescuer","type":"address"}],"name":"NewRescuerAccepted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldRescuer","type":"address"},{"indexed":true,"internalType":"address","name":"oldProposedRescuer","type":"address"},{"indexed":true,"internalType":"address","name":"newProposedRescuer","type":"address"}],"name":"NewRescuerProposed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"}],"name":"RemovedMinter","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bool","name":"value","type":"bool"}],"name":"RescueModeSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"debtor","type":"address"},{"indexed":false,"internalType":"uint96","name":"rate","type":"uint96"}],"name":"RiskPremiumInterestRateSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"acceptExecutor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"acceptRescuer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"addMinter","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"baseCheckpoint","outputs":[{"internalType":"uint128","name":"","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"baseCheckpointTime","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint128","name":"debt","type":"uint128"}],"name":"baseDebtToShares","outputs":[{"internalType":"uint128","name":"","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"baseRate","outputs":[{"internalType":"uint96","name":"","type":"uint96"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"baseShares","outputs":[{"internalType":"uint128","name":"","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint128","name":"shares","type":"uint128"}],"name":"baseSharesToDebt","outputs":[{"internalType":"uint128","name":"","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_debtor","type":"address"},{"internalType":"uint256","name":"_burnAmount","type":"uint256"}],"name":"burn","outputs":[{"internalType":"uint256","name":"burnedAmount","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_debtor","type":"address"}],"name":"burnAll","outputs":[{"internalType":"uint256","name":"burnedAmount","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"checkpointBaseInterest","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"debtor","type":"address"}],"name":"checkpointDebtorInterest","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"_debtors","type":"address[]"}],"name":"checkpointDebtorsInterest","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_debtor","type":"address"}],"name":"currentDebtOf","outputs":[{"components":[{"internalType":"uint256","name":"principal","type":"uint256"},{"internalType":"uint256","name":"baseInterest","type":"uint256"},{"internalType":"uint256","name":"riskPremiumInterest","type":"uint256"}],"internalType":"struct ITempleDebtToken.DebtOwed","name":"debtOwed","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"_debtors","type":"address[]"}],"name":"currentDebtsOf","outputs":[{"components":[{"internalType":"uint256","name":"principal","type":"uint256"},{"internalType":"uint256","name":"baseInterest","type":"uint256"},{"internalType":"uint256","name":"riskPremiumInterest","type":"uint256"}],"internalType":"struct ITempleDebtToken.DebtOwed[]","name":"debtsOwed","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"currentTotalDebt","outputs":[{"components":[{"internalType":"uint256","name":"principal","type":"uint256"},{"internalType":"uint256","name":"baseInterest","type":"uint256"},{"internalType":"uint256","name":"riskPremiumInterest","type":"uint256"}],"internalType":"struct ITempleDebtToken.DebtOwed","name":"debtOwed","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"debtors","outputs":[{"internalType":"uint128","name":"principal","type":"uint128"},{"internalType":"uint128","name":"baseShares","type":"uint128"},{"internalType":"uint96","name":"rate","type":"uint96"},{"internalType":"uint128","name":"checkpoint","type":"uint128"},{"internalType":"uint32","name":"checkpointTime","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"estimatedTotalRiskPremiumInterest","outputs":[{"internalType":"uint128","name":"","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"executor","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"contractAddr","type":"address"},{"internalType":"bytes4","name":"functionSelector","type":"bytes4"}],"name":"explicitFunctionAccess","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"inRescueMode","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_debtor","type":"address"},{"internalType":"uint256","name":"_mintAmount","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"minters","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"proposeNewExecutor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"proposeNewRescuer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"removeMinter","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rescuer","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint96","name":"_rate","type":"uint96"}],"name":"setBaseInterestRate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"allowedCaller","type":"address"},{"components":[{"internalType":"bytes4","name":"fnSelector","type":"bytes4"},{"internalType":"bool","name":"allowed","type":"bool"}],"internalType":"struct ITempleElevatedAccess.ExplicitAccess[]","name":"access","type":"tuple[]"}],"name":"setExplicitAccess","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"value","type":"bool"}],"name":"setRescueMode","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_debtor","type":"address"},{"internalType":"uint96","name":"_rate","type":"uint96"}],"name":"setRiskPremiumInterestRate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalPrincipal","outputs":[{"internalType":"uint128","name":"","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"baseRate()":{"details":"1e18 format, where 0.01e18 = 1%"},"burn(address,uint256)":{"details":"Interest is repaid in preference:   1/ Firstly to the higher interest rate of (baseRate, debtor risk premium rate)   2/ Any remaining of the repayment is then paid of the other interest amount.   3/ Finally if there is still some repayment amount unallocated,       then the principal will be paid down. This is like a new debt is issued for the lower balance,      where interest accrual starts fresh. More debt than the user has cannot be burned - it is capped. The actual amount burned is returned","params":{"_burnAmount":"The notional amount of debt tokens to repay.","_debtor":"The address of the debtor"}},"burnAll(address)":{"params":{"_debtor":"The address of the debtor"}},"checkpointDebtorsInterest(address[])":{"details":"Provided in case there needs to be block synchronisation on the total debt."},"currentTotalDebt()":{"details":"Note the (total principal + total base interest) portion is up to date. However the (debtor specific risk premium interest) portion is likely stale. The `estimatedTotalDebtorInterest` is only updated when each debtor checkpoints, so it's going to be out of date. For more up to date current totals, off-chain aggregation of balanceOf() will be required - eg via subgraph."},"decimals()":{"details":"Returns the decimals places of the token."},"estimatedTotalRiskPremiumInterest()":{"details":"Indicative only. This total is only updated on a per strategy basis when that strategy gets  checkpointed (on borrow/repay rate change). So it is generally always going to be out of date as each strategy will accrue interest independently  on different rates."},"mint(address,uint256)":{"params":{"_debtor":"The address of the debtor who is issued new debt","_mintAmount":"The notional amount of debt tokens to issue."}},"name()":{"details":"Returns the name of the token."},"setExplicitAccess(address,(bytes4,bool)[])":{"details":"fnSelector == bytes4(keccak256(\"fn(argType1,argType2,...)\"))"},"symbol()":{"details":"Returns the symbol of the token."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"CannotMintOrBurn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonTransferrable\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddedMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"rate\",\"type\":\"uint96\"}],\"name\":\"BaseInterestRateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"principal\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"baseInterest\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"riskPremiumInterest\",\"type\":\"uint128\"}],\"name\":\"DebtorBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"fnSelector\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"ExplicitAccessSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldExecutor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newExecutor\",\"type\":\"address\"}],\"name\":\"NewExecutorAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldExecutor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldProposedExecutor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newProposedExecutor\",\"type\":\"address\"}],\"name\":\"NewExecutorProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRescuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRescuer\",\"type\":\"address\"}],\"name\":\"NewRescuerAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRescuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldProposedRescuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newProposedRescuer\",\"type\":\"address\"}],\"name\":\"NewRescuerProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemovedMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"RescueModeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"rate\",\"type\":\"uint96\"}],\"name\":\"RiskPremiumInterestRateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptRescuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseCheckpoint\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseCheckpointTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"debt\",\"type\":\"uint128\"}],\"name\":\"baseDebtToShares\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseRate\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseShares\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"shares\",\"type\":\"uint128\"}],\"name\":\"baseSharesToDebt\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_debtor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_burnAmount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"burnedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_debtor\",\"type\":\"address\"}],\"name\":\"burnAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"burnedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointBaseInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"}],\"name\":\"checkpointDebtorInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_debtors\",\"type\":\"address[]\"}],\"name\":\"checkpointDebtorsInterest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_debtor\",\"type\":\"address\"}],\"name\":\"currentDebtOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"riskPremiumInterest\",\"type\":\"uint256\"}],\"internalType\":\"struct ITempleDebtToken.DebtOwed\",\"name\":\"debtOwed\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_debtors\",\"type\":\"address[]\"}],\"name\":\"currentDebtsOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"riskPremiumInterest\",\"type\":\"uint256\"}],\"internalType\":\"struct ITempleDebtToken.DebtOwed[]\",\"name\":\"debtsOwed\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTotalDebt\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"riskPremiumInterest\",\"type\":\"uint256\"}],\"internalType\":\"struct ITempleDebtToken.DebtOwed\",\"name\":\"debtOwed\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"debtors\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"principal\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"baseShares\",\"type\":\"uint128\"},{\"internalType\":\"uint96\",\"name\":\"rate\",\"type\":\"uint96\"},{\"internalType\":\"uint128\",\"name\":\"checkpoint\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"checkpointTime\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimatedTotalRiskPremiumInterest\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"}],\"name\":\"explicitFunctionAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inRescueMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_debtor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"proposeNewExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"proposeNewRescuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescuer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_rate\",\"type\":\"uint96\"}],\"name\":\"setBaseInterestRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"allowedCaller\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"fnSelector\",\"type\":\"bytes4\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"internalType\":\"struct ITempleElevatedAccess.ExplicitAccess[]\",\"name\":\"access\",\"type\":\"tuple[]\"}],\"name\":\"setExplicitAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setRescueMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_debtor\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_rate\",\"type\":\"uint96\"}],\"name\":\"setRiskPremiumInterestRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPrincipal\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"baseRate()\":{\"details\":\"1e18 format, where 0.01e18 = 1%\"},\"burn(address,uint256)\":{\"details\":\"Interest is repaid in preference:   1/ Firstly to the higher interest rate of (baseRate, debtor risk premium rate)   2/ Any remaining of the repayment is then paid of the other interest amount.   3/ Finally if there is still some repayment amount unallocated,       then the principal will be paid down. This is like a new debt is issued for the lower balance,      where interest accrual starts fresh. More debt than the user has cannot be burned - it is capped. The actual amount burned is returned\",\"params\":{\"_burnAmount\":\"The notional amount of debt tokens to repay.\",\"_debtor\":\"The address of the debtor\"}},\"burnAll(address)\":{\"params\":{\"_debtor\":\"The address of the debtor\"}},\"checkpointDebtorsInterest(address[])\":{\"details\":\"Provided in case there needs to be block synchronisation on the total debt.\"},\"currentTotalDebt()\":{\"details\":\"Note the (total principal + total base interest) portion is up to date. However the (debtor specific risk premium interest) portion is likely stale. The `estimatedTotalDebtorInterest` is only updated when each debtor checkpoints, so it's going to be out of date. For more up to date current totals, off-chain aggregation of balanceOf() will be required - eg via subgraph.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"estimatedTotalRiskPremiumInterest()\":{\"details\":\"Indicative only. This total is only updated on a per strategy basis when that strategy gets  checkpointed (on borrow/repay rate change). So it is generally always going to be out of date as each strategy will accrue interest independently  on different rates.\"},\"mint(address,uint256)\":{\"params\":{\"_debtor\":\"The address of the debtor who is issued new debt\",\"_mintAmount\":\"The notional amount of debt tokens to issue.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"setExplicitAccess(address,(bytes4,bool)[])\":{\"details\":\"fnSelector == bytes4(keccak256(\\\"fn(argType1,argType2,...)\\\"))\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptExecutor()\":{\"notice\":\"Caller accepts the role as new Executor. Can only be called by the proposed executor\"},\"acceptRescuer()\":{\"notice\":\"Caller accepts the role as new Rescuer. Can only be called by the proposed rescuer\"},\"addMinter(address)\":{\"notice\":\"Governance can add an address which is able to mint or burn debt positions on behalf of users.\"},\"baseCheckpoint()\":{\"notice\":\"The (base rate) total principal and interest owed across all debtors as of the latest checkpoint\"},\"baseCheckpointTime()\":{\"notice\":\"The last checkpoint time of the (base rate) principal and interest checkpoint\"},\"baseDebtToShares(uint128)\":{\"notice\":\"Convert a (base interest) debt amount into proportional amount of shares\"},\"baseRate()\":{\"notice\":\"The current (base rate) interest common for all users. This can be updated by governance\"},\"baseShares()\":{\"notice\":\"The (base rate) total number of shares allocated out to users for internal book keeping\"},\"baseSharesToDebt(uint128)\":{\"notice\":\"Convert a number of (base interest) shares into proportional amount of debt\"},\"burn(address,uint256)\":{\"notice\":\"Approved Minters can burn debt on behalf of a user.\"},\"burnAll(address)\":{\"notice\":\"Approved Minters can burn the entire debt on behalf of a user.\"},\"checkpointBaseInterest()\":{\"notice\":\"Checkpoint the base interest owed by all debtors up to this block.\"},\"checkpointDebtorInterest(address)\":{\"notice\":\"Checkpoint a debtor's (risk premium) interest (no principal) owed up to this block.\"},\"checkpointDebtorsInterest(address[])\":{\"notice\":\"Checkpoint multiple accounts (risk premium) interest (no principal) owed up to this block.\"},\"currentDebtOf(address)\":{\"notice\":\"The current debt for a given user split out by principal, base interest, risk premium (per debtor) interest\"},\"currentDebtsOf(address[])\":{\"notice\":\"The current debt for a given set of users split out by principal, base interest, risk premium (per debtor) interest\"},\"currentTotalDebt()\":{\"notice\":\"The current total principal + total base interest, total (estimate) debtor specific risk premium interest owed by all debtors.\"},\"debtors(address)\":{\"notice\":\"Per address status of debt\"},\"estimatedTotalRiskPremiumInterest()\":{\"notice\":\"The latest estimate of the (risk premium) interest (no principal) owed.\"},\"executor()\":{\"notice\":\"A set of addresses which are approved to execute normal operations on behalf of the DAO.\"},\"explicitFunctionAccess(address,bytes4)\":{\"notice\":\"Explicit approval for an address to execute a function. allowedCaller => function selector => true/false\"},\"inRescueMode()\":{\"notice\":\"Under normal circumstances, rescuers don't have access to admin/operational functions. However when rescue mode is enabled (by rescuers or executors), they claim the access rights.\"},\"mint(address,uint256)\":{\"notice\":\"Approved Minters can add a new debt position on behalf of a user.\"},\"minters(address)\":{\"notice\":\"A set of addresses which are approved to mint/burn\"},\"proposeNewExecutor(address)\":{\"notice\":\"Proposes a new Executor. Can only be called by the current executor or resucer (if in resuce mode)\"},\"proposeNewRescuer(address)\":{\"notice\":\"Proposes a new Rescuer. Can only be called by the current rescuer.\"},\"removeMinter(address)\":{\"notice\":\"Governance can remove an address which is able to mint or burn debt positions on behalf of users.\"},\"rescuer()\":{\"notice\":\"A set of addresses which are approved to execute emergency operations.\"},\"setBaseInterestRate(uint96)\":{\"notice\":\"Governance can update the continuously compounding (base) interest rate of all debtors, from this block onwards.\"},\"setExplicitAccess(address,(bytes4,bool)[])\":{\"notice\":\"Grant `allowedCaller` the rights to call the function selectors in the access list.\"},\"setRescueMode(bool)\":{\"notice\":\"Set the contract into or out of rescue mode. Only the rescuers or executors are allowed to set.\"},\"setRiskPremiumInterestRate(address,uint96)\":{\"notice\":\"Governance can update the continuously compounding (risk premium) interest rate for a given debtor, from this block onwards\"},\"totalPrincipal()\":{\"notice\":\"The net amount of principal amount of debt minted across all users.\"},\"version()\":{\"notice\":\"Track the deployed version of this contract. \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"21_27_ITempleDebtToken.sol\":\"ITempleDebtToken\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":false}},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"02_27_IERC20Metadata.sol\":{\"keccak256\":\"0xa25ab9a66cae9ca6a3a4665ca798366110e116b34ecee4b840f95a40b0243f49\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a701f9d7ca720f9fb194eb95d08a364605acf68b8e69d50ef63e11ea6b508460\",\"dweb:/ipfs/QmWYXJSGnmX48yqkMiJHxwQLBn4hdMDVbga9QvCmUWgnRi\"]},\"04_27_IERC20.sol\":{\"keccak256\":\"0x3cedce2cd7eacaae0bc44842b12b842e38aaa2add3f660bfca6c3dfa88542fe2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5b5f40ecf34ab169edc109702d94db1c4f1e71c467cfeb077879694d681e1ba8\",\"dweb:/ipfs/QmWF8AMSAbaxbqp2ViuXQnzyPbuiPPNriaBZ5Lh7o1LmCH\"]},\"18_27_ITempleElevatedAccess.sol\":{\"keccak256\":\"0xe5a19949ec514acf13d40c2dcda3356e803d93ed0cb5d8b76825c99250a234f4\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://ed239ebf015364133360cbeebc6193d630b32bcead90c832765d4e39b3727ee8\",\"dweb:/ipfs/QmZLQaTrraMRg7aGSyrFVh2dTKaC9Ua5LY1ZF53zbpndtu\"]},\"21_27_ITempleDebtToken.sol\":{\"keccak256\":\"0x9b9bef93b388da13ea8a3903a6b172ee0d7785559f9e8b39c153c238f4081281\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://7953a23b36d8f7fb50d05145b26bea9d411b5ec2b0849f95e1a82e1d4922940e\",\"dweb:/ipfs/QmXSt4awrTaDcs3r7Y2q7NBRi3vY3sbvESnPBc4PZb7sNL\"]}},\"version\":1}","userdoc":{"kind":"user","methods":{"acceptExecutor()":{"notice":"Caller accepts the role as new Executor. Can only be called by the proposed executor"},"acceptRescuer()":{"notice":"Caller accepts the role as new Rescuer. Can only be called by the proposed rescuer"},"addMinter(address)":{"notice":"Governance can add an address which is able to mint or burn debt positions on behalf of users."},"baseCheckpoint()":{"notice":"The (base rate) total principal and interest owed across all debtors as of the latest checkpoint"},"baseCheckpointTime()":{"notice":"The last checkpoint time of the (base rate) principal and interest checkpoint"},"baseDebtToShares(uint128)":{"notice":"Convert a (base interest) debt amount into proportional amount of shares"},"baseRate()":{"notice":"The current (base rate) interest common for all users. This can be updated by governance"},"baseShares()":{"notice":"The (base rate) total number of shares allocated out to users for internal book keeping"},"baseSharesToDebt(uint128)":{"notice":"Convert a number of (base interest) shares into proportional amount of debt"},"burn(address,uint256)":{"notice":"Approved Minters can burn debt on behalf of a user."},"burnAll(address)":{"notice":"Approved Minters can burn the entire debt on behalf of a user."},"checkpointBaseInterest()":{"notice":"Checkpoint the base interest owed by all debtors up to this block."},"checkpointDebtorInterest(address)":{"notice":"Checkpoint a debtor's (risk premium) interest (no principal) owed up to this block."},"checkpointDebtorsInterest(address[])":{"notice":"Checkpoint multiple accounts (risk premium) interest (no principal) owed up to this block."},"currentDebtOf(address)":{"notice":"The current debt for a given user split out by principal, base interest, risk premium (per debtor) interest"},"currentDebtsOf(address[])":{"notice":"The current debt for a given set of users split out by principal, base interest, risk premium (per debtor) interest"},"currentTotalDebt()":{"notice":"The current total principal + total base interest, total (estimate) debtor specific risk premium interest owed by all debtors."},"debtors(address)":{"notice":"Per address status of debt"},"estimatedTotalRiskPremiumInterest()":{"notice":"The latest estimate of the (risk premium) interest (no principal) owed."},"executor()":{"notice":"A set of addresses which are approved to execute normal operations on behalf of the DAO."},"explicitFunctionAccess(address,bytes4)":{"notice":"Explicit approval for an address to execute a function. allowedCaller => function selector => true/false"},"inRescueMode()":{"notice":"Under normal circumstances, rescuers don't have access to admin/operational functions. However when rescue mode is enabled (by rescuers or executors), they claim the access rights."},"mint(address,uint256)":{"notice":"Approved Minters can add a new debt position on behalf of a user."},"minters(address)":{"notice":"A set of addresses which are approved to mint/burn"},"proposeNewExecutor(address)":{"notice":"Proposes a new Executor. Can only be called by the current executor or resucer (if in resuce mode)"},"proposeNewRescuer(address)":{"notice":"Proposes a new Rescuer. Can only be called by the current rescuer."},"removeMinter(address)":{"notice":"Governance can remove an address which is able to mint or burn debt positions on behalf of users."},"rescuer()":{"notice":"A set of addresses which are approved to execute emergency operations."},"setBaseInterestRate(uint96)":{"notice":"Governance can update the continuously compounding (base) interest rate of all debtors, from this block onwards."},"setExplicitAccess(address,(bytes4,bool)[])":{"notice":"Grant `allowedCaller` the rights to call the function selectors in the access list."},"setRescueMode(bool)":{"notice":"Set the contract into or out of rescue mode. Only the rescuers or executors are allowed to set."},"setRiskPremiumInterestRate(address,uint96)":{"notice":"Governance can update the continuously compounding (risk premium) interest rate for a given debtor, from this block onwards"},"totalPrincipal()":{"notice":"The net amount of principal amount of debt minted across all users."},"version()":{"notice":"Track the deployed version of this contract. "}},"version":1}}},"22_27_ITreasuryPriceIndexOracle.sol":{"ITreasuryPriceIndexOracle":{"abi":[{"inputs":[{"internalType":"uint96","name":"oldTpi","type":"uint96"},{"internalType":"uint96","name":"newTpi","type":"uint96"},{"internalType":"uint256","name":"maxDelta","type":"uint256"}],"name":"BreachedMaxTpiDelta","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"bytes4","name":"fnSelector","type":"bytes4"},{"indexed":true,"internalType":"bool","name":"value","type":"bool"}],"name":"ExplicitAccessSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"maxDelta","type":"uint256"}],"name":"MaxTreasuryPriceIndexDeltaSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldExecutor","type":"address"},{"indexed":true,"internalType":"address","name":"newExecutor","type":"address"}],"name":"NewExecutorAccepted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldExecutor","type":"address"},{"indexed":true,"internalType":"address","name":"oldProposedExecutor","type":"address"},{"indexed":true,"internalType":"address","name":"newProposedExecutor","type":"address"}],"name":"NewExecutorProposed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldRescuer","type":"address"},{"indexed":true,"internalType":"address","name":"newRescuer","type":"address"}],"name":"NewRescuerAccepted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldRescuer","type":"address"},{"indexed":true,"internalType":"address","name":"oldProposedRescuer","type":"address"},{"indexed":true,"internalType":"address","name":"newProposedRescuer","type":"address"}],"name":"NewRescuerProposed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bool","name":"value","type":"bool"}],"name":"RescueModeSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint32","name":"cooldownSecs","type":"uint32"}],"name":"TpiCooldownSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint96","name":"oldTpi","type":"uint96"},{"indexed":false,"internalType":"uint96","name":"newTpi","type":"uint96"}],"name":"TreasuryPriceIndexSet","type":"event"},{"inputs":[],"name":"TPI_DECIMALS","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"acceptExecutor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"acceptRescuer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"executor","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"contractAddr","type":"address"},{"internalType":"bytes4","name":"functionSelector","type":"bytes4"}],"name":"explicitFunctionAccess","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"inRescueMode","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"maxTreasuryPriceIndexDelta","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"proposeNewExecutor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"proposeNewRescuer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rescuer","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"allowedCaller","type":"address"},{"components":[{"internalType":"bytes4","name":"fnSelector","type":"bytes4"},{"internalType":"bool","name":"allowed","type":"bool"}],"internalType":"struct ITempleElevatedAccess.ExplicitAccess[]","name":"access","type":"tuple[]"}],"name":"setExplicitAccess","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"maxDelta","type":"uint256"}],"name":"setMaxTreasuryPriceIndexDelta","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"value","type":"bool"}],"name":"setRescueMode","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"cooldownSecs","type":"uint32"}],"name":"setTpiCooldown","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint96","name":"value","type":"uint96"}],"name":"setTreasuryPriceIndex","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"tpiData","outputs":[{"internalType":"uint96","name":"currentTpi","type":"uint96"},{"internalType":"uint96","name":"previousTpi","type":"uint96"},{"internalType":"uint32","name":"lastUpdatedAt","type":"uint32"},{"internalType":"uint32","name":"cooldownSecs","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"treasuryPriceIndex","outputs":[{"internalType":"uint96","name":"","type":"uint96"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"TPI_DECIMALS()":{"details":"18 decimals, so 1.02e18 == $1.02"},"maxTreasuryPriceIndexDelta()":{"details":"Used as a bound to avoid unintended/fat fingering when updating TPI"},"setExplicitAccess(address,(bytes4,bool)[])":{"details":"fnSelector == bytes4(keccak256(\"fn(argType1,argType2,...)\"))"},"setMaxTreasuryPriceIndexDelta(uint256)":{"details":"18 decimal places, 0.20e18 == $0.20"},"treasuryPriceIndex()":{"details":"If the TPI has just been updated, the old TPI will be used until `cooldownSecs` has elapsed"}},"title":"Treasury Price Index Oracle","version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"oldTpi\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"newTpi\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"maxDelta\",\"type\":\"uint256\"}],\"name\":\"BreachedMaxTpiDelta\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"fnSelector\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"ExplicitAccessSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxDelta\",\"type\":\"uint256\"}],\"name\":\"MaxTreasuryPriceIndexDeltaSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldExecutor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newExecutor\",\"type\":\"address\"}],\"name\":\"NewExecutorAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldExecutor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldProposedExecutor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newProposedExecutor\",\"type\":\"address\"}],\"name\":\"NewExecutorProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRescuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRescuer\",\"type\":\"address\"}],\"name\":\"NewRescuerAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRescuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldProposedRescuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newProposedRescuer\",\"type\":\"address\"}],\"name\":\"NewRescuerProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"RescueModeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"cooldownSecs\",\"type\":\"uint32\"}],\"name\":\"TpiCooldownSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"oldTpi\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"newTpi\",\"type\":\"uint96\"}],\"name\":\"TreasuryPriceIndexSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TPI_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptRescuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"}],\"name\":\"explicitFunctionAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inRescueMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTreasuryPriceIndexDelta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"proposeNewExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"proposeNewRescuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescuer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"allowedCaller\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"fnSelector\",\"type\":\"bytes4\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"internalType\":\"struct ITempleElevatedAccess.ExplicitAccess[]\",\"name\":\"access\",\"type\":\"tuple[]\"}],\"name\":\"setExplicitAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxDelta\",\"type\":\"uint256\"}],\"name\":\"setMaxTreasuryPriceIndexDelta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setRescueMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"cooldownSecs\",\"type\":\"uint32\"}],\"name\":\"setTpiCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"name\":\"setTreasuryPriceIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tpiData\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"currentTpi\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"previousTpi\",\"type\":\"uint96\"},{\"internalType\":\"uint32\",\"name\":\"lastUpdatedAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"cooldownSecs\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryPriceIndex\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"TPI_DECIMALS()\":{\"details\":\"18 decimals, so 1.02e18 == $1.02\"},\"maxTreasuryPriceIndexDelta()\":{\"details\":\"Used as a bound to avoid unintended/fat fingering when updating TPI\"},\"setExplicitAccess(address,(bytes4,bool)[])\":{\"details\":\"fnSelector == bytes4(keccak256(\\\"fn(argType1,argType2,...)\\\"))\"},\"setMaxTreasuryPriceIndexDelta(uint256)\":{\"details\":\"18 decimal places, 0.20e18 == $0.20\"},\"treasuryPriceIndex()\":{\"details\":\"If the TPI has just been updated, the old TPI will be used until `cooldownSecs` has elapsed\"}},\"title\":\"Treasury Price Index Oracle\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"TPI_DECIMALS()\":{\"notice\":\"The decimal precision of Temple Price Index (TPI)\"},\"acceptExecutor()\":{\"notice\":\"Caller accepts the role as new Executor. Can only be called by the proposed executor\"},\"acceptRescuer()\":{\"notice\":\"Caller accepts the role as new Rescuer. Can only be called by the proposed rescuer\"},\"executor()\":{\"notice\":\"A set of addresses which are approved to execute normal operations on behalf of the DAO.\"},\"explicitFunctionAccess(address,bytes4)\":{\"notice\":\"Explicit approval for an address to execute a function. allowedCaller => function selector => true/false\"},\"inRescueMode()\":{\"notice\":\"Under normal circumstances, rescuers don't have access to admin/operational functions. However when rescue mode is enabled (by rescuers or executors), they claim the access rights.\"},\"maxTreasuryPriceIndexDelta()\":{\"notice\":\"The maximum allowed TPI change on any single `setTreasuryPriceIndex()`, in absolute terms.\"},\"proposeNewExecutor(address)\":{\"notice\":\"Proposes a new Executor. Can only be called by the current executor or resucer (if in resuce mode)\"},\"proposeNewRescuer(address)\":{\"notice\":\"Proposes a new Rescuer. Can only be called by the current rescuer.\"},\"rescuer()\":{\"notice\":\"A set of addresses which are approved to execute emergency operations.\"},\"setExplicitAccess(address,(bytes4,bool)[])\":{\"notice\":\"Grant `allowedCaller` the rights to call the function selectors in the access list.\"},\"setMaxTreasuryPriceIndexDelta(uint256)\":{\"notice\":\"Set the maximum allowed TPI change on any single `setTreasuryPriceIndex()`, in absolute terms.\"},\"setRescueMode(bool)\":{\"notice\":\"Set the contract into or out of rescue mode. Only the rescuers or executors are allowed to set.\"},\"setTpiCooldown(uint32)\":{\"notice\":\"Set the number of seconds to elapse before a new TPI will take effect.\"},\"setTreasuryPriceIndex(uint96)\":{\"notice\":\"Set the Treasury Price Index (TPI)\"},\"tpiData()\":{\"notice\":\"The current internal TPI data along with when it was last reset, and the prior value\"},\"treasuryPriceIndex()\":{\"notice\":\"The current Treasury Price Index (TPI) value\"}},\"notice\":\"The custom oracle (not dependant on external markets/AMMs/dependencies) to give the Treasury Price Index, representing the target Treasury Value per token. This rate is updated manually with elevated permissions. The new TPI doesn't take effect until after a cooldown.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"22_27_ITreasuryPriceIndexOracle.sol\":\"ITreasuryPriceIndexOracle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":false}},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"18_27_ITempleElevatedAccess.sol\":{\"keccak256\":\"0xe5a19949ec514acf13d40c2dcda3356e803d93ed0cb5d8b76825c99250a234f4\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://ed239ebf015364133360cbeebc6193d630b32bcead90c832765d4e39b3727ee8\",\"dweb:/ipfs/QmZLQaTrraMRg7aGSyrFVh2dTKaC9Ua5LY1ZF53zbpndtu\"]},\"22_27_ITreasuryPriceIndexOracle.sol\":{\"keccak256\":\"0x208f4d65ae984c3d51f7bc0fb9801b987ce8e27e19e289d7b3e2de6933928c9e\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://9641530ca07f12d061c63c238e316176d11aaa22d7c00def1ecf070d9f9666e3\",\"dweb:/ipfs/QmdhgtiSK8oFYcBTRhfP7yRez6iSHShctn2bBzQX5VE6JE\"]}},\"version\":1}","userdoc":{"kind":"user","methods":{"TPI_DECIMALS()":{"notice":"The decimal precision of Temple Price Index (TPI)"},"acceptExecutor()":{"notice":"Caller accepts the role as new Executor. Can only be called by the proposed executor"},"acceptRescuer()":{"notice":"Caller accepts the role as new Rescuer. Can only be called by the proposed rescuer"},"executor()":{"notice":"A set of addresses which are approved to execute normal operations on behalf of the DAO."},"explicitFunctionAccess(address,bytes4)":{"notice":"Explicit approval for an address to execute a function. allowedCaller => function selector => true/false"},"inRescueMode()":{"notice":"Under normal circumstances, rescuers don't have access to admin/operational functions. However when rescue mode is enabled (by rescuers or executors), they claim the access rights."},"maxTreasuryPriceIndexDelta()":{"notice":"The maximum allowed TPI change on any single `setTreasuryPriceIndex()`, in absolute terms."},"proposeNewExecutor(address)":{"notice":"Proposes a new Executor. Can only be called by the current executor or resucer (if in resuce mode)"},"proposeNewRescuer(address)":{"notice":"Proposes a new Rescuer. Can only be called by the current rescuer."},"rescuer()":{"notice":"A set of addresses which are approved to execute emergency operations."},"setExplicitAccess(address,(bytes4,bool)[])":{"notice":"Grant `allowedCaller` the rights to call the function selectors in the access list."},"setMaxTreasuryPriceIndexDelta(uint256)":{"notice":"Set the maximum allowed TPI change on any single `setTreasuryPriceIndex()`, in absolute terms."},"setRescueMode(bool)":{"notice":"Set the contract into or out of rescue mode. Only the rescuers or executors are allowed to set."},"setTpiCooldown(uint32)":{"notice":"Set the number of seconds to elapse before a new TPI will take effect."},"setTreasuryPriceIndex(uint96)":{"notice":"Set the Treasury Price Index (TPI)"},"tpiData()":{"notice":"The current internal TPI data along with when it was last reset, and the prior value"},"treasuryPriceIndex()":{"notice":"The current Treasury Price Index (TPI) value"}},"notice":"The custom oracle (not dependant on external markets/AMMs/dependencies) to give the Treasury Price Index, representing the target Treasury Value per token. This rate is updated manually with elevated permissions. The new TPI doesn't take effect until after a cooldown.","version":1}}},"23_27_ITreasuryReservesVault.sol":{"ITreasuryReservesVault":{"abi":[{"inputs":[],"name":"AlreadyEnabled","type":"error"},{"inputs":[],"name":"BorrowPaused","type":"error"},{"inputs":[],"name":"BorrowTokenNotEnabled","type":"error"},{"inputs":[{"internalType":"uint256","name":"available","type":"uint256"},{"internalType":"uint256","name":"borrowAmount","type":"uint256"}],"name":"DebtCeilingBreached","type":"error"},{"inputs":[],"name":"NotShuttingDown","type":"error"},{"inputs":[],"name":"RepaysPaused","type":"error"},{"inputs":[],"name":"StrategyIsShutdown","type":"error"},{"inputs":[],"name":"StrategyNotEnabled","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"strategy","type":"address"},{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Borrow","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"}],"name":"BorrowTokenRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"address","name":"baseStrategy","type":"address"},{"indexed":false,"internalType":"uint256","name":"baseStrategyWithdrawalBuffer","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"baseStrategyDepositThreshold","type":"uint256"},{"indexed":false,"internalType":"address","name":"dToken","type":"address"}],"name":"BorrowTokenSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"strategy","type":"address"},{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"oldDebtCeiling","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newDebtCeiling","type":"uint256"}],"name":"DebtCeilingUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"bytes4","name":"fnSelector","type":"bytes4"},{"indexed":true,"internalType":"bool","name":"value","type":"bool"}],"name":"ExplicitAccessSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bool","name":"borrow","type":"bool"},{"indexed":false,"internalType":"bool","name":"repay","type":"bool"}],"name":"GlobalPausedSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldExecutor","type":"address"},{"indexed":true,"internalType":"address","name":"newExecutor","type":"address"}],"name":"NewExecutorAccepted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldExecutor","type":"address"},{"indexed":true,"internalType":"address","name":"oldProposedExecutor","type":"address"},{"indexed":true,"internalType":"address","name":"newProposedExecutor","type":"address"}],"name":"NewExecutorProposed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldRescuer","type":"address"},{"indexed":true,"internalType":"address","name":"newRescuer","type":"address"}],"name":"NewRescuerAccepted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldRescuer","type":"address"},{"indexed":true,"internalType":"address","name":"oldProposedRescuer","type":"address"},{"indexed":true,"internalType":"address","name":"newProposedRescuer","type":"address"}],"name":"NewRescuerProposed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"strategy","type":"address"},{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Repay","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bool","name":"value","type":"bool"}],"name":"RescueModeSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"strategy","type":"address"},{"indexed":false,"internalType":"int256","name":"underperformingEquityThreshold","type":"int256"}],"name":"StrategyAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"strategy","type":"address"},{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"credit","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"debt","type":"uint256"}],"name":"StrategyCreditAndDebtBalance","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"strategy","type":"address"},{"indexed":false,"internalType":"bool","name":"isShuttingDown","type":"bool"}],"name":"StrategyIsShuttingDownSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"strategy","type":"address"},{"indexed":false,"internalType":"bool","name":"borrow","type":"bool"},{"indexed":false,"internalType":"bool","name":"repay","type":"bool"}],"name":"StrategyPausedSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"strategy","type":"address"}],"name":"StrategyRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"strategy","type":"address"},{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"outstandingCredit","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"outstandingDebt","type":"uint256"}],"name":"StrategyShutdownCreditAndDebt","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"tpiOracle","type":"address"}],"name":"TpiOracleSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"strategy","type":"address"},{"indexed":false,"internalType":"int256","name":"oldThreshold","type":"int256"},{"indexed":false,"internalType":"int256","name":"newThreshold","type":"int256"}],"name":"UnderperformingEquityThresholdUpdated","type":"event"},{"inputs":[],"name":"acceptExecutor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"acceptRescuer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"strategy","type":"address"},{"internalType":"int256","name":"underperformingEquityThreshold","type":"int256"},{"components":[{"internalType":"address","name":"asset","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"}],"internalType":"struct ITempleStrategy.AssetBalance[]","name":"debtCeiling","type":"tuple[]"}],"name":"addStrategy","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"apiVersion","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"strategy","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"availableForStrategyToBorrow","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"uint256","name":"borrowAmount","type":"uint256"},{"internalType":"address","name":"recipient","type":"address"}],"name":"borrow","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"address","name":"recipient","type":"address"}],"name":"borrowMax","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"borrowTokens","outputs":[{"internalType":"contract ITempleBaseStrategy","name":"baseStrategy","type":"address"},{"internalType":"uint256","name":"baseStrategyWithdrawalBuffer","type":"uint256"},{"internalType":"uint256","name":"baseStrategyDepositThreshold","type":"uint256"},{"internalType":"contract ITempleDebtToken","name":"dToken","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"borrowTokensList","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"executor","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"contractAddr","type":"address"},{"internalType":"bytes4","name":"functionSelector","type":"bytes4"}],"name":"explicitFunctionAccess","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"globalBorrowPaused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"globalRepaysPaused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"inRescueMode","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"proposeNewExecutor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"proposeNewRescuer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"removeBorrowToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"uint256","name":"repayAmount","type":"uint256"},{"internalType":"address","name":"strategy","type":"address"}],"name":"repay","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"address","name":"strategy","type":"address"}],"name":"repayAll","outputs":[{"internalType":"uint256","name":"amountRepaid","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rescuer","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"address","name":"baseStrategy","type":"address"},{"internalType":"uint256","name":"baseStrategyWithdrawalBuffer","type":"uint256"},{"internalType":"uint256","name":"baseStrategyDepositThreshold","type":"uint256"},{"internalType":"address","name":"dToken","type":"address"}],"name":"setBorrowToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"allowedCaller","type":"address"},{"components":[{"internalType":"bytes4","name":"fnSelector","type":"bytes4"},{"internalType":"bool","name":"allowed","type":"bool"}],"internalType":"struct ITempleElevatedAccess.ExplicitAccess[]","name":"access","type":"tuple[]"}],"name":"setExplicitAccess","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"borrow","type":"bool"},{"internalType":"bool","name":"repays","type":"bool"}],"name":"setGlobalPaused","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"value","type":"bool"}],"name":"setRescueMode","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"strategy","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"uint256","name":"newDebtCeiling","type":"uint256"}],"name":"setStrategyDebtCeiling","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"strategy","type":"address"},{"internalType":"bool","name":"isShuttingDown","type":"bool"}],"name":"setStrategyIsShuttingDown","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"strategy","type":"address"},{"internalType":"bool","name":"borrow","type":"bool"},{"internalType":"bool","name":"repays","type":"bool"}],"name":"setStrategyPaused","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"strategy","type":"address"},{"internalType":"int256","name":"underperformingEquityThreshold","type":"int256"}],"name":"setStrategyUnderperformingThreshold","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"tpiOracleAddress","type":"address"}],"name":"setTpiOracle","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"strategy","type":"address"}],"name":"shutdown","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"strategy","type":"address"}],"name":"strategies","outputs":[{"internalType":"bool","name":"borrowPaused","type":"bool"},{"internalType":"bool","name":"repaysPaused","type":"bool"},{"internalType":"bool","name":"isShuttingDown","type":"bool"},{"internalType":"int256","name":"underperformingEquityThreshold","type":"int256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"strategiesList","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"strategyAddr","type":"address"}],"name":"strategyBalanceSheet","outputs":[{"components":[{"internalType":"address","name":"asset","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"}],"internalType":"struct ITempleStrategy.AssetBalance[]","name":"assetBalances","type":"tuple[]"},{"components":[{"internalType":"address","name":"asset","type":"address"},{"internalType":"int256","name":"delta","type":"int256"}],"internalType":"struct ITempleStrategy.AssetBalanceDelta[]","name":"manualAdjustments","type":"tuple[]"},{"components":[{"internalType":"address","name":"asset","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"}],"internalType":"struct ITempleStrategy.AssetBalance[]","name":"dTokenBalances","type":"tuple[]"},{"components":[{"internalType":"address","name":"asset","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"}],"internalType":"struct ITempleStrategy.AssetBalance[]","name":"dTokenCreditBalances","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"strategy","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"strategyDebtCeiling","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"strategy","type":"address"}],"name":"strategyDetails","outputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"version","type":"string"},{"internalType":"bool","name":"borrowPaused","type":"bool"},{"internalType":"bool","name":"repaysPaused","type":"bool"},{"internalType":"bool","name":"isShuttingDown","type":"bool"},{"internalType":"int256","name":"underperformingEquityThreshold","type":"int256"},{"components":[{"internalType":"address","name":"asset","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"}],"internalType":"struct ITempleStrategy.AssetBalance[]","name":"debtCeiling","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"strategy","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"strategyEnabledBorrowTokens","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"strategy","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"strategyTokenCredits","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"totalAvailable","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tpiOracle","outputs":[{"internalType":"contract ITreasuryPriceIndexOracle","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"treasuryPriceIndex","outputs":[{"internalType":"uint96","name":"","type":"uint96"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"strategy","type":"address"},{"internalType":"contract IERC20[]","name":"enableBorrowTokens","type":"address[]"},{"internalType":"contract IERC20[]","name":"disableBorrowTokens","type":"address[]"}],"name":"updateStrategyEnabledBorrowTokens","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"availableForStrategyToBorrow(address,address)":{"details":"available == min(ceiling - debt + credit, 0)"},"borrow(address,uint256,address)":{"details":"This will revert if the strategy requests more stables than it's able to borrow. `dToken` will be minted 1:1 for the amount of stables borrowed"},"borrowMax(address,address)":{"details":"This will revert if the strategy requests more stables than it's able to borrow. `dToken` will be minted 1:1 for the amount of stables borrowed"},"setBorrowToken(address,address,uint256,uint256,address)":{"details":"This can either add a new token or update an existing token."},"setExplicitAccess(address,(bytes4,bool)[])":{"details":"fnSelector == bytes4(keccak256(\"fn(argType1,argType2,...)\"))"},"strategyDetails(address)":{"details":"Note the current assets may not be 100% up to date, as some strategies may need to checkpoint based on the underlying strategy protocols (eg DSR for DAI would need to checkpoint to get the latest valuation)."}},"title":"Treasury Reserves Vault (TRV)","version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyEnabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BorrowPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BorrowTokenNotEnabled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"DebtCeilingBreached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotShuttingDown\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RepaysPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyIsShutdown\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyNotEnabled\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BorrowTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"baseStrategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseStrategyWithdrawalBuffer\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseStrategyDepositThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dToken\",\"type\":\"address\"}],\"name\":\"BorrowTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDebtCeiling\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDebtCeiling\",\"type\":\"uint256\"}],\"name\":\"DebtCeilingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"fnSelector\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"ExplicitAccessSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"borrow\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"repay\",\"type\":\"bool\"}],\"name\":\"GlobalPausedSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldExecutor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newExecutor\",\"type\":\"address\"}],\"name\":\"NewExecutorAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldExecutor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldProposedExecutor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newProposedExecutor\",\"type\":\"address\"}],\"name\":\"NewExecutorProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRescuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRescuer\",\"type\":\"address\"}],\"name\":\"NewRescuerAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRescuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldProposedRescuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newProposedRescuer\",\"type\":\"address\"}],\"name\":\"NewRescuerProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"RescueModeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"underperformingEquityThreshold\",\"type\":\"int256\"}],\"name\":\"StrategyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"credit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"name\":\"StrategyCreditAndDebtBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isShuttingDown\",\"type\":\"bool\"}],\"name\":\"StrategyIsShuttingDownSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"borrow\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"repay\",\"type\":\"bool\"}],\"name\":\"StrategyPausedSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outstandingCredit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outstandingDebt\",\"type\":\"uint256\"}],\"name\":\"StrategyShutdownCreditAndDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tpiOracle\",\"type\":\"address\"}],\"name\":\"TpiOracleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"oldThreshold\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"newThreshold\",\"type\":\"int256\"}],\"name\":\"UnderperformingEquityThresholdUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptRescuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"underperformingEquityThreshold\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct ITempleStrategy.AssetBalance[]\",\"name\":\"debtCeiling\",\"type\":\"tuple[]\"}],\"name\":\"addStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apiVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"availableForStrategyToBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"borrowMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"borrowTokens\",\"outputs\":[{\"internalType\":\"contract ITempleBaseStrategy\",\"name\":\"baseStrategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseStrategyWithdrawalBuffer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseStrategyDepositThreshold\",\"type\":\"uint256\"},{\"internalType\":\"contract ITempleDebtToken\",\"name\":\"dToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowTokensList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"}],\"name\":\"explicitFunctionAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalBorrowPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalRepaysPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inRescueMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"proposeNewExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"proposeNewRescuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeBorrowToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"repayAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountRepaid\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescuer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseStrategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseStrategyWithdrawalBuffer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseStrategyDepositThreshold\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dToken\",\"type\":\"address\"}],\"name\":\"setBorrowToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"allowedCaller\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"fnSelector\",\"type\":\"bytes4\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"internalType\":\"struct ITempleElevatedAccess.ExplicitAccess[]\",\"name\":\"access\",\"type\":\"tuple[]\"}],\"name\":\"setExplicitAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"borrow\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"repays\",\"type\":\"bool\"}],\"name\":\"setGlobalPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setRescueMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newDebtCeiling\",\"type\":\"uint256\"}],\"name\":\"setStrategyDebtCeiling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isShuttingDown\",\"type\":\"bool\"}],\"name\":\"setStrategyIsShuttingDown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"borrow\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"repays\",\"type\":\"bool\"}],\"name\":\"setStrategyPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"underperformingEquityThreshold\",\"type\":\"int256\"}],\"name\":\"setStrategyUnderperformingThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tpiOracleAddress\",\"type\":\"address\"}],\"name\":\"setTpiOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"shutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"borrowPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"repaysPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isShuttingDown\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"underperformingEquityThreshold\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategiesList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategyAddr\",\"type\":\"address\"}],\"name\":\"strategyBalanceSheet\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct ITempleStrategy.AssetBalance[]\",\"name\":\"assetBalances\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"delta\",\"type\":\"int256\"}],\"internalType\":\"struct ITempleStrategy.AssetBalanceDelta[]\",\"name\":\"manualAdjustments\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct ITempleStrategy.AssetBalance[]\",\"name\":\"dTokenBalances\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct ITempleStrategy.AssetBalance[]\",\"name\":\"dTokenCreditBalances\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"strategyDebtCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"strategyDetails\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"borrowPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"repaysPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isShuttingDown\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"underperformingEquityThreshold\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct ITempleStrategy.AssetBalance[]\",\"name\":\"debtCeiling\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"strategyEnabledBorrowTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"strategyTokenCredits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tpiOracle\",\"outputs\":[{\"internalType\":\"contract ITreasuryPriceIndexOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryPriceIndex\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"enableBorrowTokens\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"disableBorrowTokens\",\"type\":\"address[]\"}],\"name\":\"updateStrategyEnabledBorrowTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"availableForStrategyToBorrow(address,address)\":{\"details\":\"available == min(ceiling - debt + credit, 0)\"},\"borrow(address,uint256,address)\":{\"details\":\"This will revert if the strategy requests more stables than it's able to borrow. `dToken` will be minted 1:1 for the amount of stables borrowed\"},\"borrowMax(address,address)\":{\"details\":\"This will revert if the strategy requests more stables than it's able to borrow. `dToken` will be minted 1:1 for the amount of stables borrowed\"},\"setBorrowToken(address,address,uint256,uint256,address)\":{\"details\":\"This can either add a new token or update an existing token.\"},\"setExplicitAccess(address,(bytes4,bool)[])\":{\"details\":\"fnSelector == bytes4(keccak256(\\\"fn(argType1,argType2,...)\\\"))\"},\"strategyDetails(address)\":{\"details\":\"Note the current assets may not be 100% up to date, as some strategies may need to checkpoint based on the underlying strategy protocols (eg DSR for DAI would need to checkpoint to get the latest valuation).\"}},\"title\":\"Treasury Reserves Vault (TRV)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptExecutor()\":{\"notice\":\"Caller accepts the role as new Executor. Can only be called by the proposed executor\"},\"acceptRescuer()\":{\"notice\":\"Caller accepts the role as new Rescuer. Can only be called by the proposed rescuer\"},\"addStrategy(address,int256,(address,uint256)[])\":{\"notice\":\"Register a new strategy which can borrow tokens from Treasury Reserves\"},\"apiVersion()\":{\"notice\":\"API version to help with future integrations/migrations\"},\"availableForStrategyToBorrow(address,address)\":{\"notice\":\"The amount remaining that a strategy can borrow for a given token taking into account: the approved debt ceiling, current dToken debt, and any credits\"},\"borrow(address,uint256,address)\":{\"notice\":\"A strategy calls to request more funding.\"},\"borrowMax(address,address)\":{\"notice\":\"A strategy calls to request the most funding it can.\"},\"borrowTokens(address)\":{\"notice\":\"The configuration for a given token which can be borrowed by strategies\"},\"borrowTokensList()\":{\"notice\":\"The list of all tokens which can be borrowed by the TRV\"},\"executor()\":{\"notice\":\"A set of addresses which are approved to execute normal operations on behalf of the DAO.\"},\"explicitFunctionAccess(address,bytes4)\":{\"notice\":\"Explicit approval for an address to execute a function. allowedCaller => function selector => true/false\"},\"globalBorrowPaused()\":{\"notice\":\"True if all borrows are paused for all strategies.\"},\"globalRepaysPaused()\":{\"notice\":\"True if all repayments are paused for all strategies.\"},\"inRescueMode()\":{\"notice\":\"Under normal circumstances, rescuers don't have access to admin/operational functions. However when rescue mode is enabled (by rescuers or executors), they claim the access rights.\"},\"proposeNewExecutor(address)\":{\"notice\":\"Proposes a new Executor. Can only be called by the current executor or resucer (if in resuce mode)\"},\"proposeNewRescuer(address)\":{\"notice\":\"Proposes a new Rescuer. Can only be called by the current rescuer.\"},\"removeBorrowToken(address)\":{\"notice\":\"Remove the borrow token configuration. \"},\"repay(address,uint256,address)\":{\"notice\":\"A strategy calls to paydown it's debt This will pull the stables, and will burn the equivalent amount of dToken from the strategy.\"},\"repayAll(address,address)\":{\"notice\":\"A strategy calls to paydown all of it's debt This will pull the stables for the entire dToken balance of the strategy, and burn the dToken.\"},\"rescuer()\":{\"notice\":\"A set of addresses which are approved to execute emergency operations.\"},\"setBorrowToken(address,address,uint256,uint256,address)\":{\"notice\":\"Set the borrow token configuration. \"},\"setExplicitAccess(address,(bytes4,bool)[])\":{\"notice\":\"Grant `allowedCaller` the rights to call the function selectors in the access list.\"},\"setGlobalPaused(bool,bool)\":{\"notice\":\"Pause all strategy borrow and repays\"},\"setRescueMode(bool)\":{\"notice\":\"Set the contract into or out of rescue mode. Only the rescuers or executors are allowed to set.\"},\"setStrategyDebtCeiling(address,address,uint256)\":{\"notice\":\"Update the debt ceiling for a given strategy\"},\"setStrategyIsShuttingDown(address,bool)\":{\"notice\":\"The first step in a two-phase shutdown. Executor first sets whether a strategy is slated for shutdown. The strategy then needs to call shutdown as a separate call once ready.\"},\"setStrategyPaused(address,bool,bool)\":{\"notice\":\"Set whether borrows and repayments are paused for a given strategy.\"},\"setStrategyUnderperformingThreshold(address,int256)\":{\"notice\":\"Update the underperforming equity threshold.\"},\"setTpiOracle(address)\":{\"notice\":\"Set the Treasury Price Index (TPI) Oracle\"},\"shutdown(address)\":{\"notice\":\"The second step in a two-phase shutdown. A strategy (automated) or executor (manual) calls to effect the shutdown. isShuttingDown must be true for the strategy first. The strategy executor is responsible for unwinding all it's positions first and repaying the debt to the TRV. All outstanding dToken debt is burned, leaving a net gain/loss of equity for the shutdown strategy.\"},\"strategies(address)\":{\"notice\":\"The configuration for a given strategy\"},\"strategiesList()\":{\"notice\":\"The list of all strategies currently added to the TRV\"},\"strategyBalanceSheet(address)\":{\"notice\":\"A strategy's current asset balances, any manual adjustments and the current debt of the strategy.  This will be used to report equity performance: `sum($assetValue +- $manualAdj) - debt` The conversion of each asset price into the stable token (eg DAI) will be done off-chain along with formulating the union of asset balances and manual adjustments\"},\"strategyDebtCeiling(address,address)\":{\"notice\":\"The current max debt ceiling that a strategy is allowed to borrow up to.\"},\"strategyDetails(address)\":{\"notice\":\"A helper to collate information about a given strategy for reporting purposes.\"},\"strategyEnabledBorrowTokens(address,address)\":{\"notice\":\"Whether a token is enabled to be borrowed for a given strategy\"},\"strategyTokenCredits(address,address)\":{\"notice\":\"When strategies repay a token which covers more than their dToken debt for the token They receive credits. When they next need to borrow tokens this credit is used prior to issuing more dTokens\"},\"totalAvailable(address)\":{\"notice\":\"The total available stables, both as a balance in this contract and any available to withdraw from the baseStrategy\"},\"tpiOracle()\":{\"notice\":\"The Treasury Price Index Oracle\"},\"treasuryPriceIndex()\":{\"notice\":\"The Treasury Price Index - the target price of the Treasury, in `stableToken` terms.\"},\"updateStrategyEnabledBorrowTokens(address,address[],address[])\":{\"notice\":\"Enable and/or disable tokens which a strategy can borrow from the (configured) TRV borrow tokens\"}},\"notice\":\"Temple has various strategies which utilise the treasury funds to generate  gains for token holders.  The maximum amount of funds allocated to each strategy is determined by governance,  and then each strategy can borrow/repay as required (up to the cap).  When strategies borrow funds, they are issued `dToken`, an accruing debt token representing the debt to the temple treasury. This is used to compare strategies performance, where we can determine an equity value (assets - debt).    Strategies can borrow different types of tokens from the TRV, and are minted equivalent internal debt tokens eg:      DAI => minted dUSD      TEMPLE => minted dTEMPLE      ETH => minted dETH      Each of the dTokens are compounding at different risk free rates, eg:      dUSD: At DAIs Savings Rate (DSR)      dTEMPLE: 0% interest (no opportunity cost)      dETH: ~avg LST rate      And so each token which can be borrowed has separate config on how to pull/deposit idle funds.   For example, this may be:      DAI => DSR base strategy      TEMPLE => direct Temple mint/burn       ETH => just hold in a vault\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"23_27_ITreasuryReservesVault.sol\":\"ITreasuryReservesVault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":false}},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"02_27_IERC20Metadata.sol\":{\"keccak256\":\"0xa25ab9a66cae9ca6a3a4665ca798366110e116b34ecee4b840f95a40b0243f49\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a701f9d7ca720f9fb194eb95d08a364605acf68b8e69d50ef63e11ea6b508460\",\"dweb:/ipfs/QmWYXJSGnmX48yqkMiJHxwQLBn4hdMDVbga9QvCmUWgnRi\"]},\"04_27_IERC20.sol\":{\"keccak256\":\"0x3cedce2cd7eacaae0bc44842b12b842e38aaa2add3f660bfca6c3dfa88542fe2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5b5f40ecf34ab169edc109702d94db1c4f1e71c467cfeb077879694d681e1ba8\",\"dweb:/ipfs/QmWF8AMSAbaxbqp2ViuXQnzyPbuiPPNriaBZ5Lh7o1LmCH\"]},\"18_27_ITempleElevatedAccess.sol\":{\"keccak256\":\"0xe5a19949ec514acf13d40c2dcda3356e803d93ed0cb5d8b76825c99250a234f4\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://ed239ebf015364133360cbeebc6193d630b32bcead90c832765d4e39b3727ee8\",\"dweb:/ipfs/QmZLQaTrraMRg7aGSyrFVh2dTKaC9Ua5LY1ZF53zbpndtu\"]},\"21_27_ITempleDebtToken.sol\":{\"keccak256\":\"0x9b9bef93b388da13ea8a3903a6b172ee0d7785559f9e8b39c153c238f4081281\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://7953a23b36d8f7fb50d05145b26bea9d411b5ec2b0849f95e1a82e1d4922940e\",\"dweb:/ipfs/QmXSt4awrTaDcs3r7Y2q7NBRi3vY3sbvESnPBc4PZb7sNL\"]},\"22_27_ITreasuryPriceIndexOracle.sol\":{\"keccak256\":\"0x208f4d65ae984c3d51f7bc0fb9801b987ce8e27e19e289d7b3e2de6933928c9e\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://9641530ca07f12d061c63c238e316176d11aaa22d7c00def1ecf070d9f9666e3\",\"dweb:/ipfs/QmdhgtiSK8oFYcBTRhfP7yRez6iSHShctn2bBzQX5VE6JE\"]},\"23_27_ITreasuryReservesVault.sol\":{\"keccak256\":\"0xd4f7ec3bf3176adf8fae61cb877b64edcca2c505307dfb10f891c8a7bcaf7db4\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://1dc5adf21fb220f3f981cad42c075bc34799507af404e9c15938dd11e22cac00\",\"dweb:/ipfs/QmbWgahn5ty784oniZjXGfG29zQqQLf7jhHmu8cdKHzNn1\"]},\"24_27_ITempleBaseStrategy.sol\":{\"keccak256\":\"0x1ec79d6cd3e471bddb18277b2f33db5e56f33dbe8f4f9e4ffa30f1a11ad3fcd1\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://bf17e9521e75d8320d101b20ab4422e7e832f38ed00fc1fd0bc80c526c5b358f\",\"dweb:/ipfs/QmfQ2yEhgU1GVEWVrVUJqjvnSWqtB9KamNvDbLqcWW4qkk\"]},\"25_27_ITempleStrategy.sol\":{\"keccak256\":\"0xba3a25785e50de9a5497d838a16f09dd051d2cd0ae7e4b0bbbfd65b26bdb715e\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://8c1769dace4a9977b7e021d2042ed9cd3caf124a726417791c52f111575a44d5\",\"dweb:/ipfs/QmfNz3REQxsqRet4Hio2CWTTSRzoyYP2GX8ySNLk9LHRAU\"]}},\"version\":1}","userdoc":{"kind":"user","methods":{"acceptExecutor()":{"notice":"Caller accepts the role as new Executor. Can only be called by the proposed executor"},"acceptRescuer()":{"notice":"Caller accepts the role as new Rescuer. Can only be called by the proposed rescuer"},"addStrategy(address,int256,(address,uint256)[])":{"notice":"Register a new strategy which can borrow tokens from Treasury Reserves"},"apiVersion()":{"notice":"API version to help with future integrations/migrations"},"availableForStrategyToBorrow(address,address)":{"notice":"The amount remaining that a strategy can borrow for a given token taking into account: the approved debt ceiling, current dToken debt, and any credits"},"borrow(address,uint256,address)":{"notice":"A strategy calls to request more funding."},"borrowMax(address,address)":{"notice":"A strategy calls to request the most funding it can."},"borrowTokens(address)":{"notice":"The configuration for a given token which can be borrowed by strategies"},"borrowTokensList()":{"notice":"The list of all tokens which can be borrowed by the TRV"},"executor()":{"notice":"A set of addresses which are approved to execute normal operations on behalf of the DAO."},"explicitFunctionAccess(address,bytes4)":{"notice":"Explicit approval for an address to execute a function. allowedCaller => function selector => true/false"},"globalBorrowPaused()":{"notice":"True if all borrows are paused for all strategies."},"globalRepaysPaused()":{"notice":"True if all repayments are paused for all strategies."},"inRescueMode()":{"notice":"Under normal circumstances, rescuers don't have access to admin/operational functions. However when rescue mode is enabled (by rescuers or executors), they claim the access rights."},"proposeNewExecutor(address)":{"notice":"Proposes a new Executor. Can only be called by the current executor or resucer (if in resuce mode)"},"proposeNewRescuer(address)":{"notice":"Proposes a new Rescuer. Can only be called by the current rescuer."},"removeBorrowToken(address)":{"notice":"Remove the borrow token configuration. "},"repay(address,uint256,address)":{"notice":"A strategy calls to paydown it's debt This will pull the stables, and will burn the equivalent amount of dToken from the strategy."},"repayAll(address,address)":{"notice":"A strategy calls to paydown all of it's debt This will pull the stables for the entire dToken balance of the strategy, and burn the dToken."},"rescuer()":{"notice":"A set of addresses which are approved to execute emergency operations."},"setBorrowToken(address,address,uint256,uint256,address)":{"notice":"Set the borrow token configuration. "},"setExplicitAccess(address,(bytes4,bool)[])":{"notice":"Grant `allowedCaller` the rights to call the function selectors in the access list."},"setGlobalPaused(bool,bool)":{"notice":"Pause all strategy borrow and repays"},"setRescueMode(bool)":{"notice":"Set the contract into or out of rescue mode. Only the rescuers or executors are allowed to set."},"setStrategyDebtCeiling(address,address,uint256)":{"notice":"Update the debt ceiling for a given strategy"},"setStrategyIsShuttingDown(address,bool)":{"notice":"The first step in a two-phase shutdown. Executor first sets whether a strategy is slated for shutdown. The strategy then needs to call shutdown as a separate call once ready."},"setStrategyPaused(address,bool,bool)":{"notice":"Set whether borrows and repayments are paused for a given strategy."},"setStrategyUnderperformingThreshold(address,int256)":{"notice":"Update the underperforming equity threshold."},"setTpiOracle(address)":{"notice":"Set the Treasury Price Index (TPI) Oracle"},"shutdown(address)":{"notice":"The second step in a two-phase shutdown. A strategy (automated) or executor (manual) calls to effect the shutdown. isShuttingDown must be true for the strategy first. The strategy executor is responsible for unwinding all it's positions first and repaying the debt to the TRV. All outstanding dToken debt is burned, leaving a net gain/loss of equity for the shutdown strategy."},"strategies(address)":{"notice":"The configuration for a given strategy"},"strategiesList()":{"notice":"The list of all strategies currently added to the TRV"},"strategyBalanceSheet(address)":{"notice":"A strategy's current asset balances, any manual adjustments and the current debt of the strategy.  This will be used to report equity performance: `sum($assetValue +- $manualAdj) - debt` The conversion of each asset price into the stable token (eg DAI) will be done off-chain along with formulating the union of asset balances and manual adjustments"},"strategyDebtCeiling(address,address)":{"notice":"The current max debt ceiling that a strategy is allowed to borrow up to."},"strategyDetails(address)":{"notice":"A helper to collate information about a given strategy for reporting purposes."},"strategyEnabledBorrowTokens(address,address)":{"notice":"Whether a token is enabled to be borrowed for a given strategy"},"strategyTokenCredits(address,address)":{"notice":"When strategies repay a token which covers more than their dToken debt for the token They receive credits. When they next need to borrow tokens this credit is used prior to issuing more dTokens"},"totalAvailable(address)":{"notice":"The total available stables, both as a balance in this contract and any available to withdraw from the baseStrategy"},"tpiOracle()":{"notice":"The Treasury Price Index Oracle"},"treasuryPriceIndex()":{"notice":"The Treasury Price Index - the target price of the Treasury, in `stableToken` terms."},"updateStrategyEnabledBorrowTokens(address,address[],address[])":{"notice":"Enable and/or disable tokens which a strategy can borrow from the (configured) TRV borrow tokens"}},"notice":"Temple has various strategies which utilise the treasury funds to generate  gains for token holders.  The maximum amount of funds allocated to each strategy is determined by governance,  and then each strategy can borrow/repay as required (up to the cap).  When strategies borrow funds, they are issued `dToken`, an accruing debt token representing the debt to the temple treasury. This is used to compare strategies performance, where we can determine an equity value (assets - debt).    Strategies can borrow different types of tokens from the TRV, and are minted equivalent internal debt tokens eg:      DAI => minted dUSD      TEMPLE => minted dTEMPLE      ETH => minted dETH      Each of the dTokens are compounding at different risk free rates, eg:      dUSD: At DAIs Savings Rate (DSR)      dTEMPLE: 0% interest (no opportunity cost)      dETH: ~avg LST rate      And so each token which can be borrowed has separate config on how to pull/deposit idle funds.   For example, this may be:      DAI => DSR base strategy      TEMPLE => direct Temple mint/burn       ETH => just hold in a vault","version":1}}},"24_27_ITempleBaseStrategy.sol":{"ITempleBaseStrategy":{"abi":[{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"borrowAndDeposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"latestAssetBalances","outputs":[{"components":[{"internalType":"address","name":"asset","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"}],"internalType":"struct ITempleStrategy.AssetBalance[]","name":"assetBalances","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"trvDeposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"requestedAmount","type":"uint256"}],"name":"trvWithdraw","outputs":[{"internalType":"uint256","name":"amountWithdrawn","type":"uint256"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"latestAssetBalances()":{"details":"The asset value may be stale at any point in time, depending on the strategy.  It may optionally implement `checkpointAssetBalances()` in order to update those balances."},"trvWithdraw(uint256)":{"details":"It may withdraw less than requested if there isn't enough balance in the DSR."}},"title":"Temple Base Strategy","version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrowAndDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAssetBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct ITempleStrategy.AssetBalance[]\",\"name\":\"assetBalances\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"trvDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestedAmount\",\"type\":\"uint256\"}],\"name\":\"trvWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountWithdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"latestAssetBalances()\":{\"details\":\"The asset value may be stale at any point in time, depending on the strategy.  It may optionally implement `checkpointAssetBalances()` in order to update those balances.\"},\"trvWithdraw(uint256)\":{\"details\":\"It may withdraw less than requested if there isn't enough balance in the DSR.\"}},\"title\":\"Temple Base Strategy\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"borrowAndDeposit(uint256)\":{\"notice\":\"The same as `borrowMax()` but for a pre-determined amount to borrow, such that something upstream/off-chain can determine the amount.\"},\"latestAssetBalances()\":{\"notice\":\"The latest checkpoint of each asset balance this strategy holds.\"},\"trvDeposit(uint256)\":{\"notice\":\"When the TRV has a surplus of funds (over the configured buffer threshold) it will transfer tokens to the base strategy, and call this function to apply the new captial.\"},\"trvWithdraw(uint256)\":{\"notice\":\"The TRV is able to withdraw on demand in order to fund other strategies which  wish to borrow from the TRV.\"}},\"notice\":\"A special Temple Strategy which is eligable to transiently apply capital into a very safe yield bearing protocol (eg DAI Savings Rate).  The Treasury Reserves Vault will have permission to pull back funds from this strategy at any time, for example when another strategy wants to borrow funds.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"24_27_ITempleBaseStrategy.sol\":\"ITempleBaseStrategy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":false}},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"02_27_IERC20Metadata.sol\":{\"keccak256\":\"0xa25ab9a66cae9ca6a3a4665ca798366110e116b34ecee4b840f95a40b0243f49\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a701f9d7ca720f9fb194eb95d08a364605acf68b8e69d50ef63e11ea6b508460\",\"dweb:/ipfs/QmWYXJSGnmX48yqkMiJHxwQLBn4hdMDVbga9QvCmUWgnRi\"]},\"04_27_IERC20.sol\":{\"keccak256\":\"0x3cedce2cd7eacaae0bc44842b12b842e38aaa2add3f660bfca6c3dfa88542fe2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5b5f40ecf34ab169edc109702d94db1c4f1e71c467cfeb077879694d681e1ba8\",\"dweb:/ipfs/QmWF8AMSAbaxbqp2ViuXQnzyPbuiPPNriaBZ5Lh7o1LmCH\"]},\"18_27_ITempleElevatedAccess.sol\":{\"keccak256\":\"0xe5a19949ec514acf13d40c2dcda3356e803d93ed0cb5d8b76825c99250a234f4\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://ed239ebf015364133360cbeebc6193d630b32bcead90c832765d4e39b3727ee8\",\"dweb:/ipfs/QmZLQaTrraMRg7aGSyrFVh2dTKaC9Ua5LY1ZF53zbpndtu\"]},\"21_27_ITempleDebtToken.sol\":{\"keccak256\":\"0x9b9bef93b388da13ea8a3903a6b172ee0d7785559f9e8b39c153c238f4081281\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://7953a23b36d8f7fb50d05145b26bea9d411b5ec2b0849f95e1a82e1d4922940e\",\"dweb:/ipfs/QmXSt4awrTaDcs3r7Y2q7NBRi3vY3sbvESnPBc4PZb7sNL\"]},\"22_27_ITreasuryPriceIndexOracle.sol\":{\"keccak256\":\"0x208f4d65ae984c3d51f7bc0fb9801b987ce8e27e19e289d7b3e2de6933928c9e\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://9641530ca07f12d061c63c238e316176d11aaa22d7c00def1ecf070d9f9666e3\",\"dweb:/ipfs/QmdhgtiSK8oFYcBTRhfP7yRez6iSHShctn2bBzQX5VE6JE\"]},\"23_27_ITreasuryReservesVault.sol\":{\"keccak256\":\"0xd4f7ec3bf3176adf8fae61cb877b64edcca2c505307dfb10f891c8a7bcaf7db4\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://1dc5adf21fb220f3f981cad42c075bc34799507af404e9c15938dd11e22cac00\",\"dweb:/ipfs/QmbWgahn5ty784oniZjXGfG29zQqQLf7jhHmu8cdKHzNn1\"]},\"24_27_ITempleBaseStrategy.sol\":{\"keccak256\":\"0x1ec79d6cd3e471bddb18277b2f33db5e56f33dbe8f4f9e4ffa30f1a11ad3fcd1\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://bf17e9521e75d8320d101b20ab4422e7e832f38ed00fc1fd0bc80c526c5b358f\",\"dweb:/ipfs/QmfQ2yEhgU1GVEWVrVUJqjvnSWqtB9KamNvDbLqcWW4qkk\"]},\"25_27_ITempleStrategy.sol\":{\"keccak256\":\"0xba3a25785e50de9a5497d838a16f09dd051d2cd0ae7e4b0bbbfd65b26bdb715e\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://8c1769dace4a9977b7e021d2042ed9cd3caf124a726417791c52f111575a44d5\",\"dweb:/ipfs/QmfNz3REQxsqRet4Hio2CWTTSRzoyYP2GX8ySNLk9LHRAU\"]}},\"version\":1}","userdoc":{"kind":"user","methods":{"borrowAndDeposit(uint256)":{"notice":"The same as `borrowMax()` but for a pre-determined amount to borrow, such that something upstream/off-chain can determine the amount."},"latestAssetBalances()":{"notice":"The latest checkpoint of each asset balance this strategy holds."},"trvDeposit(uint256)":{"notice":"When the TRV has a surplus of funds (over the configured buffer threshold) it will transfer tokens to the base strategy, and call this function to apply the new captial."},"trvWithdraw(uint256)":{"notice":"The TRV is able to withdraw on demand in order to fund other strategies which  wish to borrow from the TRV."}},"notice":"A special Temple Strategy which is eligable to transiently apply capital into a very safe yield bearing protocol (eg DAI Savings Rate).  The Treasury Reserves Vault will have permission to pull back funds from this strategy at any time, for example when another strategy wants to borrow funds.","version":1}}},"25_27_ITempleStrategy.sol":{"ITempleStrategy":{"abi":[{"inputs":[{"internalType":"string","name":"expected","type":"string"},{"internalType":"string","name":"actual","type":"string"}],"name":"InvalidVersion","type":"error"},{"inputs":[{"internalType":"address","name":"caller","type":"address"}],"name":"OnlyTreasuryReserveVault","type":"error"},{"anonymous":false,"inputs":[{"components":[{"internalType":"address","name":"asset","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"}],"indexed":false,"internalType":"struct ITempleStrategy.AssetBalance[]","name":"assetBalances","type":"tuple[]"}],"name":"AssetBalancesCheckpoint","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"bytes4","name":"fnSelector","type":"bytes4"},{"indexed":true,"internalType":"bool","name":"value","type":"bool"}],"name":"ExplicitAccessSet","type":"event"},{"anonymous":false,"inputs":[{"components":[{"internalType":"address","name":"asset","type":"address"},{"internalType":"int256","name":"delta","type":"int256"}],"indexed":false,"internalType":"struct ITempleStrategy.AssetBalanceDelta[]","name":"adjustments","type":"tuple[]"}],"name":"ManualAdjustmentsSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldExecutor","type":"address"},{"indexed":true,"internalType":"address","name":"newExecutor","type":"address"}],"name":"NewExecutorAccepted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldExecutor","type":"address"},{"indexed":true,"internalType":"address","name":"oldProposedExecutor","type":"address"},{"indexed":true,"internalType":"address","name":"newProposedExecutor","type":"address"}],"name":"NewExecutorProposed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldRescuer","type":"address"},{"indexed":true,"internalType":"address","name":"newRescuer","type":"address"}],"name":"NewRescuerAccepted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldRescuer","type":"address"},{"indexed":true,"internalType":"address","name":"oldProposedRescuer","type":"address"},{"indexed":true,"internalType":"address","name":"newProposedRescuer","type":"address"}],"name":"NewRescuerProposed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bool","name":"value","type":"bool"}],"name":"RescueModeSet","type":"event"},{"anonymous":false,"inputs":[],"name":"Shutdown","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"TokenAllowanceSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"trv","type":"address"}],"name":"TreasuryReservesVaultSet","type":"event"},{"inputs":[],"name":"acceptExecutor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"acceptRescuer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"apiVersion","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"shutdownParamsData","type":"bytes"}],"name":"automatedShutdown","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"checkpointAssetBalances","outputs":[{"components":[{"internalType":"address","name":"asset","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"}],"internalType":"struct ITempleStrategy.AssetBalance[]","name":"assetBalances","type":"tuple[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"uint256","name":"newDebtCeiling","type":"uint256"}],"name":"debtCeilingUpdated","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"executor","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"contractAddr","type":"address"},{"internalType":"bytes4","name":"functionSelector","type":"bytes4"}],"name":"explicitFunctionAccess","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"inRescueMode","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"latestAssetBalances","outputs":[{"components":[{"internalType":"address","name":"asset","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"}],"internalType":"struct ITempleStrategy.AssetBalance[]","name":"assetBalances","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"manualAdjustments","outputs":[{"components":[{"internalType":"address","name":"asset","type":"address"},{"internalType":"int256","name":"delta","type":"int256"}],"internalType":"struct ITempleStrategy.AssetBalanceDelta[]","name":"adjustments","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"populateParamsData","type":"bytes"}],"name":"populateShutdownData","outputs":[{"internalType":"bytes","name":"shutdownParamsData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"proposeNewExecutor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"proposeNewRescuer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"recoverToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rescuer","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"allowedCaller","type":"address"},{"components":[{"internalType":"bytes4","name":"fnSelector","type":"bytes4"},{"internalType":"bool","name":"allowed","type":"bool"}],"internalType":"struct ITempleElevatedAccess.ExplicitAccess[]","name":"access","type":"tuple[]"}],"name":"setExplicitAccess","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"asset","type":"address"},{"internalType":"int256","name":"delta","type":"int256"}],"internalType":"struct ITempleStrategy.AssetBalanceDelta[]","name":"adjustments","type":"tuple[]"}],"name":"setManualAdjustments","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"value","type":"bool"}],"name":"setRescueMode","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"setTokenAllowance","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_trv","type":"address"}],"name":"setTreasuryReservesVault","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"strategyName","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"strategyVersion","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"treasuryReservesVault","outputs":[{"internalType":"contract ITreasuryReservesVault","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"automatedShutdown(bytes)":{"details":"Each strategy may require a different set of params to do the shutdown. It can abi encode/decode that data off chain, or by first calling populateShutdownData()"},"debtCeilingUpdated(address,uint256)":{"details":"by default it's a no-op unless the strategy implements `_debtCeilingUpdated()`"},"latestAssetBalances()":{"details":"The asset value may be stale at any point in time, depending on the strategy.  It may optionally implement `checkpointAssetBalances()` in order to update those balances."},"populateShutdownData(bytes)":{"details":"Intentionally not a view - as some quotes require a non-view (eg Balancer) The intention is for clients to call as 'static', like a view"},"setExplicitAccess(address,(bytes4,bool)[])":{"details":"fnSelector == bytes4(keccak256(\"fn(argType1,argType2,...)\"))"}},"title":"Temple Strategy","version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"expected\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"actual\",\"type\":\"string\"}],\"name\":\"InvalidVersion\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"OnlyTreasuryReserveVault\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ITempleStrategy.AssetBalance[]\",\"name\":\"assetBalances\",\"type\":\"tuple[]\"}],\"name\":\"AssetBalancesCheckpoint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"fnSelector\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"ExplicitAccessSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"delta\",\"type\":\"int256\"}],\"indexed\":false,\"internalType\":\"struct ITempleStrategy.AssetBalanceDelta[]\",\"name\":\"adjustments\",\"type\":\"tuple[]\"}],\"name\":\"ManualAdjustmentsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldExecutor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newExecutor\",\"type\":\"address\"}],\"name\":\"NewExecutorAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldExecutor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldProposedExecutor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newProposedExecutor\",\"type\":\"address\"}],\"name\":\"NewExecutorProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRescuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRescuer\",\"type\":\"address\"}],\"name\":\"NewRescuerAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRescuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldProposedRescuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newProposedRescuer\",\"type\":\"address\"}],\"name\":\"NewRescuerProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"RescueModeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Shutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenAllowanceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trv\",\"type\":\"address\"}],\"name\":\"TreasuryReservesVaultSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptRescuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apiVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"shutdownParamsData\",\"type\":\"bytes\"}],\"name\":\"automatedShutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointAssetBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct ITempleStrategy.AssetBalance[]\",\"name\":\"assetBalances\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newDebtCeiling\",\"type\":\"uint256\"}],\"name\":\"debtCeilingUpdated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"}],\"name\":\"explicitFunctionAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inRescueMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAssetBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct ITempleStrategy.AssetBalance[]\",\"name\":\"assetBalances\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualAdjustments\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"delta\",\"type\":\"int256\"}],\"internalType\":\"struct ITempleStrategy.AssetBalanceDelta[]\",\"name\":\"adjustments\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"populateParamsData\",\"type\":\"bytes\"}],\"name\":\"populateShutdownData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"shutdownParamsData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"proposeNewExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"proposeNewRescuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescuer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"allowedCaller\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"fnSelector\",\"type\":\"bytes4\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"internalType\":\"struct ITempleElevatedAccess.ExplicitAccess[]\",\"name\":\"access\",\"type\":\"tuple[]\"}],\"name\":\"setExplicitAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"delta\",\"type\":\"int256\"}],\"internalType\":\"struct ITempleStrategy.AssetBalanceDelta[]\",\"name\":\"adjustments\",\"type\":\"tuple[]\"}],\"name\":\"setManualAdjustments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setRescueMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setTokenAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trv\",\"type\":\"address\"}],\"name\":\"setTreasuryReservesVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryReservesVault\",\"outputs\":[{\"internalType\":\"contract ITreasuryReservesVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"automatedShutdown(bytes)\":{\"details\":\"Each strategy may require a different set of params to do the shutdown. It can abi encode/decode that data off chain, or by first calling populateShutdownData()\"},\"debtCeilingUpdated(address,uint256)\":{\"details\":\"by default it's a no-op unless the strategy implements `_debtCeilingUpdated()`\"},\"latestAssetBalances()\":{\"details\":\"The asset value may be stale at any point in time, depending on the strategy.  It may optionally implement `checkpointAssetBalances()` in order to update those balances.\"},\"populateShutdownData(bytes)\":{\"details\":\"Intentionally not a view - as some quotes require a non-view (eg Balancer) The intention is for clients to call as 'static', like a view\"},\"setExplicitAccess(address,(bytes4,bool)[])\":{\"details\":\"fnSelector == bytes4(keccak256(\\\"fn(argType1,argType2,...)\\\"))\"}},\"title\":\"Temple Strategy\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptExecutor()\":{\"notice\":\"Caller accepts the role as new Executor. Can only be called by the proposed executor\"},\"acceptRescuer()\":{\"notice\":\"Caller accepts the role as new Rescuer. Can only be called by the proposed rescuer\"},\"apiVersion()\":{\"notice\":\"API version to help with future integrations/migrations\"},\"automatedShutdown(bytes)\":{\"notice\":\"The strategy executor can shutdown this strategy, only after Executors have marked the strategy as `isShuttingDown` in the TRV. This should handle all liquidations and send all funds back to the TRV, and will then call `TRV.shutdown()` to apply the shutdown.\"},\"checkpointAssetBalances()\":{\"notice\":\"By default, we assume there is no checkpoint required for a strategy In which case it would be identical to just calling `latestAssetBalances()` A strategy can override this if on-chain functions are required to run to force balance updates first - eg checkpoint DSR\"},\"debtCeilingUpdated(address,uint256)\":{\"notice\":\"A hook which is called by the Treasury Reserves Vault when the debt ceiling for this strategy is updated\"},\"executor()\":{\"notice\":\"A set of addresses which are approved to execute normal operations on behalf of the DAO.\"},\"explicitFunctionAccess(address,bytes4)\":{\"notice\":\"Explicit approval for an address to execute a function. allowedCaller => function selector => true/false\"},\"inRescueMode()\":{\"notice\":\"Under normal circumstances, rescuers don't have access to admin/operational functions. However when rescue mode is enabled (by rescuers or executors), they claim the access rights.\"},\"latestAssetBalances()\":{\"notice\":\"The latest checkpoint of each asset balance this strategy holds.\"},\"manualAdjustments()\":{\"notice\":\"Get the set of manual asset balance deltas, set by the Strategy Executor.\"},\"populateShutdownData(bytes)\":{\"notice\":\"populate data required for shutdown - for example quote data. This may/may not be required in order to do a shutdown. For example to avoid frontrunning/MEV quotes to exit an LP position may need to be obtained off-chain prior to the actual shutdown. Each strategy can abi encode params that it requires.\"},\"proposeNewExecutor(address)\":{\"notice\":\"Proposes a new Executor. Can only be called by the current executor or resucer (if in resuce mode)\"},\"proposeNewRescuer(address)\":{\"notice\":\"Proposes a new Rescuer. Can only be called by the current rescuer.\"},\"recoverToken(address,address,uint256)\":{\"notice\":\"Executors can recover any token from the strategy.\"},\"rescuer()\":{\"notice\":\"A set of addresses which are approved to execute emergency operations.\"},\"setExplicitAccess(address,(bytes4,bool)[])\":{\"notice\":\"Grant `allowedCaller` the rights to call the function selectors in the access list.\"},\"setManualAdjustments((address,int256)[])\":{\"notice\":\"The Strategy Executor may set manual adjustments to asset balances if they cannot be reported automatically - eg a staked position with no receipt token.\"},\"setRescueMode(bool)\":{\"notice\":\"Set the contract into or out of rescue mode. Only the rescuers or executors are allowed to set.\"},\"setTokenAllowance(address,address,uint256)\":{\"notice\":\"Executors can set the allowance of any token spend from the strategy\"},\"setTreasuryReservesVault(address)\":{\"notice\":\"Executors can set the address of the treasury reserves vault.\"},\"strategyName()\":{\"notice\":\"A human readable name of the strategy\"},\"strategyVersion()\":{\"notice\":\"The version of this particular strategy\"},\"treasuryReservesVault()\":{\"notice\":\"The address of the treasury reserves vault.\"}},\"notice\":\"The Temple Strategy is responsible for borrowing funds from the Treasury Reserve Vault and generating positive equity from that capital.  When it borrows funds it is issued systematic debt (`dToken`) which accrues interest at a common base rate plus a risk premium rate specific to this strategy, agreed and set by governance. The strategy reports it's assets (total available funds in investments) in order to report the equity of the strategy -- ie a comparable performance metric across all strategy's. The Strategy Executor role is responsible for applying the capital within the strategy, and can borrow funds from the TRV up to a cap (set by governance). Similarly the Executor is responsible for operations - borrow/repay/liquidate/etc. The strategy can be shutdown - first by Executors giving the go-ahead by setting it to `isShuttingDown` in the TRV and then the Executor can either:   a/ Graceful shutdown, where any liquidation can happen automatically   b/ Force shutdown, where the Executor needs to handle any liquidations manually and send funds back to Treasury first.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"25_27_ITempleStrategy.sol\":\"ITempleStrategy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":false}},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"02_27_IERC20Metadata.sol\":{\"keccak256\":\"0xa25ab9a66cae9ca6a3a4665ca798366110e116b34ecee4b840f95a40b0243f49\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a701f9d7ca720f9fb194eb95d08a364605acf68b8e69d50ef63e11ea6b508460\",\"dweb:/ipfs/QmWYXJSGnmX48yqkMiJHxwQLBn4hdMDVbga9QvCmUWgnRi\"]},\"04_27_IERC20.sol\":{\"keccak256\":\"0x3cedce2cd7eacaae0bc44842b12b842e38aaa2add3f660bfca6c3dfa88542fe2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5b5f40ecf34ab169edc109702d94db1c4f1e71c467cfeb077879694d681e1ba8\",\"dweb:/ipfs/QmWF8AMSAbaxbqp2ViuXQnzyPbuiPPNriaBZ5Lh7o1LmCH\"]},\"18_27_ITempleElevatedAccess.sol\":{\"keccak256\":\"0xe5a19949ec514acf13d40c2dcda3356e803d93ed0cb5d8b76825c99250a234f4\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://ed239ebf015364133360cbeebc6193d630b32bcead90c832765d4e39b3727ee8\",\"dweb:/ipfs/QmZLQaTrraMRg7aGSyrFVh2dTKaC9Ua5LY1ZF53zbpndtu\"]},\"21_27_ITempleDebtToken.sol\":{\"keccak256\":\"0x9b9bef93b388da13ea8a3903a6b172ee0d7785559f9e8b39c153c238f4081281\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://7953a23b36d8f7fb50d05145b26bea9d411b5ec2b0849f95e1a82e1d4922940e\",\"dweb:/ipfs/QmXSt4awrTaDcs3r7Y2q7NBRi3vY3sbvESnPBc4PZb7sNL\"]},\"22_27_ITreasuryPriceIndexOracle.sol\":{\"keccak256\":\"0x208f4d65ae984c3d51f7bc0fb9801b987ce8e27e19e289d7b3e2de6933928c9e\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://9641530ca07f12d061c63c238e316176d11aaa22d7c00def1ecf070d9f9666e3\",\"dweb:/ipfs/QmdhgtiSK8oFYcBTRhfP7yRez6iSHShctn2bBzQX5VE6JE\"]},\"23_27_ITreasuryReservesVault.sol\":{\"keccak256\":\"0xd4f7ec3bf3176adf8fae61cb877b64edcca2c505307dfb10f891c8a7bcaf7db4\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://1dc5adf21fb220f3f981cad42c075bc34799507af404e9c15938dd11e22cac00\",\"dweb:/ipfs/QmbWgahn5ty784oniZjXGfG29zQqQLf7jhHmu8cdKHzNn1\"]},\"24_27_ITempleBaseStrategy.sol\":{\"keccak256\":\"0x1ec79d6cd3e471bddb18277b2f33db5e56f33dbe8f4f9e4ffa30f1a11ad3fcd1\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://bf17e9521e75d8320d101b20ab4422e7e832f38ed00fc1fd0bc80c526c5b358f\",\"dweb:/ipfs/QmfQ2yEhgU1GVEWVrVUJqjvnSWqtB9KamNvDbLqcWW4qkk\"]},\"25_27_ITempleStrategy.sol\":{\"keccak256\":\"0xba3a25785e50de9a5497d838a16f09dd051d2cd0ae7e4b0bbbfd65b26bdb715e\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://8c1769dace4a9977b7e021d2042ed9cd3caf124a726417791c52f111575a44d5\",\"dweb:/ipfs/QmfNz3REQxsqRet4Hio2CWTTSRzoyYP2GX8ySNLk9LHRAU\"]}},\"version\":1}","userdoc":{"kind":"user","methods":{"acceptExecutor()":{"notice":"Caller accepts the role as new Executor. Can only be called by the proposed executor"},"acceptRescuer()":{"notice":"Caller accepts the role as new Rescuer. Can only be called by the proposed rescuer"},"apiVersion()":{"notice":"API version to help with future integrations/migrations"},"automatedShutdown(bytes)":{"notice":"The strategy executor can shutdown this strategy, only after Executors have marked the strategy as `isShuttingDown` in the TRV. This should handle all liquidations and send all funds back to the TRV, and will then call `TRV.shutdown()` to apply the shutdown."},"checkpointAssetBalances()":{"notice":"By default, we assume there is no checkpoint required for a strategy In which case it would be identical to just calling `latestAssetBalances()` A strategy can override this if on-chain functions are required to run to force balance updates first - eg checkpoint DSR"},"debtCeilingUpdated(address,uint256)":{"notice":"A hook which is called by the Treasury Reserves Vault when the debt ceiling for this strategy is updated"},"executor()":{"notice":"A set of addresses which are approved to execute normal operations on behalf of the DAO."},"explicitFunctionAccess(address,bytes4)":{"notice":"Explicit approval for an address to execute a function. allowedCaller => function selector => true/false"},"inRescueMode()":{"notice":"Under normal circumstances, rescuers don't have access to admin/operational functions. However when rescue mode is enabled (by rescuers or executors), they claim the access rights."},"latestAssetBalances()":{"notice":"The latest checkpoint of each asset balance this strategy holds."},"manualAdjustments()":{"notice":"Get the set of manual asset balance deltas, set by the Strategy Executor."},"populateShutdownData(bytes)":{"notice":"populate data required for shutdown - for example quote data. This may/may not be required in order to do a shutdown. For example to avoid frontrunning/MEV quotes to exit an LP position may need to be obtained off-chain prior to the actual shutdown. Each strategy can abi encode params that it requires."},"proposeNewExecutor(address)":{"notice":"Proposes a new Executor. Can only be called by the current executor or resucer (if in resuce mode)"},"proposeNewRescuer(address)":{"notice":"Proposes a new Rescuer. Can only be called by the current rescuer."},"recoverToken(address,address,uint256)":{"notice":"Executors can recover any token from the strategy."},"rescuer()":{"notice":"A set of addresses which are approved to execute emergency operations."},"setExplicitAccess(address,(bytes4,bool)[])":{"notice":"Grant `allowedCaller` the rights to call the function selectors in the access list."},"setManualAdjustments((address,int256)[])":{"notice":"The Strategy Executor may set manual adjustments to asset balances if they cannot be reported automatically - eg a staked position with no receipt token."},"setRescueMode(bool)":{"notice":"Set the contract into or out of rescue mode. Only the rescuers or executors are allowed to set."},"setTokenAllowance(address,address,uint256)":{"notice":"Executors can set the allowance of any token spend from the strategy"},"setTreasuryReservesVault(address)":{"notice":"Executors can set the address of the treasury reserves vault."},"strategyName()":{"notice":"A human readable name of the strategy"},"strategyVersion()":{"notice":"The version of this particular strategy"},"treasuryReservesVault()":{"notice":"The address of the treasury reserves vault."}},"notice":"The Temple Strategy is responsible for borrowing funds from the Treasury Reserve Vault and generating positive equity from that capital.  When it borrows funds it is issued systematic debt (`dToken`) which accrues interest at a common base rate plus a risk premium rate specific to this strategy, agreed and set by governance. The strategy reports it's assets (total available funds in investments) in order to report the equity of the strategy -- ie a comparable performance metric across all strategy's. The Strategy Executor role is responsible for applying the capital within the strategy, and can borrow funds from the TRV up to a cap (set by governance). Similarly the Executor is responsible for operations - borrow/repay/liquidate/etc. The strategy can be shutdown - first by Executors giving the go-ahead by setting it to `isShuttingDown` in the TRV and then the Executor can either:   a/ Graceful shutdown, where any liquidation can happen automatically   b/ Force shutdown, where the Executor needs to handle any liquidations manually and send funds back to Treasury first.","version":1}}},"26_27_TempleElevatedAccess.sol":{"TempleElevatedAccess":{"abi":[{"inputs":[],"name":"InvalidAccess","type":"error"},{"inputs":[],"name":"InvalidAddress","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"bytes4","name":"fnSelector","type":"bytes4"},{"indexed":true,"internalType":"bool","name":"value","type":"bool"}],"name":"ExplicitAccessSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldExecutor","type":"address"},{"indexed":true,"internalType":"address","name":"newExecutor","type":"address"}],"name":"NewExecutorAccepted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldExecutor","type":"address"},{"indexed":true,"internalType":"address","name":"oldProposedExecutor","type":"address"},{"indexed":true,"internalType":"address","name":"newProposedExecutor","type":"address"}],"name":"NewExecutorProposed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldRescuer","type":"address"},{"indexed":true,"internalType":"address","name":"newRescuer","type":"address"}],"name":"NewRescuerAccepted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldRescuer","type":"address"},{"indexed":true,"internalType":"address","name":"oldProposedRescuer","type":"address"},{"indexed":true,"internalType":"address","name":"newProposedRescuer","type":"address"}],"name":"NewRescuerProposed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bool","name":"value","type":"bool"}],"name":"RescueModeSet","type":"event"},{"inputs":[],"name":"acceptExecutor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"acceptRescuer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"executor","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"bytes4","name":"","type":"bytes4"}],"name":"explicitFunctionAccess","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"inRescueMode","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"proposeNewExecutor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"proposeNewRescuer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rescuer","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"allowedCaller","type":"address"},{"components":[{"internalType":"bytes4","name":"fnSelector","type":"bytes4"},{"internalType":"bool","name":"allowed","type":"bool"}],"internalType":"struct ITempleElevatedAccess.ExplicitAccess[]","name":"access","type":"tuple[]"}],"name":"setExplicitAccess","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"value","type":"bool"}],"name":"setRescueMode","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"setExplicitAccess(address,(bytes4,bool)[])":{"details":"fnSelector == bytes4(keccak256(\"fn(argType1,argType2,...)\"))"}},"stateVariables":{"_proposedNewRescuer":{"details":"Track proposed rescuer/executor"}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidAccess\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"fnSelector\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"ExplicitAccessSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldExecutor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newExecutor\",\"type\":\"address\"}],\"name\":\"NewExecutorAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldExecutor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldProposedExecutor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newProposedExecutor\",\"type\":\"address\"}],\"name\":\"NewExecutorProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRescuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRescuer\",\"type\":\"address\"}],\"name\":\"NewRescuerAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRescuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldProposedRescuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newProposedRescuer\",\"type\":\"address\"}],\"name\":\"NewRescuerProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"RescueModeSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptRescuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"explicitFunctionAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inRescueMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"proposeNewExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"proposeNewRescuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescuer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"allowedCaller\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"fnSelector\",\"type\":\"bytes4\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"internalType\":\"struct ITempleElevatedAccess.ExplicitAccess[]\",\"name\":\"access\",\"type\":\"tuple[]\"}],\"name\":\"setExplicitAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setRescueMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"setExplicitAccess(address,(bytes4,bool)[])\":{\"details\":\"fnSelector == bytes4(keccak256(\\\"fn(argType1,argType2,...)\\\"))\"}},\"stateVariables\":{\"_proposedNewRescuer\":{\"details\":\"Track proposed rescuer/executor\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptExecutor()\":{\"notice\":\"Caller accepts the role as new Executor. Can only be called by the proposed executor\"},\"acceptRescuer()\":{\"notice\":\"Caller accepts the role as new Rescuer. Can only be called by the proposed rescuer\"},\"executor()\":{\"notice\":\"The address which is approved to execute normal operations on behalf of the DAO.\"},\"explicitFunctionAccess(address,bytes4)\":{\"notice\":\"Explicit approval for an address to execute a function. allowedCaller => function selector => true/false\"},\"inRescueMode()\":{\"notice\":\"Under normal circumstances, rescuers don't have access to admin/operational functions. However when rescue mode is enabled (by rescuers or executors), they claim the access rights.\"},\"proposeNewExecutor(address)\":{\"notice\":\"Proposes a new Executor. Can only be called by the current executor or rescuer (if in resuce mode)\"},\"proposeNewRescuer(address)\":{\"notice\":\"Proposes a new Rescuer. Can only be called by the current rescuer.\"},\"rescuer()\":{\"notice\":\"The address which is approved to execute emergency operations.\"},\"setExplicitAccess(address,(bytes4,bool)[])\":{\"notice\":\"Grant `allowedCaller` the rights to call the function selectors in the access list.\"},\"setRescueMode(bool)\":{\"notice\":\"Set the contract into or out of rescue mode. Only the rescuers are allowed to set.\"}},\"notice\":\"Inherit to add Executor and Rescuer roles for DAO elevated access.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"26_27_TempleElevatedAccess.sol\":\"TempleElevatedAccess\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":false}},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"08_27_CommonEventsAndErrors.sol\":{\"keccak256\":\"0x8122d02f4c35665a555ac910315f16b56d9eab82c57ad39fc8382596e39ec91f\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://f0db50a1459d9473213f5c3147c1d0f7b57bda564b5992978a9d5894b7bda6da\",\"dweb:/ipfs/Qmbo1KWjGbdMg6iazBrwFbvuPJ2Jv5fKfy1HEsmZFXQCQM\"]},\"18_27_ITempleElevatedAccess.sol\":{\"keccak256\":\"0xe5a19949ec514acf13d40c2dcda3356e803d93ed0cb5d8b76825c99250a234f4\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://ed239ebf015364133360cbeebc6193d630b32bcead90c832765d4e39b3727ee8\",\"dweb:/ipfs/QmZLQaTrraMRg7aGSyrFVh2dTKaC9Ua5LY1ZF53zbpndtu\"]},\"26_27_TempleElevatedAccess.sol\":{\"keccak256\":\"0x962e879c4006014ae040e2e99b2687989344106c87b222c4542998736cf50366\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://87a817390f4f05881c158f580d67f0faf3c8a1cef12e3ffe0c01852d6209283a\",\"dweb:/ipfs/QmTzQ5jjD8Gc9WDcqBxztnCuvLE6T2kXKjKkaN9TF8BSG2\"]}},\"version\":1}","userdoc":{"kind":"user","methods":{"acceptExecutor()":{"notice":"Caller accepts the role as new Executor. Can only be called by the proposed executor"},"acceptRescuer()":{"notice":"Caller accepts the role as new Rescuer. Can only be called by the proposed rescuer"},"executor()":{"notice":"The address which is approved to execute normal operations on behalf of the DAO."},"explicitFunctionAccess(address,bytes4)":{"notice":"Explicit approval for an address to execute a function. allowedCaller => function selector => true/false"},"inRescueMode()":{"notice":"Under normal circumstances, rescuers don't have access to admin/operational functions. However when rescue mode is enabled (by rescuers or executors), they claim the access rights."},"proposeNewExecutor(address)":{"notice":"Proposes a new Executor. Can only be called by the current executor or rescuer (if in resuce mode)"},"proposeNewRescuer(address)":{"notice":"Proposes a new Rescuer. Can only be called by the current rescuer."},"rescuer()":{"notice":"The address which is approved to execute emergency operations."},"setExplicitAccess(address,(bytes4,bool)[])":{"notice":"Grant `allowedCaller` the rights to call the function selectors in the access list."},"setRescueMode(bool)":{"notice":"Set the contract into or out of rescue mode. Only the rescuers are allowed to set."}},"notice":"Inherit to add Executor and Rescuer roles for DAO elevated access.","version":1}}},"27_27_AbstractStrategy.sol":{"AbstractStrategy":{"abi":[{"inputs":[],"name":"InvalidAccess","type":"error"},{"inputs":[],"name":"InvalidAddress","type":"error"},{"inputs":[{"internalType":"string","name":"expected","type":"string"},{"internalType":"string","name":"actual","type":"string"}],"name":"InvalidVersion","type":"error"},{"inputs":[{"internalType":"address","name":"caller","type":"address"}],"name":"OnlyTreasuryReserveVault","type":"error"},{"anonymous":false,"inputs":[{"components":[{"internalType":"address","name":"asset","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"}],"indexed":false,"internalType":"struct ITempleStrategy.AssetBalance[]","name":"assetBalances","type":"tuple[]"}],"name":"AssetBalancesCheckpoint","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"bytes4","name":"fnSelector","type":"bytes4"},{"indexed":true,"internalType":"bool","name":"value","type":"bool"}],"name":"ExplicitAccessSet","type":"event"},{"anonymous":false,"inputs":[{"components":[{"internalType":"address","name":"asset","type":"address"},{"internalType":"int256","name":"delta","type":"int256"}],"indexed":false,"internalType":"struct ITempleStrategy.AssetBalanceDelta[]","name":"adjustments","type":"tuple[]"}],"name":"ManualAdjustmentsSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldExecutor","type":"address"},{"indexed":true,"internalType":"address","name":"newExecutor","type":"address"}],"name":"NewExecutorAccepted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldExecutor","type":"address"},{"indexed":true,"internalType":"address","name":"oldProposedExecutor","type":"address"},{"indexed":true,"internalType":"address","name":"newProposedExecutor","type":"address"}],"name":"NewExecutorProposed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldRescuer","type":"address"},{"indexed":true,"internalType":"address","name":"newRescuer","type":"address"}],"name":"NewRescuerAccepted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldRescuer","type":"address"},{"indexed":true,"internalType":"address","name":"oldProposedRescuer","type":"address"},{"indexed":true,"internalType":"address","name":"newProposedRescuer","type":"address"}],"name":"NewRescuerProposed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bool","name":"value","type":"bool"}],"name":"RescueModeSet","type":"event"},{"anonymous":false,"inputs":[],"name":"Shutdown","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"TokenAllowanceSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"trv","type":"address"}],"name":"TreasuryReservesVaultSet","type":"event"},{"inputs":[],"name":"acceptExecutor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"acceptRescuer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"apiVersion","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"shutdownParamsData","type":"bytes"}],"name":"automatedShutdown","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"checkpointAssetBalances","outputs":[{"components":[{"internalType":"address","name":"asset","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"}],"internalType":"struct ITempleStrategy.AssetBalance[]","name":"","type":"tuple[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"uint256","name":"newDebtCeiling","type":"uint256"}],"name":"debtCeilingUpdated","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"executor","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"bytes4","name":"","type":"bytes4"}],"name":"explicitFunctionAccess","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"inRescueMode","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"latestAssetBalances","outputs":[{"components":[{"internalType":"address","name":"asset","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"}],"internalType":"struct ITempleStrategy.AssetBalance[]","name":"assetBalances","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"manualAdjustments","outputs":[{"components":[{"internalType":"address","name":"asset","type":"address"},{"internalType":"int256","name":"delta","type":"int256"}],"internalType":"struct ITempleStrategy.AssetBalanceDelta[]","name":"adjustments","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"populateParamsData","type":"bytes"}],"name":"populateShutdownData","outputs":[{"internalType":"bytes","name":"shutdownParamsData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"proposeNewExecutor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"proposeNewRescuer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"recoverToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rescuer","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"allowedCaller","type":"address"},{"components":[{"internalType":"bytes4","name":"fnSelector","type":"bytes4"},{"internalType":"bool","name":"allowed","type":"bool"}],"internalType":"struct ITempleElevatedAccess.ExplicitAccess[]","name":"access","type":"tuple[]"}],"name":"setExplicitAccess","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"asset","type":"address"},{"internalType":"int256","name":"delta","type":"int256"}],"internalType":"struct ITempleStrategy.AssetBalanceDelta[]","name":"adjustments","type":"tuple[]"}],"name":"setManualAdjustments","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"value","type":"bool"}],"name":"setRescueMode","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"setTokenAllowance","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_trv","type":"address"}],"name":"setTreasuryReservesVault","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"strategyName","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"strategyVersion","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"treasuryReservesVault","outputs":[{"internalType":"contract ITreasuryReservesVault","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Abstract base contract implementation of a Temple Strategy.  All strategies should inherit this.","kind":"dev","methods":{"automatedShutdown(bytes)":{"details":"Each strategy may require a different set of params to do the shutdown. It can abi encode/decode that data off chain, or by first calling populateShutdownData()"},"debtCeilingUpdated(address,uint256)":{"details":"by default it's a no-op unless the strategy implements `_debtCeilingUpdated()`"},"latestAssetBalances()":{"details":"The asset value may be stale at any point in time, depending on the strategy.  It may optionally implement `checkpointAssetBalances()` in order to update those balances."},"populateShutdownData(bytes)":{"details":"Intentionally not a view - as some quotes require a non-view (eg Balancer) The intention is for clients to call as 'static', like a view"},"setExplicitAccess(address,(bytes4,bool)[])":{"details":"fnSelector == bytes4(keccak256(\"fn(argType1,argType2,...)\"))"}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidAccess\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"expected\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"actual\",\"type\":\"string\"}],\"name\":\"InvalidVersion\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"OnlyTreasuryReserveVault\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ITempleStrategy.AssetBalance[]\",\"name\":\"assetBalances\",\"type\":\"tuple[]\"}],\"name\":\"AssetBalancesCheckpoint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"fnSelector\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"ExplicitAccessSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"delta\",\"type\":\"int256\"}],\"indexed\":false,\"internalType\":\"struct ITempleStrategy.AssetBalanceDelta[]\",\"name\":\"adjustments\",\"type\":\"tuple[]\"}],\"name\":\"ManualAdjustmentsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldExecutor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newExecutor\",\"type\":\"address\"}],\"name\":\"NewExecutorAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldExecutor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldProposedExecutor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newProposedExecutor\",\"type\":\"address\"}],\"name\":\"NewExecutorProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRescuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRescuer\",\"type\":\"address\"}],\"name\":\"NewRescuerAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRescuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldProposedRescuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newProposedRescuer\",\"type\":\"address\"}],\"name\":\"NewRescuerProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"RescueModeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Shutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenAllowanceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trv\",\"type\":\"address\"}],\"name\":\"TreasuryReservesVaultSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptRescuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apiVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"shutdownParamsData\",\"type\":\"bytes\"}],\"name\":\"automatedShutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointAssetBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct ITempleStrategy.AssetBalance[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newDebtCeiling\",\"type\":\"uint256\"}],\"name\":\"debtCeilingUpdated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"explicitFunctionAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inRescueMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAssetBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct ITempleStrategy.AssetBalance[]\",\"name\":\"assetBalances\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualAdjustments\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"delta\",\"type\":\"int256\"}],\"internalType\":\"struct ITempleStrategy.AssetBalanceDelta[]\",\"name\":\"adjustments\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"populateParamsData\",\"type\":\"bytes\"}],\"name\":\"populateShutdownData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"shutdownParamsData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"proposeNewExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"proposeNewRescuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescuer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"allowedCaller\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"fnSelector\",\"type\":\"bytes4\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"internalType\":\"struct ITempleElevatedAccess.ExplicitAccess[]\",\"name\":\"access\",\"type\":\"tuple[]\"}],\"name\":\"setExplicitAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"delta\",\"type\":\"int256\"}],\"internalType\":\"struct ITempleStrategy.AssetBalanceDelta[]\",\"name\":\"adjustments\",\"type\":\"tuple[]\"}],\"name\":\"setManualAdjustments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setRescueMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setTokenAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trv\",\"type\":\"address\"}],\"name\":\"setTreasuryReservesVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryReservesVault\",\"outputs\":[{\"internalType\":\"contract ITreasuryReservesVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Abstract base contract implementation of a Temple Strategy.  All strategies should inherit this.\",\"kind\":\"dev\",\"methods\":{\"automatedShutdown(bytes)\":{\"details\":\"Each strategy may require a different set of params to do the shutdown. It can abi encode/decode that data off chain, or by first calling populateShutdownData()\"},\"debtCeilingUpdated(address,uint256)\":{\"details\":\"by default it's a no-op unless the strategy implements `_debtCeilingUpdated()`\"},\"latestAssetBalances()\":{\"details\":\"The asset value may be stale at any point in time, depending on the strategy.  It may optionally implement `checkpointAssetBalances()` in order to update those balances.\"},\"populateShutdownData(bytes)\":{\"details\":\"Intentionally not a view - as some quotes require a non-view (eg Balancer) The intention is for clients to call as 'static', like a view\"},\"setExplicitAccess(address,(bytes4,bool)[])\":{\"details\":\"fnSelector == bytes4(keccak256(\\\"fn(argType1,argType2,...)\\\"))\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptExecutor()\":{\"notice\":\"Caller accepts the role as new Executor. Can only be called by the proposed executor\"},\"acceptRescuer()\":{\"notice\":\"Caller accepts the role as new Rescuer. Can only be called by the proposed rescuer\"},\"apiVersion()\":{\"notice\":\"Track the deployed version of this contract. \"},\"automatedShutdown(bytes)\":{\"notice\":\"The strategy executor can shutdown this strategy, only after Executors have marked the strategy as `isShuttingDown` in the TRV. This should handle all liquidations and send all funds back to the TRV, and will then call `TRV.shutdown()` to apply the shutdown.\"},\"checkpointAssetBalances()\":{\"notice\":\"By default, we assume there is no checkpoint required for a strategy In which case it would be identical to just calling `latestAssetBalances()` A strategy can override this if on-chain functions are required to run to force balance updates first - eg checkpoint DSR\"},\"debtCeilingUpdated(address,uint256)\":{\"notice\":\"A hook which is called by the Treasury Reserves Vault when the debt ceiling for this strategy is updated\"},\"executor()\":{\"notice\":\"The address which is approved to execute normal operations on behalf of the DAO.\"},\"explicitFunctionAccess(address,bytes4)\":{\"notice\":\"Explicit approval for an address to execute a function. allowedCaller => function selector => true/false\"},\"inRescueMode()\":{\"notice\":\"Under normal circumstances, rescuers don't have access to admin/operational functions. However when rescue mode is enabled (by rescuers or executors), they claim the access rights.\"},\"latestAssetBalances()\":{\"notice\":\"The latest checkpoint of each asset balance this strategy holds.\"},\"manualAdjustments()\":{\"notice\":\"Get the set of manual adjustment deltas, set by the Strategy Executor.\"},\"populateShutdownData(bytes)\":{\"notice\":\"populate data required for shutdown - for example quote data. This may/may not be required in order to do a shutdown. For example to avoid frontrunning/MEV quotes to exit an LP position may need to be obtained off-chain prior to the actual shutdown. Each strategy can abi encode params that it requires.\"},\"proposeNewExecutor(address)\":{\"notice\":\"Proposes a new Executor. Can only be called by the current executor or rescuer (if in resuce mode)\"},\"proposeNewRescuer(address)\":{\"notice\":\"Proposes a new Rescuer. Can only be called by the current rescuer.\"},\"recoverToken(address,address,uint256)\":{\"notice\":\"Executors can recover any token from the strategy.\"},\"rescuer()\":{\"notice\":\"The address which is approved to execute emergency operations.\"},\"setExplicitAccess(address,(bytes4,bool)[])\":{\"notice\":\"Grant `allowedCaller` the rights to call the function selectors in the access list.\"},\"setManualAdjustments((address,int256)[])\":{\"notice\":\"The Strategy Executor may set manual adjustments to asset balances if they cannot be reported automatically - eg a staked position with no receipt token.\"},\"setRescueMode(bool)\":{\"notice\":\"Set the contract into or out of rescue mode. Only the rescuers are allowed to set.\"},\"setTokenAllowance(address,address,uint256)\":{\"notice\":\"Executors can set the allowance of any token spend from the strategy\"},\"setTreasuryReservesVault(address)\":{\"notice\":\"Executors can set the address of the treasury reserves vault.\"},\"strategyName()\":{\"notice\":\"A human readable name of the strategy\"},\"strategyVersion()\":{\"notice\":\"The version of this particular strategy\"},\"treasuryReservesVault()\":{\"notice\":\"The address of the treasury reserves vault.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"27_27_AbstractStrategy.sol\":\"AbstractStrategy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":false}},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"02_27_IERC20Metadata.sol\":{\"keccak256\":\"0xa25ab9a66cae9ca6a3a4665ca798366110e116b34ecee4b840f95a40b0243f49\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a701f9d7ca720f9fb194eb95d08a364605acf68b8e69d50ef63e11ea6b508460\",\"dweb:/ipfs/QmWYXJSGnmX48yqkMiJHxwQLBn4hdMDVbga9QvCmUWgnRi\"]},\"03_27_IERC20Permit.sol\":{\"keccak256\":\"0xc8bf75ec561e3a6bc96dfa960474861101cc4470eaa4cc230e62e2109da98ffb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://05f5d1f6f034cbccdc135d7af4467c724d4e3cb2a2059d0710c73e3e8b3546fd\",\"dweb:/ipfs/QmZ67kCexxWwCLLozFTkbL3JJNPYdPXmYf6ry6rTJtM1hW\"]},\"04_27_IERC20.sol\":{\"keccak256\":\"0x3cedce2cd7eacaae0bc44842b12b842e38aaa2add3f660bfca6c3dfa88542fe2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5b5f40ecf34ab169edc109702d94db1c4f1e71c467cfeb077879694d681e1ba8\",\"dweb:/ipfs/QmWF8AMSAbaxbqp2ViuXQnzyPbuiPPNriaBZ5Lh7o1LmCH\"]},\"05_27_SafeERC20.sol\":{\"keccak256\":\"0xa7dd0b56447a17e3715ad7aa4fea3e816ab08ee589c72fd07b559d75ceebcdbd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://044d5da925a1fac55e604ae2805351d010cf7e135693d6b36347dc536f9d9b4e\",\"dweb:/ipfs/QmTUdweXA7LC5Q4fYqze3FtYrX5d6nsaRABxU1Gp3dy3LE\"]},\"06_27_Address.sol\":{\"keccak256\":\"0xc85130d28a00a83610c70ae0891fc036c4167fbfc41846baca77ffa1487b7903\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://008b7d115a008ae33d349451b26ac20c81090720ab29c4fb5fd4cb97794331c3\",\"dweb:/ipfs/QmSpEvrtE11EknJNz81RGwqZTYUC7tFAp3YTwnPgCiEvPR\"]},\"07_27_EnumerableSet.sol\":{\"keccak256\":\"0xacdc138ae0950e019d111bf32ee85aa70a3dcc582855a8e36a87abf98f5897d4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec90543eed2d8cca1bd9c17e24fddba77911df9b8a80f873b32193d3fd071921\",\"dweb:/ipfs/QmS5yELvgfx1pZB9rpWJV8CQ5AnPQ2jJEhzpwjqwqDJw73\"]},\"08_27_CommonEventsAndErrors.sol\":{\"keccak256\":\"0x8122d02f4c35665a555ac910315f16b56d9eab82c57ad39fc8382596e39ec91f\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://f0db50a1459d9473213f5c3147c1d0f7b57bda564b5992978a9d5894b7bda6da\",\"dweb:/ipfs/Qmbo1KWjGbdMg6iazBrwFbvuPJ2Jv5fKfy1HEsmZFXQCQM\"]},\"18_27_ITempleElevatedAccess.sol\":{\"keccak256\":\"0xe5a19949ec514acf13d40c2dcda3356e803d93ed0cb5d8b76825c99250a234f4\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://ed239ebf015364133360cbeebc6193d630b32bcead90c832765d4e39b3727ee8\",\"dweb:/ipfs/QmZLQaTrraMRg7aGSyrFVh2dTKaC9Ua5LY1ZF53zbpndtu\"]},\"21_27_ITempleDebtToken.sol\":{\"keccak256\":\"0x9b9bef93b388da13ea8a3903a6b172ee0d7785559f9e8b39c153c238f4081281\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://7953a23b36d8f7fb50d05145b26bea9d411b5ec2b0849f95e1a82e1d4922940e\",\"dweb:/ipfs/QmXSt4awrTaDcs3r7Y2q7NBRi3vY3sbvESnPBc4PZb7sNL\"]},\"22_27_ITreasuryPriceIndexOracle.sol\":{\"keccak256\":\"0x208f4d65ae984c3d51f7bc0fb9801b987ce8e27e19e289d7b3e2de6933928c9e\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://9641530ca07f12d061c63c238e316176d11aaa22d7c00def1ecf070d9f9666e3\",\"dweb:/ipfs/QmdhgtiSK8oFYcBTRhfP7yRez6iSHShctn2bBzQX5VE6JE\"]},\"23_27_ITreasuryReservesVault.sol\":{\"keccak256\":\"0xd4f7ec3bf3176adf8fae61cb877b64edcca2c505307dfb10f891c8a7bcaf7db4\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://1dc5adf21fb220f3f981cad42c075bc34799507af404e9c15938dd11e22cac00\",\"dweb:/ipfs/QmbWgahn5ty784oniZjXGfG29zQqQLf7jhHmu8cdKHzNn1\"]},\"24_27_ITempleBaseStrategy.sol\":{\"keccak256\":\"0x1ec79d6cd3e471bddb18277b2f33db5e56f33dbe8f4f9e4ffa30f1a11ad3fcd1\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://bf17e9521e75d8320d101b20ab4422e7e832f38ed00fc1fd0bc80c526c5b358f\",\"dweb:/ipfs/QmfQ2yEhgU1GVEWVrVUJqjvnSWqtB9KamNvDbLqcWW4qkk\"]},\"25_27_ITempleStrategy.sol\":{\"keccak256\":\"0xba3a25785e50de9a5497d838a16f09dd051d2cd0ae7e4b0bbbfd65b26bdb715e\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://8c1769dace4a9977b7e021d2042ed9cd3caf124a726417791c52f111575a44d5\",\"dweb:/ipfs/QmfNz3REQxsqRet4Hio2CWTTSRzoyYP2GX8ySNLk9LHRAU\"]},\"26_27_TempleElevatedAccess.sol\":{\"keccak256\":\"0x962e879c4006014ae040e2e99b2687989344106c87b222c4542998736cf50366\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://87a817390f4f05881c158f580d67f0faf3c8a1cef12e3ffe0c01852d6209283a\",\"dweb:/ipfs/QmTzQ5jjD8Gc9WDcqBxztnCuvLE6T2kXKjKkaN9TF8BSG2\"]},\"27_27_AbstractStrategy.sol\":{\"keccak256\":\"0x38d7e531f0eaf66e187fdf2c6aa8827caa638c37f459e67dfbf7378885adf590\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://edb6e3c6673882c24f3878cc69d52c1840dbc3cbca6a3c42940f31ed38d2fe32\",\"dweb:/ipfs/QmYSDMMskA6PZzXyBuvbSM9eESLp3ukawaXaCaPPQrA4to\"]}},\"version\":1}","userdoc":{"kind":"user","methods":{"acceptExecutor()":{"notice":"Caller accepts the role as new Executor. Can only be called by the proposed executor"},"acceptRescuer()":{"notice":"Caller accepts the role as new Rescuer. Can only be called by the proposed rescuer"},"apiVersion()":{"notice":"Track the deployed version of this contract. "},"automatedShutdown(bytes)":{"notice":"The strategy executor can shutdown this strategy, only after Executors have marked the strategy as `isShuttingDown` in the TRV. This should handle all liquidations and send all funds back to the TRV, and will then call `TRV.shutdown()` to apply the shutdown."},"checkpointAssetBalances()":{"notice":"By default, we assume there is no checkpoint required for a strategy In which case it would be identical to just calling `latestAssetBalances()` A strategy can override this if on-chain functions are required to run to force balance updates first - eg checkpoint DSR"},"debtCeilingUpdated(address,uint256)":{"notice":"A hook which is called by the Treasury Reserves Vault when the debt ceiling for this strategy is updated"},"executor()":{"notice":"The address which is approved to execute normal operations on behalf of the DAO."},"explicitFunctionAccess(address,bytes4)":{"notice":"Explicit approval for an address to execute a function. allowedCaller => function selector => true/false"},"inRescueMode()":{"notice":"Under normal circumstances, rescuers don't have access to admin/operational functions. However when rescue mode is enabled (by rescuers or executors), they claim the access rights."},"latestAssetBalances()":{"notice":"The latest checkpoint of each asset balance this strategy holds."},"manualAdjustments()":{"notice":"Get the set of manual adjustment deltas, set by the Strategy Executor."},"populateShutdownData(bytes)":{"notice":"populate data required for shutdown - for example quote data. This may/may not be required in order to do a shutdown. For example to avoid frontrunning/MEV quotes to exit an LP position may need to be obtained off-chain prior to the actual shutdown. Each strategy can abi encode params that it requires."},"proposeNewExecutor(address)":{"notice":"Proposes a new Executor. Can only be called by the current executor or rescuer (if in resuce mode)"},"proposeNewRescuer(address)":{"notice":"Proposes a new Rescuer. Can only be called by the current rescuer."},"recoverToken(address,address,uint256)":{"notice":"Executors can recover any token from the strategy."},"rescuer()":{"notice":"The address which is approved to execute emergency operations."},"setExplicitAccess(address,(bytes4,bool)[])":{"notice":"Grant `allowedCaller` the rights to call the function selectors in the access list."},"setManualAdjustments((address,int256)[])":{"notice":"The Strategy Executor may set manual adjustments to asset balances if they cannot be reported automatically - eg a staked position with no receipt token."},"setRescueMode(bool)":{"notice":"Set the contract into or out of rescue mode. Only the rescuers are allowed to set."},"setTokenAllowance(address,address,uint256)":{"notice":"Executors can set the allowance of any token spend from the strategy"},"setTreasuryReservesVault(address)":{"notice":"Executors can set the address of the treasury reserves vault."},"strategyName()":{"notice":"A human readable name of the strategy"},"strategyVersion()":{"notice":"The version of this particular strategy"},"treasuryReservesVault()":{"notice":"The address of the treasury reserves vault."}},"version":1}}}},"errors":[{"component":"general","formattedMessage":"YulException: Variable _1 is 3 slot(s) too deep inside the stack. Stack too deep. Try compiling with `--via-ir` (cli) or the equivalent `viaIR: true` (standard JSON) while enabling the optimizer. Otherwise, try removing local variables.\n\n","message":"Yul exception:Variable _1 is 3 slot(s) too deep inside the stack. Stack too deep. Try compiling with `--via-ir` (cli) or the equivalent `viaIR: true` (standard JSON) while enabling the optimizer. Otherwise, try removing local variables.","severity":"error","type":"YulException"}],"sources":{"01_27_RamosStrategy.sol":{"id":0},"02_27_IERC20Metadata.sol":{"id":1},"03_27_IERC20Permit.sol":{"id":2},"04_27_IERC20.sol":{"id":3},"05_27_SafeERC20.sol":{"id":4},"06_27_Address.sol":{"id":5},"07_27_EnumerableSet.sol":{"id":6},"08_27_CommonEventsAndErrors.sol":{"id":7},"09_27_IBalancerPoolHelper.sol":{"id":8},"10_27_IRamosTokenVault.sol":{"id":9},"11_27_IAuraStaking.sol":{"id":10},"12_27_IRamos.sol":{"id":11},"13_27_ITempleERC20Token.sol":{"id":12},"14_27_IAuraBooster.sol":{"id":13},"15_27_IBalancerBptToken.sol":{"id":14},"16_27_IBalancerHelpers.sol":{"id":15},"17_27_IBalancerVault.sol":{"id":16},"18_27_ITempleElevatedAccess.sol":{"id":17},"19_27_ITempleCircuitBreaker.sol":{"id":18},"20_27_ITempleCircuitBreakerProxy.sol":{"id":19},"21_27_ITempleDebtToken.sol":{"id":20},"22_27_ITreasuryPriceIndexOracle.sol":{"id":21},"23_27_ITreasuryReservesVault.sol":{"id":22},"24_27_ITempleBaseStrategy.sol":{"id":23},"25_27_ITempleStrategy.sol":{"id":24},"26_27_TempleElevatedAccess.sol":{"id":25},"27_27_AbstractStrategy.sol":{"id":26}}}

> stderr:
