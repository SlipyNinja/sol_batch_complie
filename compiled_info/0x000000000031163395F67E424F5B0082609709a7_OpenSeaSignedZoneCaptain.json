{"contracts": {"01_07_OpenSeaSignedZoneCaptain.sol": {"OpenSeaSignedZoneCaptain": {"abi": [{"inputs": [{"internalType": "address", "name": "signedZoneController", "type": "address"}], "stateMutability": "nonpayable", "type": "constructor"}, {"inputs": [], "name": "CallerIsNotNewPotentialOwner", "type": "error"}, {"inputs": [], "name": "CallerIsNotOwner", "type": "error"}, {"inputs": [], "name": "CallerIsNotOwnerOrRotator", "type": "error"}, {"inputs": [], "name": "CallerIsNotOwnerOrSanitizer", "type": "error"}, {"inputs": [], "name": "InitialOwnerIsNullAddress", "type": "error"}, {"inputs": [], "name": "InvalidDeployer", "type": "error"}, {"inputs": [{"internalType": "address", "name": "signedZoneController", "type": "address"}], "name": "InvalidSignedZoneController", "type": "error"}, {"inputs": [{"internalType": "address", "name": "newPotentialOwner", "type": "address"}], "name": "NewPotentialOwnerAlreadySet", "type": "error"}, {"inputs": [], "name": "NewPotentialOwnerIsNullAddress", "type": "error"}, {"inputs": [], "name": "NoPotentialOwnerCurrentlySet", "type": "error"}, {"inputs": [{"internalType": "address", "name": "owner", "type": "address"}], "name": "OwnerAlreadySet", "type": "error"}, {"inputs": [], "name": "RotatorCannotBeNullAddress", "type": "error"}, {"inputs": [], "name": "SanitizerCannotBeNullAddress", "type": "error"}, {"anonymous": false, "inputs": [{"indexed": false, "internalType": "address", "name": "previousOwner", "type": "address"}, {"indexed": false, "internalType": "address", "name": "newOwner", "type": "address"}], "name": "OwnershipTransferred", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": false, "internalType": "address", "name": "newPotentialOwner", "type": "address"}], "name": "PotentialOwnerUpdated", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": false, "internalType": "address", "name": "newRotator", "type": "address"}], "name": "RotatorUpdated", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": false, "internalType": "address", "name": "newSanitizer", "type": "address"}], "name": "SanitizerUpdated", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": false, "internalType": "address", "name": "zone", "type": "address"}], "name": "ZoneSanitized", "type": "event"}, {"inputs": [], "name": "acceptOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "address", "name": "zone", "type": "address"}], "name": "acceptZoneOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [], "name": "cancelOwnershipTransfer", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "address", "name": "zone", "type": "address"}], "name": "cancelZoneOwnershipTransfer", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [], "name": "getRotator", "outputs": [{"internalType": "address", "name": "", "type": "address"}], "stateMutability": "view", "type": "function"}, {"inputs": [], "name": "getSanitizer", "outputs": [{"internalType": "address", "name": "", "type": "address"}], "stateMutability": "view", "type": "function"}, {"inputs": [{"internalType": "address", "name": "initialOwner", "type": "address"}, {"internalType": "address", "name": "initialRotator", "type": "address"}, {"internalType": "address", "name": "initialSanitizer", "type": "address"}, {"internalType": "string", "name": "zoneName", "type": "string"}, {"internalType": "string", "name": "apiEndpoint", "type": "string"}, {"internalType": "string", "name": "documentationURI", "type": "string"}, {"internalType": "bytes32", "name": "zoneSalt", "type": "bytes32"}], "name": "initialize", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [], "name": "owner", "outputs": [{"internalType": "address", "name": "", "type": "address"}], "stateMutability": "view", "type": "function"}, {"inputs": [], "name": "potentialOwner", "outputs": [{"internalType": "address", "name": "", "type": "address"}], "stateMutability": "view", "type": "function"}, {"inputs": [{"internalType": "address", "name": "zone", "type": "address"}, {"internalType": "address", "name": "signerToRemove", "type": "address"}, {"internalType": "address", "name": "signerToAdd", "type": "address"}], "name": "rotateSigners", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "address", "name": "zone", "type": "address"}], "name": "sanitizeSignedZone", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "address", "name": "newPotentialOwner", "type": "address"}], "name": "transferOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "address", "name": "zone", "type": "address"}, {"internalType": "address", "name": "newPotentialOwner", "type": "address"}], "name": "transferZoneOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "address", "name": "newRotator", "type": "address"}], "name": "updateRotator", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "address", "name": "newSanitizer", "type": "address"}], "name": "updateSanitizer", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "address", "name": "zone", "type": "address"}, {"internalType": "string", "name": "newApiEndpoint", "type": "string"}], "name": "updateZoneAPIEndpoint", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "address", "name": "zone", "type": "address"}, {"internalType": "string", "name": "newDocumentationURI", "type": "string"}], "name": "updateZoneDocumentationURI", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "address", "name": "zone", "type": "address"}, {"internalType": "address", "name": "signer", "type": "address"}, {"internalType": "bool", "name": "active", "type": "bool"}], "name": "updateZoneSigner", "outputs": [], "stateMutability": "nonpayable", "type": "function"}], "devdoc": {"errors": {"CallerIsNotNewPotentialOwner()": [{"details": "Revert with an error when attempting to claim ownership of the      contract with a caller that is not the current potential owner."}], "CallerIsNotOwner()": [{"details": "Revert with an error when attempting to call a function that      requires ownership with a caller that is not the owner."}], "CallerIsNotOwnerOrRotator()": [{"details": "Revert with an error when attempting to call a function that      requires the caller to be the owner or rotator of the zone."}], "CallerIsNotOwnerOrSanitizer()": [{"details": "Revert with an error when attempting to call a function that      requires the caller to be the owner or sanitizer of the zone."}], "InitialOwnerIsNullAddress()": [{"details": "Revert with an error when attempting to register an initial owner      and supplying the null address."}], "InvalidDeployer()": [{"details": "Revert with an error when attempting to deploy the contract with an      invalid deployer."}], "InvalidSignedZoneController(address)": [{"details": "Revert with an error when attempting to set a zone controller      that does not contain contract code.", "params": {"signedZoneController": "The invalid address."}}], "NewPotentialOwnerAlreadySet(address)": [{"details": "Revert with an error when attempting to set a new potential owner      that is already set."}], "NewPotentialOwnerIsNullAddress()": [{"details": "Revert with an error when attempting to register a new potential      owner and supplying the null address."}], "NoPotentialOwnerCurrentlySet()": [{"details": "Revert with an error when attempting to cancel ownership transfer      when no new potential owner is currently set."}], "OwnerAlreadySet(address)": [{"details": "Revert with an error when attempting to call a function that      requires the owner to not have been set."}], "RotatorCannotBeNullAddress()": [{"details": "Revert with an error when attempting to set the rotator      to the null address."}], "SanitizerCannotBeNullAddress()": [{"details": "Revert with an error when attempting to set the sanitizer      to the null address."}]}, "events": {"OwnershipTransferred(address,address)": {"details": "Emit an event whenever contract ownership is transferred.", "params": {"newOwner": "The new owner of the contract.", "previousOwner": "The previous owner of the contract."}}, "PotentialOwnerUpdated(address)": {"details": "Emit an event whenever the contract owner registers a new potential      owner.", "params": {"newPotentialOwner": "The new potential owner of the contract."}}, "RotatorUpdated(address)": {"details": "Emit an event when the contract owner updates the rotator.", "params": {"newRotator": "The new rotator of the contract."}}, "SanitizerUpdated(address)": {"details": "Emit an event when the contract owner updates the sanitizer.", "params": {"newSanitizer": "The new sanitizer of the contract."}}, "ZoneSanitized(address)": {"details": "Emit an event when the sanitizer sanitizes a zone.", "params": {"zone": "The zone address being sanitized."}}}, "kind": "dev", "methods": {"acceptZoneOwnership(address)": {"params": {"zone": "The zone for which to accept ownership transfer."}}, "cancelZoneOwnershipTransfer(address)": {"params": {"zone": "The zone for which to cancel ownership transfer."}}, "getRotator()": {"returns": {"_0": "The rotator address."}}, "getSanitizer()": {"returns": {"_0": "The sanitizer address."}}, "initialize(address,address,address,string,string,string,bytes32)": {"params": {"apiEndpoint": "The API endpoint of the zone being created.", "documentationURI": "The documentation URI of the zone being created.", "initialOwner": "The address to be set as the owner.", "initialRotator": "The address to be set as the rotator.", "initialSanitizer": "The address to be set as the sanitizer.", "zoneName": "The name of the zone being created.", "zoneSalt": "The salt to use when creating the zone."}}, "owner()": {"returns": {"_0": "The address of the owner."}}, "potentialOwner()": {"returns": {"_0": "The address of the potential owner."}}, "rotateSigners(address,address,address)": {"params": {"signerToAdd": "The signer to add.", "signerToRemove": "The signer to remove.", "zone": "The zone to rotate the signers for."}}, "sanitizeSignedZone(address)": {"params": {"zone": "The zone to revoke."}}, "transferOwnership(address)": {"params": {"newPotentialOwner": "The address for which to initiate ownership                          transfer to."}}, "transferZoneOwnership(address,address)": {"params": {"newPotentialOwner": "The new potential owner to set.", "zone": "The zone for which to initiate ownership                          transfer."}}, "updateRotator(address)": {"params": {"newRotator": "The new rotator of the captain."}}, "updateSanitizer(address)": {"params": {"newSanitizer": "The new sanitizer of the captain."}}, "updateZoneAPIEndpoint(address,string)": {"params": {"newApiEndpoint": "The new API endpoint.", "zone": "The signed zone to update the API endpoint for."}}, "updateZoneDocumentationURI(address,string)": {"params": {"newDocumentationURI": "The new documentation URI.", "zone": "The signed zone to update the API endpoint                            for."}}, "updateZoneSigner(address,address,bool)": {"params": {"active": "If the signer should be active or not.", "signer": "The signer to update.", "zone": "The signed zone to update the signer for."}}}, "version": 1}, "evm": {"bytecode": {"functionDebugData": {}, "generatedSources": [], "linkReferences": {}, "object": "", "opcodes": "PUSH1 0xA0 CALLVALUE PUSH2 0x15C JUMPI PUSH1 0x1F PUSH2 0x1128 CODESIZE DUP2 SWAP1 SUB SWAP2 DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT DUP5 DUP5 LT OR PUSH2 0x161 JUMPI DUP1 DUP5 SWAP3 PUSH1 0x20 SWAP5 PUSH1 0x40 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH2 0x15C JUMPI MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 DUP2 SUB PUSH2 0x15C JUMPI PUSH20 0x939C8D89EBC11FA45E576215E2353673AD0BA18A ORIGIN EQ ISZERO DUP1 PUSH2 0x13E JUMPI JUMPDEST DUP1 PUSH2 0x120 JUMPI JUMPDEST DUP1 PUSH2 0x102 JUMPI JUMPDEST PUSH2 0xF0 JUMPI EXTCODESIZE ISZERO PUSH2 0xD8 JUMPI PUSH1 0x80 MSTORE PUSH1 0x40 MLOAD PUSH2 0xFB0 SWAP1 DUP2 PUSH2 0x178 DUP3 CODECOPY PUSH1 0x80 MLOAD DUP2 DUP2 DUP2 PUSH2 0x1BD ADD MSTORE DUP2 DUP2 PUSH2 0x282 ADD MSTORE DUP2 DUP2 PUSH2 0x3F6 ADD MSTORE DUP2 DUP2 PUSH2 0x48A ADD MSTORE DUP2 DUP2 PUSH2 0x51E ADD MSTORE DUP2 DUP2 PUSH2 0x664 ADD MSTORE DUP2 DUP2 PUSH2 0x995 ADD MSTORE DUP2 DUP2 PUSH2 0xAAD ADD MSTORE PUSH2 0xB98 ADD MSTORE RETURN JUMPDEST PUSH1 0x24 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH4 0x7714CC9B PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x43C669F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP PUSH20 0x3B52AD533687CE908BA0485AC177C5FB42972962 ORIGIN EQ ISZERO PUSH2 0x7B JUMP JUMPDEST POP PUSH20 0x86D26897267711EA4B173C8C124A0A73612001DA ORIGIN EQ ISZERO PUSH2 0x75 JUMP JUMPDEST POP PUSH20 0xE80A65EB7A3018DEDA407E621EF5FB5B416678CA ORIGIN EQ ISZERO PUSH2 0x6F JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID PUSH1 0x40 PUSH1 0x80 DUP2 MSTORE PUSH1 0x4 DUP1 CALLDATASIZE LT ISZERO PUSH2 0x14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2F71567 EQ PUSH2 0xC44 JUMPI DUP1 PUSH4 0x89AB0C4 EQ PUSH2 0xC1F JUMPI DUP1 PUSH4 0xB8C0C9F EQ PUSH2 0xBF6 JUMPI DUP1 PUSH4 0x1F66010A EQ PUSH2 0xB72 JUMPI DUP1 PUSH4 0x23452B9C EQ PUSH2 0xAFD JUMPI DUP4 DUP2 PUSH4 0x2A8306E2 EQ PUSH2 0xA90 JUMPI POP DUP1 PUSH4 0x44A0B6F2 EQ PUSH2 0x84A JUMPI DUP1 PUSH4 0x5B09B370 EQ PUSH2 0x611 JUMPI DUP1 PUSH4 0x7762DF25 EQ PUSH2 0x5E8 JUMPI DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x572 JUMPI DUP4 DUP2 PUSH4 0x7DA39913 EQ PUSH2 0x501 JUMPI DUP2 PUSH4 0x8B267DEB EQ PUSH2 0x45C JUMPI DUP2 PUSH4 0x8D4FD158 EQ PUSH2 0x3B2 JUMPI POP DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x38A JUMPI DUP1 PUSH4 0x96137659 EQ PUSH2 0x361 JUMPI DUP1 PUSH4 0x9C7F3335 EQ PUSH2 0x236 JUMPI DUP4 DUP2 PUSH4 0xE7437095 EQ PUSH2 0x18F JUMPI POP PUSH4 0xF2FDE38B EQ PUSH2 0xEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x18B JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x18B JUMPI PUSH2 0x105 PUSH2 0xC69 JUMP JUMPDEST SWAP1 PUSH2 0x10E PUSH2 0xEFE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP3 DUP4 ISZERO PUSH2 0x17D JUMPI PUSH1 0x1 SLOAD SWAP3 DUP4 AND DUP1 DUP6 EQ PUSH2 0x169 JUMPI POP POP PUSH1 0x20 PUSH32 0x11A3CF439FB225BFE74225716B6774765670EC1060E3796802E62139D69974DA SWAP2 MLOAD DUP5 DUP2 MSTORE LOG1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND OR PUSH1 0x1 SSTORE DUP1 RETURN JUMPDEST PUSH1 0x24 SWAP3 MLOAD SWAP2 PUSH4 0x10AECD9 PUSH1 0xE4 SHL DUP4 MSTORE DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 MLOAD PUSH4 0x7621B061 PUSH1 0xE0 SHL DUP2 MSTORE REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST DUP1 DUP5 DUP5 CALLVALUE PUSH2 0x232 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x232 JUMPI PUSH2 0x1AB PUSH2 0xC69 JUMP JUMPDEST PUSH2 0x1B3 PUSH2 0xEFE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND DUP1 EXTCODESIZE ISZERO PUSH2 0x22E JUMPI DUP6 SWAP3 DUP4 PUSH1 0x24 SWAP3 DUP7 MLOAD SWAP8 DUP9 SWAP6 DUP7 SWAP5 PUSH4 0x7B37E561 PUSH1 0xE0 SHL DUP7 MSTORE AND SWAP1 DUP5 ADD MSTORE GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x225 JUMPI POP PUSH2 0x212 JUMPI POP RETURN JUMPDEST PUSH2 0x21B SWAP1 PUSH2 0xD0D JUMP JUMPDEST PUSH2 0x222 JUMPI DUP1 RETURN JUMPDEST DUP1 REVERT JUMPDEST MLOAD RETURNDATASIZE DUP5 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP6 DUP1 REVERT JUMPDEST POP POP REVERT JUMPDEST POP SWAP2 SWAP1 CALLVALUE PUSH2 0x35D JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x35D JUMPI PUSH2 0x252 PUSH2 0xC69 JUMP JUMPDEST SWAP3 PUSH2 0x25B PUSH2 0xC84 JUMP JUMPDEST SWAP2 PUSH2 0x264 PUSH2 0xC9A JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP7 SLOAD AND CALLER EQ ISZERO DUP1 PUSH2 0x34F JUMPI JUMPDEST PUSH2 0x340 JUMPI DUP6 SWAP7 DUP2 PUSH32 0x0 AND SWAP4 DUP5 EXTCODESIZE ISZERO PUSH2 0x31E JUMPI DUP6 MLOAD DUP4 DUP1 PUSH4 0xDCA09383 PUSH1 0xE0 SHL SWAP5 DUP6 DUP5 MSTORE AND SWAP9 DUP10 DUP8 DUP5 ADD MSTORE AND PUSH1 0x24 DUP3 ADD MSTORE DUP9 PUSH1 0x44 DUP3 ADD MSTORE DUP9 DUP2 PUSH1 0x64 DUP2 DUP4 DUP11 GAS CALL DUP1 ISZERO PUSH2 0x336 JUMPI SWAP1 DUP10 SWAP2 PUSH2 0x322 JUMPI JUMPDEST POP POP DUP5 EXTCODESIZE ISZERO PUSH2 0x31E JUMPI DUP8 SWAP5 PUSH1 0x64 SWAP4 DUP7 SWAP3 DUP9 MLOAD SWAP10 DUP11 SWAP8 DUP9 SWAP7 DUP8 MSTORE DUP7 ADD MSTORE AND PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x44 DUP5 ADD MSTORE GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x225 JUMPI POP PUSH2 0x212 JUMPI POP RETURN JUMPDEST DUP8 DUP1 REVERT JUMPDEST PUSH2 0x32B SWAP1 PUSH2 0xD0D JUMP JUMPDEST PUSH2 0x31E JUMPI DUP8 CODESIZE PUSH2 0x2E4 JUMP JUMPDEST DUP8 MLOAD RETURNDATASIZE DUP12 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP DUP3 MLOAD PUSH4 0x14F1252F PUSH1 0xE0 SHL DUP2 MSTORE REVERT JUMPDEST POP DUP1 PUSH1 0x2 SLOAD AND CALLER EQ ISZERO PUSH2 0x279 JUMP JUMPDEST POP DUP1 REVERT JUMPDEST DUP4 DUP3 CALLVALUE PUSH2 0x35D JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x35D JUMPI PUSH1 0x2 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP4 DUP3 CALLVALUE PUSH2 0x35D JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x35D JUMPI SWAP1 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP1 DUP5 DUP5 CALLVALUE PUSH2 0x232 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x232 JUMPI PUSH2 0x3CE PUSH2 0xC69 JUMP JUMPDEST PUSH2 0x3D6 PUSH2 0xC84 JUMP JUMPDEST SWAP1 PUSH1 0x44 CALLDATALOAD DUP1 ISZERO ISZERO DUP1 SWAP2 SUB PUSH2 0x22E JUMPI PUSH2 0x3EC PUSH2 0xEFE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND SWAP4 SWAP1 SWAP3 SWAP1 DUP5 EXTCODESIZE ISZERO PUSH2 0x31E JUMPI DUP8 SWAP5 PUSH1 0x64 SWAP4 DUP6 DUP8 SWAP4 DUP10 MLOAD SWAP11 DUP12 SWAP9 DUP10 SWAP8 PUSH4 0xDCA09383 PUSH1 0xE0 SHL DUP10 MSTORE AND SWAP1 DUP8 ADD MSTORE AND PUSH1 0x24 DUP6 ADD MSTORE PUSH1 0x44 DUP5 ADD MSTORE GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x225 JUMPI POP PUSH2 0x212 JUMPI POP RETURN JUMPDEST DUP1 DUP5 DUP5 CALLVALUE PUSH2 0x232 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x232 JUMPI PUSH2 0x477 PUSH2 0xC69 JUMP JUMPDEST SWAP2 PUSH2 0x480 PUSH2 0xC84 JUMP JUMPDEST PUSH2 0x488 PUSH2 0xEFE JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 EXTCODESIZE ISZERO PUSH2 0x22E JUMPI DUP4 MLOAD PUSH4 0x6D435421 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND SWAP4 DUP2 ADD SWAP4 DUP5 MSTORE SWAP5 SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP5 SWAP2 DUP5 SWAP2 SWAP1 DUP3 SWAP1 DUP5 SWAP1 DUP3 SWAP1 PUSH1 0x40 ADD JUMPDEST SUB SWAP3 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x225 JUMPI POP PUSH2 0x212 JUMPI POP RETURN JUMPDEST DUP1 DUP5 DUP5 CALLVALUE PUSH2 0x232 JUMPI PUSH2 0x512 CALLDATASIZE PUSH2 0xCB0 JUMP JUMPDEST SWAP4 SWAP2 PUSH2 0x51C PUSH2 0xEFE JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 EXTCODESIZE ISZERO PUSH2 0x56E JUMPI DUP7 DUP1 SWAP5 PUSH2 0x4EE DUP8 MLOAD SWAP9 DUP10 SWAP7 DUP8 SWAP6 DUP7 SWAP5 PUSH4 0x1D13F5AB PUSH1 0xE3 SHL DUP7 MSTORE DUP6 ADD PUSH2 0xE04 JUMP JUMPDEST DUP7 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x18B JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x18B JUMPI PUSH1 0x1 SLOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND CALLER SUB PUSH2 0x5DA JUMPI POP PUSH1 0x20 PUSH32 0x11A3CF439FB225BFE74225716B6774765670EC1060E3796802E62139D69974DA SWAP2 MLOAD DUP5 DUP2 MSTORE LOG1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 SSTORE PUSH2 0x5D7 CALLER PUSH2 0xF24 JUMP JUMPDEST DUP1 RETURN JUMPDEST SWAP1 MLOAD PUSH4 0x356E0057 PUSH1 0xE0 SHL DUP2 MSTORE REVERT JUMPDEST DUP4 DUP3 CALLVALUE PUSH2 0x35D JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x35D JUMPI PUSH1 0x1 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP DUP3 CALLVALUE PUSH2 0x222 JUMPI PUSH1 0x20 SWAP3 DUP4 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x35D JUMPI PUSH2 0x62E PUSH2 0xC69 JUMP JUMPDEST DUP3 SLOAD SWAP1 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND CALLER EQ ISZERO DUP1 PUSH2 0x83C JUMPI JUMPDEST PUSH2 0x82D JUMPI DUP1 MLOAD PUSH4 0x66A2489F PUSH1 0xE0 SHL DUP2 MSTORE SWAP5 DUP3 AND DUP4 DUP7 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 SWAP7 PUSH32 0x0 DUP5 AND SWAP4 SWAP1 DUP7 DUP9 DUP11 DUP2 DUP9 GAS STATICCALL SWAP8 DUP9 ISZERO PUSH2 0x823 JUMPI DUP8 SWAP9 PUSH2 0x773 JUMPI JUMPDEST POP DUP7 JUMPDEST DUP9 MLOAD DUP2 LT ISZERO PUSH2 0x734 JUMPI DUP3 DUP3 DUP3 PUSH1 0x5 SHL DUP12 ADD ADD MLOAD AND DUP7 EXTCODESIZE ISZERO PUSH2 0x730 JUMPI DUP6 MLOAD SWAP1 PUSH4 0xDCA09383 PUSH1 0xE0 SHL DUP3 MSTORE DUP6 DUP10 DUP4 ADD MSTORE DUP12 DUP3 ADD MSTORE DUP9 PUSH1 0x44 DUP3 ADD MSTORE DUP9 DUP2 PUSH1 0x64 DUP2 DUP4 DUP12 GAS CALL DUP1 ISZERO PUSH2 0x726 JUMPI SWAP1 DUP10 SWAP2 PUSH2 0x712 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x700 JUMPI PUSH1 0x1 ADD PUSH2 0x69F JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP9 MSTORE PUSH1 0x11 DUP8 MSTORE DUP10 DUP9 REVERT JUMPDEST PUSH2 0x71B SWAP1 PUSH2 0xD0D JUMP JUMPDEST PUSH2 0x31E JUMPI DUP8 DUP12 PUSH2 0x6ED JUMP JUMPDEST DUP7 MLOAD RETURNDATASIZE DUP12 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP9 DUP1 REVERT JUMPDEST DUP8 PUSH32 0x34E303260A4D58FDD43AD4A37DFC0C7CE1C835D4137ABBC94AC6763CF7923E64 DUP4 DUP7 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH1 0x2 SLOAD AND PUSH1 0x2 SSTORE MLOAD SWAP1 DUP2 MSTORE LOG1 DUP1 RETURN JUMPDEST SWAP1 SWAP8 POP RETURNDATASIZE DUP1 DUP9 DUP4 RETURNDATACOPY PUSH2 0x785 DUP2 DUP4 PUSH2 0xD37 JUMP JUMPDEST DUP2 ADD DUP9 DUP3 DUP3 SUB SLT PUSH2 0x31E JUMPI DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 DUP4 DUP3 GT PUSH2 0x80D JUMPI ADD DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x730 JUMPI DUP1 MLOAD SWAP3 DUP4 GT PUSH2 0x811 JUMPI DUP3 PUSH1 0x5 SHL SWAP1 DUP7 MLOAD SWAP4 PUSH2 0x7CC DUP13 DUP5 ADD DUP7 PUSH2 0xD37 JUMP JUMPDEST DUP5 MSTORE DUP11 DUP1 DUP6 ADD SWAP3 DUP3 ADD ADD SWAP3 DUP4 GT PUSH2 0x80D JUMPI DUP11 DUP1 SWAP2 ADD SWAP2 JUMPDEST DUP4 DUP4 LT PUSH2 0x7F5 JUMPI POP POP POP POP SWAP7 DUP10 PUSH2 0x69C JUMP JUMPDEST DUP2 SWAP1 PUSH2 0x800 DUP5 PUSH2 0xDB0 JUMP JUMPDEST DUP2 MSTORE ADD SWAP2 ADD SWAP1 DUP11 SWAP1 PUSH2 0x7E3 JUMP JUMPDEST DUP10 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP10 MSTORE PUSH1 0x41 DUP9 MSTORE DUP11 DUP10 REVERT JUMPDEST DUP5 MLOAD RETURNDATASIZE DUP10 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST MLOAD PUSH4 0xDCADAC9 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 POP REVERT JUMPDEST POP DUP2 PUSH1 0x3 SLOAD AND CALLER EQ ISZERO PUSH2 0x646 JUMP JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x18B JUMPI PUSH1 0x3 NOT SWAP1 PUSH1 0xE0 CALLDATASIZE DUP4 ADD SLT PUSH2 0xA8C JUMPI PUSH2 0x867 PUSH2 0xC69 JUMP JUMPDEST SWAP1 PUSH2 0x870 PUSH2 0xC84 JUMP JUMPDEST SWAP3 PUSH2 0x879 PUSH2 0xC9A JUMP JUMPDEST SWAP4 PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x64 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x730 JUMPI PUSH2 0x89A SWAP1 CALLDATASIZE SWAP1 DUP7 ADD PUSH2 0xD59 JUMP JUMPDEST SWAP6 PUSH1 0x84 CALLDATALOAD DUP3 DUP2 GT PUSH2 0x80D JUMPI PUSH2 0x8B2 SWAP1 CALLDATASIZE SWAP1 DUP8 ADD PUSH2 0xD59 JUMP JUMPDEST SWAP2 PUSH1 0xA4 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x80D JUMPI PUSH2 0x8CA SWAP1 CALLDATASIZE SWAP1 DUP8 ADD PUSH2 0xD59 JUMP JUMPDEST SWAP3 PUSH20 0x939C8D89EBC11FA45E576215E2353673AD0BA18A ORIGIN EQ ISZERO DUP1 PUSH2 0xA6E JUMPI JUMPDEST DUP1 PUSH2 0xA50 JUMPI JUMPDEST DUP1 PUSH2 0xA32 JUMPI JUMPDEST PUSH2 0xA22 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP7 DUP1 DUP9 AND ISZERO PUSH2 0xA12 JUMPI DUP8 DUP12 SLOAD AND DUP1 PUSH2 0x9FC JUMPI POP SWAP5 PUSH1 0xA0 SWAP5 PUSH2 0x974 DUP13 SWAP6 PUSH2 0x944 PUSH2 0x964 SWAP14 SWAP13 SWAP11 SWAP7 PUSH2 0x93F PUSH2 0x983 SWAP8 PUSH2 0x93A PUSH1 0x20 SWAP16 SWAP14 PUSH2 0xF24 JUMP JUMPDEST PUSH2 0xE3A JUMP JUMPDEST PUSH2 0xE9C JUMP JUMPDEST DUP12 MLOAD SWAP13 DUP14 SWAP11 DUP12 SWAP10 DUP11 SWAP9 PUSH4 0x75C928B PUSH1 0xE1 SHL DUP11 MSTORE DUP10 ADD MSTORE PUSH1 0xA4 DUP9 ADD SWAP1 PUSH2 0xDC4 JUMP JUMPDEST SWAP1 DUP5 DUP8 DUP4 SUB ADD PUSH1 0x24 DUP9 ADD MSTORE PUSH2 0xDC4 JUMP JUMPDEST SWAP2 DUP5 DUP4 SUB ADD PUSH1 0x44 DUP6 ADD MSTORE PUSH2 0xDC4 JUMP JUMPDEST ADDRESS PUSH1 0x64 DUP4 ADD MSTORE PUSH1 0xC4 CALLDATALOAD PUSH1 0x84 DUP4 ADD MSTORE SUB SWAP3 PUSH32 0x0 AND GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x225 JUMPI POP PUSH2 0x9C7 JUMPI POP DUP1 RETURN JUMPDEST PUSH1 0x20 DUP2 RETURNDATASIZE DUP3 GT PUSH2 0x9F4 JUMPI JUMPDEST DUP2 PUSH2 0x9DF PUSH1 0x20 SWAP4 DUP4 PUSH2 0xD37 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x35D JUMPI PUSH2 0x9F0 SWAP1 PUSH2 0xDB0 JUMP JUMPDEST POP DUP1 RETURN JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x9D2 JUMP JUMPDEST DUP8 PUSH1 0x24 SWAP2 DUP13 MLOAD SWAP2 PUSH4 0x31649309 PUSH1 0xE1 SHL DUP4 MSTORE DUP3 ADD MSTORE REVERT JUMPDEST DUP10 MLOAD PUSH4 0x1DDA595D PUSH1 0xE1 SHL DUP2 MSTORE DUP8 SWAP1 REVERT JUMPDEST DUP9 MLOAD PUSH4 0x43C669F PUSH1 0xE0 SHL DUP2 MSTORE DUP7 SWAP1 REVERT JUMPDEST POP PUSH20 0x3B52AD533687CE908BA0485AC177C5FB42972962 ORIGIN EQ ISZERO PUSH2 0x8F5 JUMP JUMPDEST POP PUSH20 0x86D26897267711EA4B173C8C124A0A73612001DA ORIGIN EQ ISZERO PUSH2 0x8EF JUMP JUMPDEST POP PUSH20 0xE80A65EB7A3018DEDA407E621EF5FB5B416678CA ORIGIN EQ ISZERO PUSH2 0x8E9 JUMP JUMPDEST DUP4 DUP1 REVERT JUMPDEST DUP1 DUP5 DUP5 CALLVALUE PUSH2 0x232 JUMPI PUSH2 0xAA1 CALLDATASIZE PUSH2 0xCB0 JUMP JUMPDEST SWAP4 SWAP2 PUSH2 0xAAB PUSH2 0xEFE JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 EXTCODESIZE ISZERO PUSH2 0x56E JUMPI DUP7 DUP1 SWAP5 PUSH2 0x4EE DUP8 MLOAD SWAP9 DUP10 SWAP7 DUP8 SWAP6 DUP7 SWAP5 PUSH4 0x2A0DDE99 PUSH1 0xE1 SHL DUP7 MSTORE DUP6 ADD PUSH2 0xE04 JUMP JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x18B JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x18B JUMPI PUSH2 0xB17 PUSH2 0xEFE JUMP JUMPDEST PUSH32 0x11A3CF439FB225BFE74225716B6774765670EC1060E3796802E62139D69974DA PUSH1 0x20 DUP4 MLOAD DUP6 DUP2 MSTORE LOG1 PUSH1 0x1 SLOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO PUSH2 0xB65 JUMPI POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 SSTORE DUP1 RETURN JUMPDEST MLOAD PUSH4 0x85C32409 PUSH1 0xE0 SHL DUP2 MSTORE REVERT JUMPDEST POP CALLVALUE PUSH2 0x18B JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x18B JUMPI DUP3 PUSH2 0xB8D PUSH2 0xC69 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH32 0x0 DUP3 AND SWAP1 DUP2 EXTCODESIZE ISZERO PUSH2 0xA8C JUMPI DUP4 PUSH1 0x24 SWAP3 DUP7 MLOAD SWAP8 DUP9 SWAP6 DUP7 SWAP5 PUSH4 0x51710E45 PUSH1 0xE0 SHL DUP7 MSTORE AND SWAP1 DUP5 ADD MSTORE GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x225 JUMPI POP PUSH2 0xBED JUMPI POP DUP1 RETURN JUMPDEST PUSH2 0x5D7 SWAP1 PUSH2 0xD0D JUMP JUMPDEST DUP4 DUP3 CALLVALUE PUSH2 0x35D JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x35D JUMPI PUSH1 0x3 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP4 CALLVALUE PUSH2 0x222 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x222 JUMPI PUSH2 0x5D7 PUSH2 0xC3C PUSH2 0xC69 JUMP JUMPDEST PUSH2 0x93F PUSH2 0xEFE JUMP JUMPDEST DUP4 CALLVALUE PUSH2 0x222 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x222 JUMPI PUSH2 0x5D7 PUSH2 0xC61 PUSH2 0xC69 JUMP JUMPDEST PUSH2 0x93A PUSH2 0xEFE JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xC7F JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xC7F JUMPI JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xC7F JUMPI JUMP JUMPDEST PUSH1 0x40 PUSH1 0x3 NOT DUP3 ADD SLT PUSH2 0xC7F JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0xC7F JUMPI SWAP2 PUSH1 0x24 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 DUP4 DUP3 GT PUSH2 0xC7F JUMPI DUP1 PUSH1 0x23 DUP4 ADD SLT ISZERO PUSH2 0xC7F JUMPI DUP2 PUSH1 0x4 ADD CALLDATALOAD SWAP4 DUP5 GT PUSH2 0xC7F JUMPI PUSH1 0x24 DUP5 DUP4 ADD ADD GT PUSH2 0xC7F JUMPI PUSH1 0x24 ADD SWAP2 SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xD21 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xD21 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0xC7F JUMPI DUP1 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0xD21 JUMPI PUSH1 0x40 MLOAD SWAP3 PUSH2 0xD8E PUSH1 0x1F DUP5 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP6 PUSH2 0xD37 JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x20 DUP4 DUP4 ADD ADD GT PUSH2 0xC7F JUMPI DUP2 PUSH1 0x0 SWAP3 PUSH1 0x20 DUP1 SWAP4 ADD DUP4 DUP7 ADD CALLDATACOPY DUP4 ADD ADD MSTORE SWAP1 JUMP JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xC7F JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP3 MLOAD SWAP3 DUP4 DUP3 MSTORE PUSH1 0x0 JUMPDEST DUP5 DUP2 LT PUSH2 0xDF0 JUMPI POP POP DUP3 PUSH1 0x0 PUSH1 0x20 DUP1 SWAP5 SWAP6 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP4 ADD DUP2 ADD MLOAD DUP5 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0xDCF JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x60 SWAP4 DUP2 SWAP3 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP5 MSTORE PUSH1 0x40 PUSH1 0x20 DUP6 ADD MSTORE DUP2 PUSH1 0x40 DUP6 ADD MSTORE DUP5 DUP5 ADD CALLDATACOPY PUSH1 0x0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO PUSH2 0xE8A JUMPI PUSH1 0x20 DUP2 PUSH32 0xA061937CA7BFBA5C8E5D1690098F8008AA9B45A921BF2F7C8D9A3221CEEC49C6 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH1 0x2 SLOAD AND OR PUSH1 0x2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF1EAAB1 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO PUSH2 0xEEC JUMPI PUSH1 0x20 DUP2 PUSH32 0x90C3857C3FF172F31182E610725596CA9AF20F2F614B4B9BD22600FD81EB21CA SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH1 0x3 SLOAD AND OR PUSH1 0x3 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x451546BD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0xF12 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6DB2465F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND DUP3 MSTORE DUP5 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE SWAP3 SWAP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG1 AND SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL AND OR PUSH1 0x0 SSTORE JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4F ADDMOD CALLDATASIZE 0xF8 DUP13 0xF8 0x49 0xE9 PUSH17 0x3FCFA18C883DB8597EAF15C7BA02FBB4C1 PUSH2 0x56A7 SWAP5 BALANCE PUSH29 0x64736F6C63430008130033000000000000000000000000000000000000 ", "sourceMap": "124:988:0:-:0;;;;;;;;;;;;;-1:-1:-1;;124:988:0;;;;-1:-1:-1;;;;;124:988:0;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;124:988:0;;;;;;;;761:42;740:9;:64;;:144;;;-1:-1:-1;740:224:0;;;-1:-1:-1;740:304:0;;;-1:-1:-1;723:381:0;;1965:32:1;:37;1961:126;;2143:101;;124:988:0;;;;;;;;2143:101:1;124:988:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1961:126:1;124:988:0;;;;2026:49:1;;;;;;;;;124:988:0;2026:49:1;723:381:0;124:988;;-1:-1:-1;;;1076:17:0;;;;;740:304;:9;1001:42;740:9;980:64;;740:304;;:224;:9;921:42;740:9;900:64;;740:224;;:144;:9;841:42;740:9;820:64;;740:144;;124:988;-1:-1:-1;124:988:0;;;;;;-1:-1:-1;124:988:0;;;;;-1:-1:-1;124:988:0"}, "deployedBytecode": {"functionDebugData": {"abi_decode_address": {"entryPoint": 3204, "id": null, "parameterSlots": 0, "returnSlots": 1}, "abi_decode_address_7594": {"entryPoint": 3177, "id": null, "parameterSlots": 0, "returnSlots": 1}, "abi_decode_address_7602": {"entryPoint": 3226, "id": null, "parameterSlots": 0, "returnSlots": 1}, "abi_decode_address_fromMemory": {"entryPoint": 3504, "id": null, "parameterSlots": 1, "returnSlots": 1}, "abi_decode_addresst_string_calldata": {"entryPoint": 3248, "id": null, "parameterSlots": 1, "returnSlots": 3}, "abi_decode_string": {"entryPoint": 3417, "id": null, "parameterSlots": 2, "returnSlots": 1}, "abi_encode_address_address": {"entryPoint": null, "id": null, "parameterSlots": 3, "returnSlots": 1}, "abi_encode_address_string_calldata": {"entryPoint": 3588, "id": null, "parameterSlots": 4, "returnSlots": 1}, "abi_encode_string": {"entryPoint": 3524, "id": null, "parameterSlots": 2, "returnSlots": 1}, "finalize_allocation": {"entryPoint": 3383, "id": null, "parameterSlots": 2, "returnSlots": 0}, "finalize_allocation_7597": {"entryPoint": 3341, "id": null, "parameterSlots": 1, "returnSlots": 0}, "fun_assertCallerIsOwner": {"entryPoint": 3838, "id": 713, "parameterSlots": 0, "returnSlots": 0}, "fun_setOwner": {"entryPoint": 3876, "id": 729, "parameterSlots": 1, "returnSlots": 0}, "fun_setRotator": {"entryPoint": 3642, "id": 458, "parameterSlots": 1, "returnSlots": 0}, "fun_setSanitizer": {"entryPoint": 3740, "id": 484, "parameterSlots": 1, "returnSlots": 0}}, "generatedSources": [], "immutableReferences": {"77": [{"length": 32, "start": 445}, {"length": 32, "start": 642}, {"length": 32, "start": 1014}, {"length": 32, "start": 1162}, {"length": 32, "start": 1310}, {"length": 32, "start": 1636}, {"length": 32, "start": 2453}, {"length": 32, "start": 2733}, {"length": 32, "start": 2968}]}, "linkReferences": {}, "object": "", "opcodes": "PUSH1 0x40 PUSH1 0x80 DUP2 MSTORE PUSH1 0x4 DUP1 CALLDATASIZE LT ISZERO PUSH2 0x14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2F71567 EQ PUSH2 0xC44 JUMPI DUP1 PUSH4 0x89AB0C4 EQ PUSH2 0xC1F JUMPI DUP1 PUSH4 0xB8C0C9F EQ PUSH2 0xBF6 JUMPI DUP1 PUSH4 0x1F66010A EQ PUSH2 0xB72 JUMPI DUP1 PUSH4 0x23452B9C EQ PUSH2 0xAFD JUMPI DUP4 DUP2 PUSH4 0x2A8306E2 EQ PUSH2 0xA90 JUMPI POP DUP1 PUSH4 0x44A0B6F2 EQ PUSH2 0x84A JUMPI DUP1 PUSH4 0x5B09B370 EQ PUSH2 0x611 JUMPI DUP1 PUSH4 0x7762DF25 EQ PUSH2 0x5E8 JUMPI DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x572 JUMPI DUP4 DUP2 PUSH4 0x7DA39913 EQ PUSH2 0x501 JUMPI DUP2 PUSH4 0x8B267DEB EQ PUSH2 0x45C JUMPI DUP2 PUSH4 0x8D4FD158 EQ PUSH2 0x3B2 JUMPI POP DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x38A JUMPI DUP1 PUSH4 0x96137659 EQ PUSH2 0x361 JUMPI DUP1 PUSH4 0x9C7F3335 EQ PUSH2 0x236 JUMPI DUP4 DUP2 PUSH4 0xE7437095 EQ PUSH2 0x18F JUMPI POP PUSH4 0xF2FDE38B EQ PUSH2 0xEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x18B JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x18B JUMPI PUSH2 0x105 PUSH2 0xC69 JUMP JUMPDEST SWAP1 PUSH2 0x10E PUSH2 0xEFE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP3 DUP4 ISZERO PUSH2 0x17D JUMPI PUSH1 0x1 SLOAD SWAP3 DUP4 AND DUP1 DUP6 EQ PUSH2 0x169 JUMPI POP POP PUSH1 0x20 PUSH32 0x11A3CF439FB225BFE74225716B6774765670EC1060E3796802E62139D69974DA SWAP2 MLOAD DUP5 DUP2 MSTORE LOG1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND OR PUSH1 0x1 SSTORE DUP1 RETURN JUMPDEST PUSH1 0x24 SWAP3 MLOAD SWAP2 PUSH4 0x10AECD9 PUSH1 0xE4 SHL DUP4 MSTORE DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 MLOAD PUSH4 0x7621B061 PUSH1 0xE0 SHL DUP2 MSTORE REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST DUP1 DUP5 DUP5 CALLVALUE PUSH2 0x232 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x232 JUMPI PUSH2 0x1AB PUSH2 0xC69 JUMP JUMPDEST PUSH2 0x1B3 PUSH2 0xEFE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND DUP1 EXTCODESIZE ISZERO PUSH2 0x22E JUMPI DUP6 SWAP3 DUP4 PUSH1 0x24 SWAP3 DUP7 MLOAD SWAP8 DUP9 SWAP6 DUP7 SWAP5 PUSH4 0x7B37E561 PUSH1 0xE0 SHL DUP7 MSTORE AND SWAP1 DUP5 ADD MSTORE GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x225 JUMPI POP PUSH2 0x212 JUMPI POP RETURN JUMPDEST PUSH2 0x21B SWAP1 PUSH2 0xD0D JUMP JUMPDEST PUSH2 0x222 JUMPI DUP1 RETURN JUMPDEST DUP1 REVERT JUMPDEST MLOAD RETURNDATASIZE DUP5 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP6 DUP1 REVERT JUMPDEST POP POP REVERT JUMPDEST POP SWAP2 SWAP1 CALLVALUE PUSH2 0x35D JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x35D JUMPI PUSH2 0x252 PUSH2 0xC69 JUMP JUMPDEST SWAP3 PUSH2 0x25B PUSH2 0xC84 JUMP JUMPDEST SWAP2 PUSH2 0x264 PUSH2 0xC9A JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP7 SLOAD AND CALLER EQ ISZERO DUP1 PUSH2 0x34F JUMPI JUMPDEST PUSH2 0x340 JUMPI DUP6 SWAP7 DUP2 PUSH32 0x0 AND SWAP4 DUP5 EXTCODESIZE ISZERO PUSH2 0x31E JUMPI DUP6 MLOAD DUP4 DUP1 PUSH4 0xDCA09383 PUSH1 0xE0 SHL SWAP5 DUP6 DUP5 MSTORE AND SWAP9 DUP10 DUP8 DUP5 ADD MSTORE AND PUSH1 0x24 DUP3 ADD MSTORE DUP9 PUSH1 0x44 DUP3 ADD MSTORE DUP9 DUP2 PUSH1 0x64 DUP2 DUP4 DUP11 GAS CALL DUP1 ISZERO PUSH2 0x336 JUMPI SWAP1 DUP10 SWAP2 PUSH2 0x322 JUMPI JUMPDEST POP POP DUP5 EXTCODESIZE ISZERO PUSH2 0x31E JUMPI DUP8 SWAP5 PUSH1 0x64 SWAP4 DUP7 SWAP3 DUP9 MLOAD SWAP10 DUP11 SWAP8 DUP9 SWAP7 DUP8 MSTORE DUP7 ADD MSTORE AND PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x44 DUP5 ADD MSTORE GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x225 JUMPI POP PUSH2 0x212 JUMPI POP RETURN JUMPDEST DUP8 DUP1 REVERT JUMPDEST PUSH2 0x32B SWAP1 PUSH2 0xD0D JUMP JUMPDEST PUSH2 0x31E JUMPI DUP8 CODESIZE PUSH2 0x2E4 JUMP JUMPDEST DUP8 MLOAD RETURNDATASIZE DUP12 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP DUP3 MLOAD PUSH4 0x14F1252F PUSH1 0xE0 SHL DUP2 MSTORE REVERT JUMPDEST POP DUP1 PUSH1 0x2 SLOAD AND CALLER EQ ISZERO PUSH2 0x279 JUMP JUMPDEST POP DUP1 REVERT JUMPDEST DUP4 DUP3 CALLVALUE PUSH2 0x35D JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x35D JUMPI PUSH1 0x2 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP4 DUP3 CALLVALUE PUSH2 0x35D JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x35D JUMPI SWAP1 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP1 DUP5 DUP5 CALLVALUE PUSH2 0x232 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x232 JUMPI PUSH2 0x3CE PUSH2 0xC69 JUMP JUMPDEST PUSH2 0x3D6 PUSH2 0xC84 JUMP JUMPDEST SWAP1 PUSH1 0x44 CALLDATALOAD DUP1 ISZERO ISZERO DUP1 SWAP2 SUB PUSH2 0x22E JUMPI PUSH2 0x3EC PUSH2 0xEFE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND SWAP4 SWAP1 SWAP3 SWAP1 DUP5 EXTCODESIZE ISZERO PUSH2 0x31E JUMPI DUP8 SWAP5 PUSH1 0x64 SWAP4 DUP6 DUP8 SWAP4 DUP10 MLOAD SWAP11 DUP12 SWAP9 DUP10 SWAP8 PUSH4 0xDCA09383 PUSH1 0xE0 SHL DUP10 MSTORE AND SWAP1 DUP8 ADD MSTORE AND PUSH1 0x24 DUP6 ADD MSTORE PUSH1 0x44 DUP5 ADD MSTORE GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x225 JUMPI POP PUSH2 0x212 JUMPI POP RETURN JUMPDEST DUP1 DUP5 DUP5 CALLVALUE PUSH2 0x232 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x232 JUMPI PUSH2 0x477 PUSH2 0xC69 JUMP JUMPDEST SWAP2 PUSH2 0x480 PUSH2 0xC84 JUMP JUMPDEST PUSH2 0x488 PUSH2 0xEFE JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 EXTCODESIZE ISZERO PUSH2 0x22E JUMPI DUP4 MLOAD PUSH4 0x6D435421 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND SWAP4 DUP2 ADD SWAP4 DUP5 MSTORE SWAP5 SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP5 SWAP2 DUP5 SWAP2 SWAP1 DUP3 SWAP1 DUP5 SWAP1 DUP3 SWAP1 PUSH1 0x40 ADD JUMPDEST SUB SWAP3 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x225 JUMPI POP PUSH2 0x212 JUMPI POP RETURN JUMPDEST DUP1 DUP5 DUP5 CALLVALUE PUSH2 0x232 JUMPI PUSH2 0x512 CALLDATASIZE PUSH2 0xCB0 JUMP JUMPDEST SWAP4 SWAP2 PUSH2 0x51C PUSH2 0xEFE JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 EXTCODESIZE ISZERO PUSH2 0x56E JUMPI DUP7 DUP1 SWAP5 PUSH2 0x4EE DUP8 MLOAD SWAP9 DUP10 SWAP7 DUP8 SWAP6 DUP7 SWAP5 PUSH4 0x1D13F5AB PUSH1 0xE3 SHL DUP7 MSTORE DUP6 ADD PUSH2 0xE04 JUMP JUMPDEST DUP7 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x18B JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x18B JUMPI PUSH1 0x1 SLOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND CALLER SUB PUSH2 0x5DA JUMPI POP PUSH1 0x20 PUSH32 0x11A3CF439FB225BFE74225716B6774765670EC1060E3796802E62139D69974DA SWAP2 MLOAD DUP5 DUP2 MSTORE LOG1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 SSTORE PUSH2 0x5D7 CALLER PUSH2 0xF24 JUMP JUMPDEST DUP1 RETURN JUMPDEST SWAP1 MLOAD PUSH4 0x356E0057 PUSH1 0xE0 SHL DUP2 MSTORE REVERT JUMPDEST DUP4 DUP3 CALLVALUE PUSH2 0x35D JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x35D JUMPI PUSH1 0x1 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP DUP3 CALLVALUE PUSH2 0x222 JUMPI PUSH1 0x20 SWAP3 DUP4 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x35D JUMPI PUSH2 0x62E PUSH2 0xC69 JUMP JUMPDEST DUP3 SLOAD SWAP1 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND CALLER EQ ISZERO DUP1 PUSH2 0x83C JUMPI JUMPDEST PUSH2 0x82D JUMPI DUP1 MLOAD PUSH4 0x66A2489F PUSH1 0xE0 SHL DUP2 MSTORE SWAP5 DUP3 AND DUP4 DUP7 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 SWAP7 PUSH32 0x0 DUP5 AND SWAP4 SWAP1 DUP7 DUP9 DUP11 DUP2 DUP9 GAS STATICCALL SWAP8 DUP9 ISZERO PUSH2 0x823 JUMPI DUP8 SWAP9 PUSH2 0x773 JUMPI JUMPDEST POP DUP7 JUMPDEST DUP9 MLOAD DUP2 LT ISZERO PUSH2 0x734 JUMPI DUP3 DUP3 DUP3 PUSH1 0x5 SHL DUP12 ADD ADD MLOAD AND DUP7 EXTCODESIZE ISZERO PUSH2 0x730 JUMPI DUP6 MLOAD SWAP1 PUSH4 0xDCA09383 PUSH1 0xE0 SHL DUP3 MSTORE DUP6 DUP10 DUP4 ADD MSTORE DUP12 DUP3 ADD MSTORE DUP9 PUSH1 0x44 DUP3 ADD MSTORE DUP9 DUP2 PUSH1 0x64 DUP2 DUP4 DUP12 GAS CALL DUP1 ISZERO PUSH2 0x726 JUMPI SWAP1 DUP10 SWAP2 PUSH2 0x712 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x700 JUMPI PUSH1 0x1 ADD PUSH2 0x69F JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP9 MSTORE PUSH1 0x11 DUP8 MSTORE DUP10 DUP9 REVERT JUMPDEST PUSH2 0x71B SWAP1 PUSH2 0xD0D JUMP JUMPDEST PUSH2 0x31E JUMPI DUP8 DUP12 PUSH2 0x6ED JUMP JUMPDEST DUP7 MLOAD RETURNDATASIZE DUP12 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP9 DUP1 REVERT JUMPDEST DUP8 PUSH32 0x34E303260A4D58FDD43AD4A37DFC0C7CE1C835D4137ABBC94AC6763CF7923E64 DUP4 DUP7 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH1 0x2 SLOAD AND PUSH1 0x2 SSTORE MLOAD SWAP1 DUP2 MSTORE LOG1 DUP1 RETURN JUMPDEST SWAP1 SWAP8 POP RETURNDATASIZE DUP1 DUP9 DUP4 RETURNDATACOPY PUSH2 0x785 DUP2 DUP4 PUSH2 0xD37 JUMP JUMPDEST DUP2 ADD DUP9 DUP3 DUP3 SUB SLT PUSH2 0x31E JUMPI DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 DUP4 DUP3 GT PUSH2 0x80D JUMPI ADD DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x730 JUMPI DUP1 MLOAD SWAP3 DUP4 GT PUSH2 0x811 JUMPI DUP3 PUSH1 0x5 SHL SWAP1 DUP7 MLOAD SWAP4 PUSH2 0x7CC DUP13 DUP5 ADD DUP7 PUSH2 0xD37 JUMP JUMPDEST DUP5 MSTORE DUP11 DUP1 DUP6 ADD SWAP3 DUP3 ADD ADD SWAP3 DUP4 GT PUSH2 0x80D JUMPI DUP11 DUP1 SWAP2 ADD SWAP2 JUMPDEST DUP4 DUP4 LT PUSH2 0x7F5 JUMPI POP POP POP POP SWAP7 DUP10 PUSH2 0x69C JUMP JUMPDEST DUP2 SWAP1 PUSH2 0x800 DUP5 PUSH2 0xDB0 JUMP JUMPDEST DUP2 MSTORE ADD SWAP2 ADD SWAP1 DUP11 SWAP1 PUSH2 0x7E3 JUMP JUMPDEST DUP10 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP10 MSTORE PUSH1 0x41 DUP9 MSTORE DUP11 DUP10 REVERT JUMPDEST DUP5 MLOAD RETURNDATASIZE DUP10 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST MLOAD PUSH4 0xDCADAC9 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 POP REVERT JUMPDEST POP DUP2 PUSH1 0x3 SLOAD AND CALLER EQ ISZERO PUSH2 0x646 JUMP JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x18B JUMPI PUSH1 0x3 NOT SWAP1 PUSH1 0xE0 CALLDATASIZE DUP4 ADD SLT PUSH2 0xA8C JUMPI PUSH2 0x867 PUSH2 0xC69 JUMP JUMPDEST SWAP1 PUSH2 0x870 PUSH2 0xC84 JUMP JUMPDEST SWAP3 PUSH2 0x879 PUSH2 0xC9A JUMP JUMPDEST SWAP4 PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x64 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x730 JUMPI PUSH2 0x89A SWAP1 CALLDATASIZE SWAP1 DUP7 ADD PUSH2 0xD59 JUMP JUMPDEST SWAP6 PUSH1 0x84 CALLDATALOAD DUP3 DUP2 GT PUSH2 0x80D JUMPI PUSH2 0x8B2 SWAP1 CALLDATASIZE SWAP1 DUP8 ADD PUSH2 0xD59 JUMP JUMPDEST SWAP2 PUSH1 0xA4 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x80D JUMPI PUSH2 0x8CA SWAP1 CALLDATASIZE SWAP1 DUP8 ADD PUSH2 0xD59 JUMP JUMPDEST SWAP3 PUSH20 0x939C8D89EBC11FA45E576215E2353673AD0BA18A ORIGIN EQ ISZERO DUP1 PUSH2 0xA6E JUMPI JUMPDEST DUP1 PUSH2 0xA50 JUMPI JUMPDEST DUP1 PUSH2 0xA32 JUMPI JUMPDEST PUSH2 0xA22 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP7 DUP1 DUP9 AND ISZERO PUSH2 0xA12 JUMPI DUP8 DUP12 SLOAD AND DUP1 PUSH2 0x9FC JUMPI POP SWAP5 PUSH1 0xA0 SWAP5 PUSH2 0x974 DUP13 SWAP6 PUSH2 0x944 PUSH2 0x964 SWAP14 SWAP13 SWAP11 SWAP7 PUSH2 0x93F PUSH2 0x983 SWAP8 PUSH2 0x93A PUSH1 0x20 SWAP16 SWAP14 PUSH2 0xF24 JUMP JUMPDEST PUSH2 0xE3A JUMP JUMPDEST PUSH2 0xE9C JUMP JUMPDEST DUP12 MLOAD SWAP13 DUP14 SWAP11 DUP12 SWAP10 DUP11 SWAP9 PUSH4 0x75C928B PUSH1 0xE1 SHL DUP11 MSTORE DUP10 ADD MSTORE PUSH1 0xA4 DUP9 ADD SWAP1 PUSH2 0xDC4 JUMP JUMPDEST SWAP1 DUP5 DUP8 DUP4 SUB ADD PUSH1 0x24 DUP9 ADD MSTORE PUSH2 0xDC4 JUMP JUMPDEST SWAP2 DUP5 DUP4 SUB ADD PUSH1 0x44 DUP6 ADD MSTORE PUSH2 0xDC4 JUMP JUMPDEST ADDRESS PUSH1 0x64 DUP4 ADD MSTORE PUSH1 0xC4 CALLDATALOAD PUSH1 0x84 DUP4 ADD MSTORE SUB SWAP3 PUSH32 0x0 AND GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x225 JUMPI POP PUSH2 0x9C7 JUMPI POP DUP1 RETURN JUMPDEST PUSH1 0x20 DUP2 RETURNDATASIZE DUP3 GT PUSH2 0x9F4 JUMPI JUMPDEST DUP2 PUSH2 0x9DF PUSH1 0x20 SWAP4 DUP4 PUSH2 0xD37 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x35D JUMPI PUSH2 0x9F0 SWAP1 PUSH2 0xDB0 JUMP JUMPDEST POP DUP1 RETURN JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x9D2 JUMP JUMPDEST DUP8 PUSH1 0x24 SWAP2 DUP13 MLOAD SWAP2 PUSH4 0x31649309 PUSH1 0xE1 SHL DUP4 MSTORE DUP3 ADD MSTORE REVERT JUMPDEST DUP10 MLOAD PUSH4 0x1DDA595D PUSH1 0xE1 SHL DUP2 MSTORE DUP8 SWAP1 REVERT JUMPDEST DUP9 MLOAD PUSH4 0x43C669F PUSH1 0xE0 SHL DUP2 MSTORE DUP7 SWAP1 REVERT JUMPDEST POP PUSH20 0x3B52AD533687CE908BA0485AC177C5FB42972962 ORIGIN EQ ISZERO PUSH2 0x8F5 JUMP JUMPDEST POP PUSH20 0x86D26897267711EA4B173C8C124A0A73612001DA ORIGIN EQ ISZERO PUSH2 0x8EF JUMP JUMPDEST POP PUSH20 0xE80A65EB7A3018DEDA407E621EF5FB5B416678CA ORIGIN EQ ISZERO PUSH2 0x8E9 JUMP JUMPDEST DUP4 DUP1 REVERT JUMPDEST DUP1 DUP5 DUP5 CALLVALUE PUSH2 0x232 JUMPI PUSH2 0xAA1 CALLDATASIZE PUSH2 0xCB0 JUMP JUMPDEST SWAP4 SWAP2 PUSH2 0xAAB PUSH2 0xEFE JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 EXTCODESIZE ISZERO PUSH2 0x56E JUMPI DUP7 DUP1 SWAP5 PUSH2 0x4EE DUP8 MLOAD SWAP9 DUP10 SWAP7 DUP8 SWAP6 DUP7 SWAP5 PUSH4 0x2A0DDE99 PUSH1 0xE1 SHL DUP7 MSTORE DUP6 ADD PUSH2 0xE04 JUMP JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x18B JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x18B JUMPI PUSH2 0xB17 PUSH2 0xEFE JUMP JUMPDEST PUSH32 0x11A3CF439FB225BFE74225716B6774765670EC1060E3796802E62139D69974DA PUSH1 0x20 DUP4 MLOAD DUP6 DUP2 MSTORE LOG1 PUSH1 0x1 SLOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO PUSH2 0xB65 JUMPI POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 SSTORE DUP1 RETURN JUMPDEST MLOAD PUSH4 0x85C32409 PUSH1 0xE0 SHL DUP2 MSTORE REVERT JUMPDEST POP CALLVALUE PUSH2 0x18B JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x18B JUMPI DUP3 PUSH2 0xB8D PUSH2 0xC69 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH32 0x0 DUP3 AND SWAP1 DUP2 EXTCODESIZE ISZERO PUSH2 0xA8C JUMPI DUP4 PUSH1 0x24 SWAP3 DUP7 MLOAD SWAP8 DUP9 SWAP6 DUP7 SWAP5 PUSH4 0x51710E45 PUSH1 0xE0 SHL DUP7 MSTORE AND SWAP1 DUP5 ADD MSTORE GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x225 JUMPI POP PUSH2 0xBED JUMPI POP DUP1 RETURN JUMPDEST PUSH2 0x5D7 SWAP1 PUSH2 0xD0D JUMP JUMPDEST DUP4 DUP3 CALLVALUE PUSH2 0x35D JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x35D JUMPI PUSH1 0x3 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP4 CALLVALUE PUSH2 0x222 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x222 JUMPI PUSH2 0x5D7 PUSH2 0xC3C PUSH2 0xC69 JUMP JUMPDEST PUSH2 0x93F PUSH2 0xEFE JUMP JUMPDEST DUP4 CALLVALUE PUSH2 0x222 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x222 JUMPI PUSH2 0x5D7 PUSH2 0xC61 PUSH2 0xC69 JUMP JUMPDEST PUSH2 0x93A PUSH2 0xEFE JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xC7F JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xC7F JUMPI JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xC7F JUMPI JUMP JUMPDEST PUSH1 0x40 PUSH1 0x3 NOT DUP3 ADD SLT PUSH2 0xC7F JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0xC7F JUMPI SWAP2 PUSH1 0x24 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 DUP4 DUP3 GT PUSH2 0xC7F JUMPI DUP1 PUSH1 0x23 DUP4 ADD SLT ISZERO PUSH2 0xC7F JUMPI DUP2 PUSH1 0x4 ADD CALLDATALOAD SWAP4 DUP5 GT PUSH2 0xC7F JUMPI PUSH1 0x24 DUP5 DUP4 ADD ADD GT PUSH2 0xC7F JUMPI PUSH1 0x24 ADD SWAP2 SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xD21 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xD21 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0xC7F JUMPI DUP1 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0xD21 JUMPI PUSH1 0x40 MLOAD SWAP3 PUSH2 0xD8E PUSH1 0x1F DUP5 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP6 PUSH2 0xD37 JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x20 DUP4 DUP4 ADD ADD GT PUSH2 0xC7F JUMPI DUP2 PUSH1 0x0 SWAP3 PUSH1 0x20 DUP1 SWAP4 ADD DUP4 DUP7 ADD CALLDATACOPY DUP4 ADD ADD MSTORE SWAP1 JUMP JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xC7F JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP3 MLOAD SWAP3 DUP4 DUP3 MSTORE PUSH1 0x0 JUMPDEST DUP5 DUP2 LT PUSH2 0xDF0 JUMPI POP POP DUP3 PUSH1 0x0 PUSH1 0x20 DUP1 SWAP5 SWAP6 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP4 ADD DUP2 ADD MLOAD DUP5 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0xDCF JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x60 SWAP4 DUP2 SWAP3 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP5 MSTORE PUSH1 0x40 PUSH1 0x20 DUP6 ADD MSTORE DUP2 PUSH1 0x40 DUP6 ADD MSTORE DUP5 DUP5 ADD CALLDATACOPY PUSH1 0x0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO PUSH2 0xE8A JUMPI PUSH1 0x20 DUP2 PUSH32 0xA061937CA7BFBA5C8E5D1690098F8008AA9B45A921BF2F7C8D9A3221CEEC49C6 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH1 0x2 SLOAD AND OR PUSH1 0x2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF1EAAB1 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO PUSH2 0xEEC JUMPI PUSH1 0x20 DUP2 PUSH32 0x90C3857C3FF172F31182E610725596CA9AF20F2F614B4B9BD22600FD81EB21CA SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH1 0x3 SLOAD AND OR PUSH1 0x3 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x451546BD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0xF12 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6DB2465F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND DUP3 MSTORE DUP5 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE SWAP3 SWAP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG1 AND SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL AND OR PUSH1 0x0 SSTORE JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4F ADDMOD CALLDATASIZE 0xF8 DUP13 0xF8 0x49 0xE9 PUSH17 0x3FCFA18C883DB8597EAF15C7BA02FBB4C1 PUSH2 0x56A7 SWAP5 BALANCE PUSH29 0x64736F6C63430008130033000000000000000000000000000000000000 ", "sourceMap": "124:988:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;124:988:0;;;;;;:::i;:::-;1212:787:2;;;:::i;:::-;-1:-1:-1;;;;;124:988:0;;;;1448:31:2;;1444:103;;124:988:0;;;;;1626:36:2;;;1622:120;;124:988:0;;;1839:40:2;124:988:0;;;;;1839:40:2;-1:-1:-1;;;;;;124:988:0;;;;;;1622:120:2;124:988:0;;;1686:44:2;;;;;;;;124:988:0;1686:44:2;1444:103;124:988:0;;-1:-1:-1;;;1503:32:2;;;124:988:0;;;;;;;;;;;;;-1:-1:-1;;124:988:0;;;;;;:::i;:::-;9370:314:1;;:::i;:::-;-1:-1:-1;;;;;9623:23:1;124:988:0;;9623:53:1;;;;;124:988:0;;;;;;;;;;;;;;;9623:53:1;;124:988:0;9623:53:1;;;124:988:0;9623:53:1;;;;;;;;;;124:988:0;;9623:53:1;;;;:::i;:::-;124:988:0;;9623:53:1;124:988:0;;;;9623:53:1;124:988:0;;;;;;;;9623:53:1;124:988:0;;;;;;;;;;;;;;;;-1:-1:-1;;124:988:0;;;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;14586:10:1;:21;;:47;;;124:988:0;14582:114:1;;10791:23;;;;124:988:0;10791:65:1;;;;;;124:988:0;;;;;;;10791:65:1;;;;124:988:0;10791:65:1;;;;;124:988:0;;;;;;;;;;;10791:65:1;;124:988:0;10791:65:1;;;;;;;;;;;;;;124:988:0;10935:61:1;;;;;;;124:988:0;;;;;;;;10935:61:1;;;;;;;;;124:988:0;;;;;;;;;;;10935:61:1;;;;;;;;;;124:988:0;;10935:61:1;124:988:0;;;10791:65:1;;;;:::i;:::-;124:988:0;;10791:65:1;;;;;124:988:0;;;;;;;;;14582:114:1;-1:-1:-1;124:988:0;;-1:-1:-1;;;14657:27:1;;;14586:47;124:988:0;;14625:8:1;124:988:0;;14586:10:1;14611:22;;14586:47;;124:988:0;;;;;;;;;;;;;;;;;;12173:8:1;124:988:0;;;-1:-1:-1;;;;;124:988:0;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;124:988:0;;;;;;;;;;;;;;;;;-1:-1:-1;;124:988:0;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;7356:347:1;;:::i;:::-;-1:-1:-1;;;;;7637:23:1;124:988:0;;;;;;7637:58:1;;;;;124:988:0;;;;;;;;;;;;;;;;;7637:58:1;;124:988:0;7637:58:1;;;124:988:0;;;;;;;;;;7637:58:1;;;;;;;;;;124:988:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;8793:352:1;;:::i;:::-;9071:23;-1:-1:-1;;;;;124:988:0;9071:66:1;;;;;124:988:0;;-1:-1:-1;;;9071:66:1;;-1:-1:-1;;;;;124:988:0;;;9071:66:1;;;124:988:0;;;;;;;;;;;;;;;-1:-1:-1;124:988:0;;;;;;;;9071:66:1;;;;;;;;;;;;;124:988:0;;;;;;;;;;;;:::i;:::-;5942:355:1;;;;:::i;:::-;6226:23;-1:-1:-1;;;;;124:988:0;;6226:63:1;;;;;124:988:0;;;6226:63:1;124:988:0;;;;;;;;;;;;6226:63:1;;;;;:::i;:::-;124:988:0;;;;;;;;;;;;;;;;3030:15:2;124:988:0;;-1:-1:-1;;;;;124:988:0;;3016:10:2;:29;3012:178;;124:988:0;;3287:33:2;124:988:0;;;;;3287:33:2;-1:-1:-1;;;;;;124:988:0;3030:15:2;124:988:0;3487:10:2;3016;3487;:::i;:::-;124:988:0;;3012:178:2;124:988:0;;-1:-1:-1;;;3148:30:2;;;124:988:0;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;124:988:0;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;124:988:0;;;14208:10:1;:21;;;:49;;124:988:0;14204:118:1;;124:988:0;;-1:-1:-1;;;11560:70:1;;124:988:0;;;11560:70:1;;;124:988:0;;;;;11560:23:1;124:988:0;;;11560:23:1;:70;124:988:0;;;;11560:70:1;;;;;;;;;;;124:988:0;11706:13:1;;11741:3;124:988:0;;11721:18:1;;;;;124:988:0;;;;;;;;;;11761:61:1;;;;;124:988:0;;;;;;11761:61:1;;;;;;124:988:0;;;;;;;;;;11761:61:1;;124:988:0;11761:61:1;;;;;;;;;;;;;;11741:3;-1:-1:-1;;;;124:988:0;;;;;;11706:13:1;;124:988:0;-1:-1:-1;;;124:988:0;;;;;;;;11761:61:1;;;;:::i;:::-;124:988:0;;11761:61:1;;;;;124:988:0;;;;;;;;;11761:61:1;124:988:0;;;11721:18:1;;11953:19;11721:18;;;-1:-1:-1;;;;;124:988:0;;11882:15:1;124:988:0;;11882:15:1;124:988:0;;;;;11953:19:1;124:988:0;;11560:70:1;;;;;;;;;;;;;:::i;:::-;;;124:988:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;11560:70:1;;;;;;;;124:988:0;;;;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;;;124:988:0;;;;;;;;11560:70:1;124:988:0;;;;;;;;;14204:118:1;124:988:0;-1:-1:-1;;;14281:29:1;;124:988:0;-1:-1:-1;14281:29:1;14208:49;124:988:0;;;;;14208:10:1;14233:24;;14208:49;;124:988:0;;;;;;-1:-1:-1;;124:988:0;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;740:9;761:42;740:9;:64;;:144;;;124:988;740:224;;;124:988;740:304;;;124:988;723:381;;-1:-1:-1;;;;;124:988:0;;;;4459:26:2;4455:93;;124:988:0;;;;4624:20:2;4620:83;;4760:12;;124:988:0;4760:12:2;124:988:0;4760:12:2;;5270:16:1;124:988:0;4760:12:2;;;;5197:14:1;124:988:0;4760:12:2;;124:988:0;4760:12:2;;;:::i;:::-;5197:14:1;:::i;:::-;5270:16;:::i;:::-;124:988:0;;;;;;;;;;;;5437:207:1;;;;124:988:0;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;5605:4:1;124:988:0;;;;;;;;;;5437:207:1;5467:23;;124:988:0;5437:207:1;;;;;;;;;;124:988:0;;;5437:207:1;124:988:0;5437:207:1;;;;;;;;;124:988:0;5437:207:1;;;:::i;:::-;;;124:988:0;;;;;;;:::i;:::-;;;;5437:207:1;;;-1:-1:-1;5437:207:1;;4620:83:2;124:988:0;;;;;4668:23:2;;;;;;;;124:988:0;4668:23:2;4455:93;124:988:0;;-1:-1:-1;;;4509:27:2;;124:988:0;;4509:27:2;723:381:0;124:988;;-1:-1:-1;;;1076:17:0;;124:988;;1076:17;740:304;:9;1001:42;740:9;980:64;;740:304;;:224;:9;921:42;740:9;900:64;;740:224;;:144;:9;841:42;740:9;820:64;;740:144;;124:988;;;;;;;;;;;;;;:::i;:::-;6651:431:1;;;;:::i;:::-;6964:23;-1:-1:-1;;;;;124:988:0;;6964:110:1;;;;;124:988:0;;;6964:110:1;124:988:0;;;;;;;;;;;;6964:110:1;;;;;:::i;124:988:0:-;;;;;;;;;;;;;;2162:532:2;;:::i;:::-;2390:33;124:988:0;;;;;;2390:33:2;2506:15;124:988:0;;-1:-1:-1;;;;;124:988:0;;2506:29:2;2502:99;;-1:-1:-1;;;;;;;;124:988:0;2506:15:2;124:988:0;;;2502:99:2;124:988:0;-1:-1:-1;;;2559:30:2;;;124:988:0;;;;;;;-1:-1:-1;;124:988:0;;;;;;;:::i;:::-;-1:-1:-1;;;;;124:988:0;10091:23:1;124:988:0;;;10091:45:1;;;;;124:988:0;;;;;;;;;;;;;10091:45:1;;124:988:0;10091:45:1;;;124:988:0;10091:45:1;;;;;;;;;;124:988:0;;;10091:45:1;;;;:::i;124:988:0:-;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;124:988:0;;;;;;;;;;;;;;;-1:-1:-1;;124:988:0;;;;8408:12:1;124:988:0;;:::i;:::-;8212:217:1;;:::i;124:988:0:-;;;;;;;-1:-1:-1;;124:988:0;;;;8039:10:1;124:988:0;;:::i;:::-;7851:207:1;;:::i;124:988:0:-;;;;-1:-1:-1;;;;;124:988:0;;;;;;:::o;:::-;;;;;;;;-1:-1:-1;;;;;124:988:0;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;124:988:0;;;;;;:::o;:::-;;-1:-1:-1;;124:988:0;;;;;;;-1:-1:-1;;;;;124:988:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;124:988:0;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;124:988:0;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;124:988:0;;;;;;:::o;:::-;;;;;;;;;-1:-1:-1;124:988:0;;;;;;;;;-1:-1:-1;124:988:0;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;124:988:0;;;;:::o;12665:282:1:-;-1:-1:-1;;;;;124:988:0;12774:24:1;;12770:92;;124:988:0;;12913:26:1;124:988:0;-1:-1:-1;;;;;124:988:0;;12874:21:1;124:988:0;;;12874:21:1;124:988:0;;;;;;12913:26:1;12665:282::o;12770:92::-;124:988:0;;-1:-1:-1;;;12822:28:1;;;;;13212:300;-1:-1:-1;;;;;124:988:0;13327:26:1;;13323:96;;124:988:0;;13474:30:1;124:988:0;-1:-1:-1;;;;;124:988:0;;13431:25:1;124:988:0;;;13431:25:1;124:988:0;;;;;;13474:30:1;13212:300::o;13323:96::-;124:988:0;;-1:-1:-1;;;13377:30:1;;;;;4885:183:2;3989:6;124:988:0;-1:-1:-1;;;;;124:988:0;4986:10:2;:21;4982:79;;4885:183::o;4982:79::-;124:988:0;;-1:-1:-1;;;5031:18:2;;;;;5270:238;5422:6;124:988:0;;;;-1:-1:-1;;;;;124:988:0;;;;;;;;;;;;;;;5401:38:2;;;124:988:0;;-1:-1:-1;;;;;124:988:0;;;;5422:6:2;124:988:0;5270:238:2:o"}}, "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signedZoneController\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CallerIsNotNewPotentialOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerIsNotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerIsNotOwnerOrRotator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerIsNotOwnerOrSanitizer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InitialOwnerIsNullAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDeployer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signedZoneController\",\"type\":\"address\"}],\"name\":\"InvalidSignedZoneController\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPotentialOwner\",\"type\":\"address\"}],\"name\":\"NewPotentialOwnerAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewPotentialOwnerIsNullAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoPotentialOwnerCurrentlySet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RotatorCannotBeNullAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SanitizerCannotBeNullAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPotentialOwner\",\"type\":\"address\"}],\"name\":\"PotentialOwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRotator\",\"type\":\"address\"}],\"name\":\"RotatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSanitizer\",\"type\":\"address\"}],\"name\":\"SanitizerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"}],\"name\":\"ZoneSanitized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"}],\"name\":\"acceptZoneOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelOwnershipTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"}],\"name\":\"cancelZoneOwnershipTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRotator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSanitizer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialRotator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialSanitizer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"zoneName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"apiEndpoint\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"documentationURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"zoneSalt\",\"type\":\"bytes32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"potentialOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signerToRemove\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signerToAdd\",\"type\":\"address\"}],\"name\":\"rotateSigners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"}],\"name\":\"sanitizeSignedZone\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPotentialOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newPotentialOwner\",\"type\":\"address\"}],\"name\":\"transferZoneOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRotator\",\"type\":\"address\"}],\"name\":\"updateRotator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSanitizer\",\"type\":\"address\"}],\"name\":\"updateSanitizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"newApiEndpoint\",\"type\":\"string\"}],\"name\":\"updateZoneAPIEndpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"newDocumentationURI\",\"type\":\"string\"}],\"name\":\"updateZoneDocumentationURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"updateZoneSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"CallerIsNotNewPotentialOwner()\":[{\"details\":\"Revert with an error when attempting to claim ownership of the      contract with a caller that is not the current potential owner.\"}],\"CallerIsNotOwner()\":[{\"details\":\"Revert with an error when attempting to call a function that      requires ownership with a caller that is not the owner.\"}],\"CallerIsNotOwnerOrRotator()\":[{\"details\":\"Revert with an error when attempting to call a function that      requires the caller to be the owner or rotator of the zone.\"}],\"CallerIsNotOwnerOrSanitizer()\":[{\"details\":\"Revert with an error when attempting to call a function that      requires the caller to be the owner or sanitizer of the zone.\"}],\"InitialOwnerIsNullAddress()\":[{\"details\":\"Revert with an error when attempting to register an initial owner      and supplying the null address.\"}],\"InvalidDeployer()\":[{\"details\":\"Revert with an error when attempting to deploy the contract with an      invalid deployer.\"}],\"InvalidSignedZoneController(address)\":[{\"details\":\"Revert with an error when attempting to set a zone controller      that does not contain contract code.\",\"params\":{\"signedZoneController\":\"The invalid address.\"}}],\"NewPotentialOwnerAlreadySet(address)\":[{\"details\":\"Revert with an error when attempting to set a new potential owner      that is already set.\"}],\"NewPotentialOwnerIsNullAddress()\":[{\"details\":\"Revert with an error when attempting to register a new potential      owner and supplying the null address.\"}],\"NoPotentialOwnerCurrentlySet()\":[{\"details\":\"Revert with an error when attempting to cancel ownership transfer      when no new potential owner is currently set.\"}],\"OwnerAlreadySet(address)\":[{\"details\":\"Revert with an error when attempting to call a function that      requires the owner to not have been set.\"}],\"RotatorCannotBeNullAddress()\":[{\"details\":\"Revert with an error when attempting to set the rotator      to the null address.\"}],\"SanitizerCannotBeNullAddress()\":[{\"details\":\"Revert with an error when attempting to set the sanitizer      to the null address.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"details\":\"Emit an event whenever contract ownership is transferred.\",\"params\":{\"newOwner\":\"The new owner of the contract.\",\"previousOwner\":\"The previous owner of the contract.\"}},\"PotentialOwnerUpdated(address)\":{\"details\":\"Emit an event whenever the contract owner registers a new potential      owner.\",\"params\":{\"newPotentialOwner\":\"The new potential owner of the contract.\"}},\"RotatorUpdated(address)\":{\"details\":\"Emit an event when the contract owner updates the rotator.\",\"params\":{\"newRotator\":\"The new rotator of the contract.\"}},\"SanitizerUpdated(address)\":{\"details\":\"Emit an event when the contract owner updates the sanitizer.\",\"params\":{\"newSanitizer\":\"The new sanitizer of the contract.\"}},\"ZoneSanitized(address)\":{\"details\":\"Emit an event when the sanitizer sanitizes a zone.\",\"params\":{\"zone\":\"The zone address being sanitized.\"}}},\"kind\":\"dev\",\"methods\":{\"acceptZoneOwnership(address)\":{\"params\":{\"zone\":\"The zone for which to accept ownership transfer.\"}},\"cancelZoneOwnershipTransfer(address)\":{\"params\":{\"zone\":\"The zone for which to cancel ownership transfer.\"}},\"getRotator()\":{\"returns\":{\"_0\":\"The rotator address.\"}},\"getSanitizer()\":{\"returns\":{\"_0\":\"The sanitizer address.\"}},\"initialize(address,address,address,string,string,string,bytes32)\":{\"params\":{\"apiEndpoint\":\"The API endpoint of the zone being created.\",\"documentationURI\":\"The documentation URI of the zone being created.\",\"initialOwner\":\"The address to be set as the owner.\",\"initialRotator\":\"The address to be set as the rotator.\",\"initialSanitizer\":\"The address to be set as the sanitizer.\",\"zoneName\":\"The name of the zone being created.\",\"zoneSalt\":\"The salt to use when creating the zone.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the owner.\"}},\"potentialOwner()\":{\"returns\":{\"_0\":\"The address of the potential owner.\"}},\"rotateSigners(address,address,address)\":{\"params\":{\"signerToAdd\":\"The signer to add.\",\"signerToRemove\":\"The signer to remove.\",\"zone\":\"The zone to rotate the signers for.\"}},\"sanitizeSignedZone(address)\":{\"params\":{\"zone\":\"The zone to revoke.\"}},\"transferOwnership(address)\":{\"params\":{\"newPotentialOwner\":\"The address for which to initiate ownership                          transfer to.\"}},\"transferZoneOwnership(address,address)\":{\"params\":{\"newPotentialOwner\":\"The new potential owner to set.\",\"zone\":\"The zone for which to initiate ownership                          transfer.\"}},\"updateRotator(address)\":{\"params\":{\"newRotator\":\"The new rotator of the captain.\"}},\"updateSanitizer(address)\":{\"params\":{\"newSanitizer\":\"The new sanitizer of the captain.\"}},\"updateZoneAPIEndpoint(address,string)\":{\"params\":{\"newApiEndpoint\":\"The new API endpoint.\",\"zone\":\"The signed zone to update the API endpoint for.\"}},\"updateZoneDocumentationURI(address,string)\":{\"params\":{\"newDocumentationURI\":\"The new documentation URI.\",\"zone\":\"The signed zone to update the API endpoint                            for.\"}},\"updateZoneSigner(address,address,bool)\":{\"params\":{\"active\":\"If the signer should be active or not.\",\"signer\":\"The signer to update.\",\"zone\":\"The signed zone to update the signer for.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Accept ownership of this contract. Only the account that the         current owner has set as the new potential owner may call this         function.\"},\"acceptZoneOwnership(address)\":{\"notice\":\"Accept ownership of a given zone once the address has been set         as the current potential owner. Only callable by the owner.\"},\"cancelOwnershipTransfer()\":{\"notice\":\"Clear the currently set potential owner, if any. Only the owner         of this contract may call this function.\"},\"cancelZoneOwnershipTransfer(address)\":{\"notice\":\"Clear the currently set potential owner, if any, from a zone.         Only callable by the owner.\"},\"getRotator()\":{\"notice\":\"Get the rotator address.\"},\"getSanitizer()\":{\"notice\":\"Get the sanitizer address.\"},\"initialize(address,address,address,string,string,string,bytes32)\":{\"notice\":\"External initialization called by the deployer to set the owner,         rotator and sanitizer, and create a signed zone with the given         name, API endpoint, documentation URI. This function can only be         called once, as there is a check to ensure that the current         owner is address(0) before the initialization is performed, the         owner must then be set to a non address(0) address during         initialization and finally the owner cannot be set to address(0)         after initialization.\"},\"owner()\":{\"notice\":\"A public view function that returns the owner.\"},\"potentialOwner()\":{\"notice\":\"An external view function that returns the potential owner.\"},\"rotateSigners(address,address,address)\":{\"notice\":\"Rotate the signers for a given zone. Only callable by the owner         or the rotator of the zone.\"},\"sanitizeSignedZone(address)\":{\"notice\":\"This will remove all active signers of the given zone and clear         the rotator address on the captain. Only callable by the owner         or the sanitizer of the zone.\"},\"transferOwnership(address)\":{\"notice\":\"Initiate ownership transfer by assigning a new potential owner         to this contract. Once set, the new potential owner may call         `acceptOwnership` to claim ownership. Only the owner may call         this function.\"},\"transferZoneOwnership(address,address)\":{\"notice\":\"Initiate zone ownership transfer by assigning a new potential         owner for the given zone. Only callable by the owner.\"},\"updateRotator(address)\":{\"notice\":\"Update the rotator role on the captain.\"},\"updateSanitizer(address)\":{\"notice\":\"Update the sanitizer role on the captain.\"},\"updateZoneAPIEndpoint(address,string)\":{\"notice\":\"Update the API endpoint returned by the supplied zone.         Only the owner can call this function.\"},\"updateZoneDocumentationURI(address,string)\":{\"notice\":\"Update the documentationURI returned by a zone. Only the owner         of the supplied zone can call this function.\"},\"updateZoneSigner(address,address,bool)\":{\"notice\":\"Update the signer for a given signed zone.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"01_07_OpenSeaSignedZoneCaptain.sol\":\"OpenSeaSignedZoneCaptain\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"01_07_OpenSeaSignedZoneCaptain.sol\":{\"keccak256\":\"0xa25c776fd1c10080267c0365e6117aa02a6cd73379c2e30ead778b6b588457e6\",\"urls\":[\"bzz-raw://80a3af2951425d5fc6ebb2ba75b96f31c29e9e05f31ccc8ae566b590b8bedc9d\",\"dweb:/ipfs/QmbkTLFFDKuuJjEhomiXydZAKJe1DBorkwrJEmEVmwFsFD\"]},\"02_07_SignedZoneCaptain.sol\":{\"keccak256\":\"0x1997c60734786b06826669f3335b0fc6af0e7c10e2b4a5d1c7d8eeb5428c94f0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4d76b655be56a69ef824b058408bfa77b61d36cc97dbe3a63cd126326028e3df\",\"dweb:/ipfs/QmPeCkfQ5Mc8JPwYvznjfwMjhkvnKEZzUvDwYV8u2ucLi9\"]},\"03_07_TwoStepOwnable.sol\":{\"keccak256\":\"0x91bf1b66ee3032f81f626e8b1de5f6dee1f0b5fed50bd121eded2d0262593cdd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://31ddb4c0ba0b4f7f2c117836d242b02b460b56c00538b29342d07ce596b3cbb1\",\"dweb:/ipfs/QmNgRWz57qpZdgot9b5kdEiC1scJGnGMuzo17V8JkgFXN3\"]},\"04_07_SignedZoneCaptainInterface.sol\":{\"keccak256\":\"0x363b3f2f56a0a10efb88a2b8319433aec0c23df1bd26b0374ce1a670741a7f71\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1f6164618a12a8ce29f4d6ca8e879fb237a4d0d825652d8eba813eeab0b20c14\",\"dweb:/ipfs/QmSLWGni1vsrqqoE6w8RGAXSbXVVYVxFGJ8K5JhHTC92pF\"]},\"05_07_SignedZoneControllerInterface.sol\":{\"keccak256\":\"0xa948eb62a1b1d7c1b3e1b55b5e05c96c8c557f251db15c8a07bf12ee8bd6517d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://245edcc4f245b3386c23c7b5414845b4430eb59b3ff555400be9aa58a05030f0\",\"dweb:/ipfs/QmUAMaCyj2VbmppwajghANGMPfMZyqvVBBwJJKJTGhkyY1\"]},\"06_07_SignedZoneCaptainEventsAndErrors.sol\":{\"keccak256\":\"0x8da71596bacc106da06980e3e3f52e06935d617009fce10dc3b9014b36cfbb25\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://048b2594d54ef761d1b1b72669694cfe9f5f4f12888107b3b9b865854bce7f71\",\"dweb:/ipfs/QmY4U7PetQFvfTHMWdnphrkhKuh5N21bYkc432Ud7B3XK8\"]},\"07_07_TwoStepOwnableInterface.sol\":{\"keccak256\":\"0x4f9847b170095546488a6dfbb3d3c619bdb58829ebc2468d48b83cb6acfe224e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bf874724046b8b00f6290a3dfa9dc7c94ce18a2c0ad139d4a99745a15318beab\",\"dweb:/ipfs/QmXXAN3akSkYPcRcie9x3SKrcj53eayv3k9ybcTsLjUkHJ\"]}},\"version\":1}", "userdoc": {"kind": "user", "methods": {"acceptOwnership()": {"notice": "Accept ownership of this contract. Only the account that the         current owner has set as the new potential owner may call this         function."}, "acceptZoneOwnership(address)": {"notice": "Accept ownership of a given zone once the address has been set         as the current potential owner. Only callable by the owner."}, "cancelOwnershipTransfer()": {"notice": "Clear the currently set potential owner, if any. Only the owner         of this contract may call this function."}, "cancelZoneOwnershipTransfer(address)": {"notice": "Clear the currently set potential owner, if any, from a zone.         Only callable by the owner."}, "getRotator()": {"notice": "Get the rotator address."}, "getSanitizer()": {"notice": "Get the sanitizer address."}, "initialize(address,address,address,string,string,string,bytes32)": {"notice": "External initialization called by the deployer to set the owner,         rotator and sanitizer, and create a signed zone with the given         name, API endpoint, documentation URI. This function can only be         called once, as there is a check to ensure that the current         owner is address(0) before the initialization is performed, the         owner must then be set to a non address(0) address during         initialization and finally the owner cannot be set to address(0)         after initialization."}, "owner()": {"notice": "A public view function that returns the owner."}, "potentialOwner()": {"notice": "An external view function that returns the potential owner."}, "rotateSigners(address,address,address)": {"notice": "Rotate the signers for a given zone. Only callable by the owner         or the rotator of the zone."}, "sanitizeSignedZone(address)": {"notice": "This will remove all active signers of the given zone and clear         the rotator address on the captain. Only callable by the owner         or the sanitizer of the zone."}, "transferOwnership(address)": {"notice": "Initiate ownership transfer by assigning a new potential owner         to this contract. Once set, the new potential owner may call         `acceptOwnership` to claim ownership. Only the owner may call         this function."}, "transferZoneOwnership(address,address)": {"notice": "Initiate zone ownership transfer by assigning a new potential         owner for the given zone. Only callable by the owner."}, "updateRotator(address)": {"notice": "Update the rotator role on the captain."}, "updateSanitizer(address)": {"notice": "Update the sanitizer role on the captain."}, "updateZoneAPIEndpoint(address,string)": {"notice": "Update the API endpoint returned by the supplied zone.         Only the owner can call this function."}, "updateZoneDocumentationURI(address,string)": {"notice": "Update the documentationURI returned by a zone. Only the owner         of the supplied zone can call this function."}, "updateZoneSigner(address,address,bool)": {"notice": "Update the signer for a given signed zone."}}, "version": 1}}}, "02_07_SignedZoneCaptain.sol": {"SignedZoneCaptain": {"abi": [{"inputs": [], "name": "CallerIsNotNewPotentialOwner", "type": "error"}, {"inputs": [], "name": "CallerIsNotOwner", "type": "error"}, {"inputs": [], "name": "CallerIsNotOwnerOrRotator", "type": "error"}, {"inputs": [], "name": "CallerIsNotOwnerOrSanitizer", "type": "error"}, {"inputs": [], "name": "InitialOwnerIsNullAddress", "type": "error"}, {"inputs": [], "name": "InvalidDeployer", "type": "error"}, {"inputs": [{"internalType": "address", "name": "signedZoneController", "type": "address"}], "name": "InvalidSignedZoneController", "type": "error"}, {"inputs": [{"internalType": "address", "name": "newPotentialOwner", "type": "address"}], "name": "NewPotentialOwnerAlreadySet", "type": "error"}, {"inputs": [], "name": "NewPotentialOwnerIsNullAddress", "type": "error"}, {"inputs": [], "name": "NoPotentialOwnerCurrentlySet", "type": "error"}, {"inputs": [{"internalType": "address", "name": "owner", "type": "address"}], "name": "OwnerAlreadySet", "type": "error"}, {"inputs": [], "name": "RotatorCannotBeNullAddress", "type": "error"}, {"inputs": [], "name": "SanitizerCannotBeNullAddress", "type": "error"}, {"anonymous": false, "inputs": [{"indexed": false, "internalType": "address", "name": "previousOwner", "type": "address"}, {"indexed": false, "internalType": "address", "name": "newOwner", "type": "address"}], "name": "OwnershipTransferred", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": false, "internalType": "address", "name": "newPotentialOwner", "type": "address"}], "name": "PotentialOwnerUpdated", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": false, "internalType": "address", "name": "newRotator", "type": "address"}], "name": "RotatorUpdated", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": false, "internalType": "address", "name": "newSanitizer", "type": "address"}], "name": "SanitizerUpdated", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": false, "internalType": "address", "name": "zone", "type": "address"}], "name": "ZoneSanitized", "type": "event"}, {"inputs": [], "name": "acceptOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "address", "name": "zone", "type": "address"}], "name": "acceptZoneOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [], "name": "cancelOwnershipTransfer", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "address", "name": "zone", "type": "address"}], "name": "cancelZoneOwnershipTransfer", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [], "name": "getRotator", "outputs": [{"internalType": "address", "name": "", "type": "address"}], "stateMutability": "view", "type": "function"}, {"inputs": [], "name": "getSanitizer", "outputs": [{"internalType": "address", "name": "", "type": "address"}], "stateMutability": "view", "type": "function"}, {"inputs": [{"internalType": "address", "name": "initialOwner", "type": "address"}, {"internalType": "address", "name": "initialRotator", "type": "address"}, {"internalType": "address", "name": "initialSanitizer", "type": "address"}, {"internalType": "string", "name": "zoneName", "type": "string"}, {"internalType": "string", "name": "apiEndpoint", "type": "string"}, {"internalType": "string", "name": "documentationURI", "type": "string"}, {"internalType": "bytes32", "name": "zoneSalt", "type": "bytes32"}], "name": "initialize", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [], "name": "owner", "outputs": [{"internalType": "address", "name": "", "type": "address"}], "stateMutability": "view", "type": "function"}, {"inputs": [], "name": "potentialOwner", "outputs": [{"internalType": "address", "name": "", "type": "address"}], "stateMutability": "view", "type": "function"}, {"inputs": [{"internalType": "address", "name": "zone", "type": "address"}, {"internalType": "address", "name": "signerToRemove", "type": "address"}, {"internalType": "address", "name": "signerToAdd", "type": "address"}], "name": "rotateSigners", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "address", "name": "zone", "type": "address"}], "name": "sanitizeSignedZone", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "address", "name": "newPotentialOwner", "type": "address"}], "name": "transferOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "address", "name": "zone", "type": "address"}, {"internalType": "address", "name": "newPotentialOwner", "type": "address"}], "name": "transferZoneOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "address", "name": "newRotator", "type": "address"}], "name": "updateRotator", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "address", "name": "newSanitizer", "type": "address"}], "name": "updateSanitizer", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "address", "name": "zone", "type": "address"}, {"internalType": "string", "name": "newApiEndpoint", "type": "string"}], "name": "updateZoneAPIEndpoint", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "address", "name": "zone", "type": "address"}, {"internalType": "string", "name": "newDocumentationURI", "type": "string"}], "name": "updateZoneDocumentationURI", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "address", "name": "zone", "type": "address"}, {"internalType": "address", "name": "signer", "type": "address"}, {"internalType": "bool", "name": "active", "type": "bool"}], "name": "updateZoneSigner", "outputs": [], "stateMutability": "nonpayable", "type": "function"}], "devdoc": {"author": "BCLeFevre", "errors": {"CallerIsNotNewPotentialOwner()": [{"details": "Revert with an error when attempting to claim ownership of the      contract with a caller that is not the current potential owner."}], "CallerIsNotOwner()": [{"details": "Revert with an error when attempting to call a function that      requires ownership with a caller that is not the owner."}], "CallerIsNotOwnerOrRotator()": [{"details": "Revert with an error when attempting to call a function that      requires the caller to be the owner or rotator of the zone."}], "CallerIsNotOwnerOrSanitizer()": [{"details": "Revert with an error when attempting to call a function that      requires the caller to be the owner or sanitizer of the zone."}], "InitialOwnerIsNullAddress()": [{"details": "Revert with an error when attempting to register an initial owner      and supplying the null address."}], "InvalidDeployer()": [{"details": "Revert with an error when attempting to deploy the contract with an      invalid deployer."}], "InvalidSignedZoneController(address)": [{"details": "Revert with an error when attempting to set a zone controller      that does not contain contract code.", "params": {"signedZoneController": "The invalid address."}}], "NewPotentialOwnerAlreadySet(address)": [{"details": "Revert with an error when attempting to set a new potential owner      that is already set."}], "NewPotentialOwnerIsNullAddress()": [{"details": "Revert with an error when attempting to register a new potential      owner and supplying the null address."}], "NoPotentialOwnerCurrentlySet()": [{"details": "Revert with an error when attempting to cancel ownership transfer      when no new potential owner is currently set."}], "OwnerAlreadySet(address)": [{"details": "Revert with an error when attempting to call a function that      requires the owner to not have been set."}], "RotatorCannotBeNullAddress()": [{"details": "Revert with an error when attempting to set the rotator      to the null address."}], "SanitizerCannotBeNullAddress()": [{"details": "Revert with an error when attempting to set the sanitizer      to the null address."}]}, "events": {"OwnershipTransferred(address,address)": {"details": "Emit an event whenever contract ownership is transferred.", "params": {"newOwner": "The new owner of the contract.", "previousOwner": "The previous owner of the contract."}}, "PotentialOwnerUpdated(address)": {"details": "Emit an event whenever the contract owner registers a new potential      owner.", "params": {"newPotentialOwner": "The new potential owner of the contract."}}, "RotatorUpdated(address)": {"details": "Emit an event when the contract owner updates the rotator.", "params": {"newRotator": "The new rotator of the contract."}}, "SanitizerUpdated(address)": {"details": "Emit an event when the contract owner updates the sanitizer.", "params": {"newSanitizer": "The new sanitizer of the contract."}}, "ZoneSanitized(address)": {"details": "Emit an event when the sanitizer sanitizes a zone.", "params": {"zone": "The zone address being sanitized."}}}, "kind": "dev", "methods": {"acceptZoneOwnership(address)": {"params": {"zone": "The zone for which to accept ownership transfer."}}, "cancelZoneOwnershipTransfer(address)": {"params": {"zone": "The zone for which to cancel ownership transfer."}}, "constructor": {"details": "Initialize contract by setting the signed zone controller.", "params": {"signedZoneController": "The address of the signed zone controller."}}, "getRotator()": {"returns": {"_0": "The rotator address."}}, "getSanitizer()": {"returns": {"_0": "The sanitizer address."}}, "initialize(address,address,address,string,string,string,bytes32)": {"params": {"apiEndpoint": "The API endpoint of the zone being created.", "documentationURI": "The documentation URI of the zone being created.", "initialOwner": "The address to be set as the owner.", "initialRotator": "The address to be set as the rotator.", "initialSanitizer": "The address to be set as the sanitizer.", "zoneName": "The name of the zone being created.", "zoneSalt": "The salt to use when creating the zone."}}, "owner()": {"returns": {"_0": "The address of the owner."}}, "potentialOwner()": {"returns": {"_0": "The address of the potential owner."}}, "rotateSigners(address,address,address)": {"params": {"signerToAdd": "The signer to add.", "signerToRemove": "The signer to remove.", "zone": "The zone to rotate the signers for."}}, "sanitizeSignedZone(address)": {"params": {"zone": "The zone to revoke."}}, "transferOwnership(address)": {"params": {"newPotentialOwner": "The address for which to initiate ownership                          transfer to."}}, "transferZoneOwnership(address,address)": {"params": {"newPotentialOwner": "The new potential owner to set.", "zone": "The zone for which to initiate ownership                          transfer."}}, "updateRotator(address)": {"params": {"newRotator": "The new rotator of the captain."}}, "updateSanitizer(address)": {"params": {"newSanitizer": "The new sanitizer of the captain."}}, "updateZoneAPIEndpoint(address,string)": {"params": {"newApiEndpoint": "The new API endpoint.", "zone": "The signed zone to update the API endpoint for."}}, "updateZoneDocumentationURI(address,string)": {"params": {"newDocumentationURI": "The new documentation URI.", "zone": "The signed zone to update the API endpoint                            for."}}, "updateZoneSigner(address,address,bool)": {"params": {"active": "If the signer should be active or not.", "signer": "The signer to update.", "zone": "The signed zone to update the signer for."}}}, "title": "SignedZoneCaptain", "version": 1}, "evm": {"bytecode": {"functionDebugData": {}, "generatedSources": [], "linkReferences": {}, "object": "", "opcodes": "", "sourceMap": ""}, "deployedBytecode": {"functionDebugData": {}, "generatedSources": [], "immutableReferences": {}, "linkReferences": {}, "object": "", "opcodes": "", "sourceMap": ""}}, "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CallerIsNotNewPotentialOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerIsNotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerIsNotOwnerOrRotator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerIsNotOwnerOrSanitizer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InitialOwnerIsNullAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDeployer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signedZoneController\",\"type\":\"address\"}],\"name\":\"InvalidSignedZoneController\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPotentialOwner\",\"type\":\"address\"}],\"name\":\"NewPotentialOwnerAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewPotentialOwnerIsNullAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoPotentialOwnerCurrentlySet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RotatorCannotBeNullAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SanitizerCannotBeNullAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPotentialOwner\",\"type\":\"address\"}],\"name\":\"PotentialOwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRotator\",\"type\":\"address\"}],\"name\":\"RotatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSanitizer\",\"type\":\"address\"}],\"name\":\"SanitizerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"}],\"name\":\"ZoneSanitized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"}],\"name\":\"acceptZoneOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelOwnershipTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"}],\"name\":\"cancelZoneOwnershipTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRotator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSanitizer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialRotator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialSanitizer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"zoneName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"apiEndpoint\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"documentationURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"zoneSalt\",\"type\":\"bytes32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"potentialOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signerToRemove\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signerToAdd\",\"type\":\"address\"}],\"name\":\"rotateSigners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"}],\"name\":\"sanitizeSignedZone\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPotentialOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newPotentialOwner\",\"type\":\"address\"}],\"name\":\"transferZoneOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRotator\",\"type\":\"address\"}],\"name\":\"updateRotator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSanitizer\",\"type\":\"address\"}],\"name\":\"updateSanitizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"newApiEndpoint\",\"type\":\"string\"}],\"name\":\"updateZoneAPIEndpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"newDocumentationURI\",\"type\":\"string\"}],\"name\":\"updateZoneDocumentationURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"updateZoneSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"BCLeFevre\",\"errors\":{\"CallerIsNotNewPotentialOwner()\":[{\"details\":\"Revert with an error when attempting to claim ownership of the      contract with a caller that is not the current potential owner.\"}],\"CallerIsNotOwner()\":[{\"details\":\"Revert with an error when attempting to call a function that      requires ownership with a caller that is not the owner.\"}],\"CallerIsNotOwnerOrRotator()\":[{\"details\":\"Revert with an error when attempting to call a function that      requires the caller to be the owner or rotator of the zone.\"}],\"CallerIsNotOwnerOrSanitizer()\":[{\"details\":\"Revert with an error when attempting to call a function that      requires the caller to be the owner or sanitizer of the zone.\"}],\"InitialOwnerIsNullAddress()\":[{\"details\":\"Revert with an error when attempting to register an initial owner      and supplying the null address.\"}],\"InvalidDeployer()\":[{\"details\":\"Revert with an error when attempting to deploy the contract with an      invalid deployer.\"}],\"InvalidSignedZoneController(address)\":[{\"details\":\"Revert with an error when attempting to set a zone controller      that does not contain contract code.\",\"params\":{\"signedZoneController\":\"The invalid address.\"}}],\"NewPotentialOwnerAlreadySet(address)\":[{\"details\":\"Revert with an error when attempting to set a new potential owner      that is already set.\"}],\"NewPotentialOwnerIsNullAddress()\":[{\"details\":\"Revert with an error when attempting to register a new potential      owner and supplying the null address.\"}],\"NoPotentialOwnerCurrentlySet()\":[{\"details\":\"Revert with an error when attempting to cancel ownership transfer      when no new potential owner is currently set.\"}],\"OwnerAlreadySet(address)\":[{\"details\":\"Revert with an error when attempting to call a function that      requires the owner to not have been set.\"}],\"RotatorCannotBeNullAddress()\":[{\"details\":\"Revert with an error when attempting to set the rotator      to the null address.\"}],\"SanitizerCannotBeNullAddress()\":[{\"details\":\"Revert with an error when attempting to set the sanitizer      to the null address.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"details\":\"Emit an event whenever contract ownership is transferred.\",\"params\":{\"newOwner\":\"The new owner of the contract.\",\"previousOwner\":\"The previous owner of the contract.\"}},\"PotentialOwnerUpdated(address)\":{\"details\":\"Emit an event whenever the contract owner registers a new potential      owner.\",\"params\":{\"newPotentialOwner\":\"The new potential owner of the contract.\"}},\"RotatorUpdated(address)\":{\"details\":\"Emit an event when the contract owner updates the rotator.\",\"params\":{\"newRotator\":\"The new rotator of the contract.\"}},\"SanitizerUpdated(address)\":{\"details\":\"Emit an event when the contract owner updates the sanitizer.\",\"params\":{\"newSanitizer\":\"The new sanitizer of the contract.\"}},\"ZoneSanitized(address)\":{\"details\":\"Emit an event when the sanitizer sanitizes a zone.\",\"params\":{\"zone\":\"The zone address being sanitized.\"}}},\"kind\":\"dev\",\"methods\":{\"acceptZoneOwnership(address)\":{\"params\":{\"zone\":\"The zone for which to accept ownership transfer.\"}},\"cancelZoneOwnershipTransfer(address)\":{\"params\":{\"zone\":\"The zone for which to cancel ownership transfer.\"}},\"constructor\":{\"details\":\"Initialize contract by setting the signed zone controller.\",\"params\":{\"signedZoneController\":\"The address of the signed zone controller.\"}},\"getRotator()\":{\"returns\":{\"_0\":\"The rotator address.\"}},\"getSanitizer()\":{\"returns\":{\"_0\":\"The sanitizer address.\"}},\"initialize(address,address,address,string,string,string,bytes32)\":{\"params\":{\"apiEndpoint\":\"The API endpoint of the zone being created.\",\"documentationURI\":\"The documentation URI of the zone being created.\",\"initialOwner\":\"The address to be set as the owner.\",\"initialRotator\":\"The address to be set as the rotator.\",\"initialSanitizer\":\"The address to be set as the sanitizer.\",\"zoneName\":\"The name of the zone being created.\",\"zoneSalt\":\"The salt to use when creating the zone.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the owner.\"}},\"potentialOwner()\":{\"returns\":{\"_0\":\"The address of the potential owner.\"}},\"rotateSigners(address,address,address)\":{\"params\":{\"signerToAdd\":\"The signer to add.\",\"signerToRemove\":\"The signer to remove.\",\"zone\":\"The zone to rotate the signers for.\"}},\"sanitizeSignedZone(address)\":{\"params\":{\"zone\":\"The zone to revoke.\"}},\"transferOwnership(address)\":{\"params\":{\"newPotentialOwner\":\"The address for which to initiate ownership                          transfer to.\"}},\"transferZoneOwnership(address,address)\":{\"params\":{\"newPotentialOwner\":\"The new potential owner to set.\",\"zone\":\"The zone for which to initiate ownership                          transfer.\"}},\"updateRotator(address)\":{\"params\":{\"newRotator\":\"The new rotator of the captain.\"}},\"updateSanitizer(address)\":{\"params\":{\"newSanitizer\":\"The new sanitizer of the captain.\"}},\"updateZoneAPIEndpoint(address,string)\":{\"params\":{\"newApiEndpoint\":\"The new API endpoint.\",\"zone\":\"The signed zone to update the API endpoint for.\"}},\"updateZoneDocumentationURI(address,string)\":{\"params\":{\"newDocumentationURI\":\"The new documentation URI.\",\"zone\":\"The signed zone to update the API endpoint                            for.\"}},\"updateZoneSigner(address,address,bool)\":{\"params\":{\"active\":\"If the signer should be active or not.\",\"signer\":\"The signer to update.\",\"zone\":\"The signed zone to update the signer for.\"}}},\"title\":\"SignedZoneCaptain\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Accept ownership of this contract. Only the account that the         current owner has set as the new potential owner may call this         function.\"},\"acceptZoneOwnership(address)\":{\"notice\":\"Accept ownership of a given zone once the address has been set         as the current potential owner. Only callable by the owner.\"},\"cancelOwnershipTransfer()\":{\"notice\":\"Clear the currently set potential owner, if any. Only the owner         of this contract may call this function.\"},\"cancelZoneOwnershipTransfer(address)\":{\"notice\":\"Clear the currently set potential owner, if any, from a zone.         Only callable by the owner.\"},\"getRotator()\":{\"notice\":\"Get the rotator address.\"},\"getSanitizer()\":{\"notice\":\"Get the sanitizer address.\"},\"initialize(address,address,address,string,string,string,bytes32)\":{\"notice\":\"External initialization called by the deployer to set the owner,         rotator and sanitizer, and create a signed zone with the given         name, API endpoint, documentation URI. This function can only be         called once, as there is a check to ensure that the current         owner is address(0) before the initialization is performed, the         owner must then be set to a non address(0) address during         initialization and finally the owner cannot be set to address(0)         after initialization.\"},\"owner()\":{\"notice\":\"A public view function that returns the owner.\"},\"potentialOwner()\":{\"notice\":\"An external view function that returns the potential owner.\"},\"rotateSigners(address,address,address)\":{\"notice\":\"Rotate the signers for a given zone. Only callable by the owner         or the rotator of the zone.\"},\"sanitizeSignedZone(address)\":{\"notice\":\"This will remove all active signers of the given zone and clear         the rotator address on the captain. Only callable by the owner         or the sanitizer of the zone.\"},\"transferOwnership(address)\":{\"notice\":\"Initiate ownership transfer by assigning a new potential owner         to this contract. Once set, the new potential owner may call         `acceptOwnership` to claim ownership. Only the owner may call         this function.\"},\"transferZoneOwnership(address,address)\":{\"notice\":\"Initiate zone ownership transfer by assigning a new potential         owner for the given zone. Only callable by the owner.\"},\"updateRotator(address)\":{\"notice\":\"Update the rotator role on the captain.\"},\"updateSanitizer(address)\":{\"notice\":\"Update the sanitizer role on the captain.\"},\"updateZoneAPIEndpoint(address,string)\":{\"notice\":\"Update the API endpoint returned by the supplied zone.         Only the owner can call this function.\"},\"updateZoneDocumentationURI(address,string)\":{\"notice\":\"Update the documentationURI returned by a zone. Only the owner         of the supplied zone can call this function.\"},\"updateZoneSigner(address,address,bool)\":{\"notice\":\"Update the signer for a given signed zone.\"}},\"notice\":\"SignedZoneCaptain is a contract that owns signed zones and manages         their active signers via two roles. The rotator role can update         the active signers of a zone. The sanitizer role can remove all         active signers of a zone controlled by the captain and clear the         rotator role on the captain.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"02_07_SignedZoneCaptain.sol\":\"SignedZoneCaptain\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"02_07_SignedZoneCaptain.sol\":{\"keccak256\":\"0x1997c60734786b06826669f3335b0fc6af0e7c10e2b4a5d1c7d8eeb5428c94f0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4d76b655be56a69ef824b058408bfa77b61d36cc97dbe3a63cd126326028e3df\",\"dweb:/ipfs/QmPeCkfQ5Mc8JPwYvznjfwMjhkvnKEZzUvDwYV8u2ucLi9\"]},\"03_07_TwoStepOwnable.sol\":{\"keccak256\":\"0x91bf1b66ee3032f81f626e8b1de5f6dee1f0b5fed50bd121eded2d0262593cdd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://31ddb4c0ba0b4f7f2c117836d242b02b460b56c00538b29342d07ce596b3cbb1\",\"dweb:/ipfs/QmNgRWz57qpZdgot9b5kdEiC1scJGnGMuzo17V8JkgFXN3\"]},\"04_07_SignedZoneCaptainInterface.sol\":{\"keccak256\":\"0x363b3f2f56a0a10efb88a2b8319433aec0c23df1bd26b0374ce1a670741a7f71\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1f6164618a12a8ce29f4d6ca8e879fb237a4d0d825652d8eba813eeab0b20c14\",\"dweb:/ipfs/QmSLWGni1vsrqqoE6w8RGAXSbXVVYVxFGJ8K5JhHTC92pF\"]},\"05_07_SignedZoneControllerInterface.sol\":{\"keccak256\":\"0xa948eb62a1b1d7c1b3e1b55b5e05c96c8c557f251db15c8a07bf12ee8bd6517d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://245edcc4f245b3386c23c7b5414845b4430eb59b3ff555400be9aa58a05030f0\",\"dweb:/ipfs/QmUAMaCyj2VbmppwajghANGMPfMZyqvVBBwJJKJTGhkyY1\"]},\"06_07_SignedZoneCaptainEventsAndErrors.sol\":{\"keccak256\":\"0x8da71596bacc106da06980e3e3f52e06935d617009fce10dc3b9014b36cfbb25\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://048b2594d54ef761d1b1b72669694cfe9f5f4f12888107b3b9b865854bce7f71\",\"dweb:/ipfs/QmY4U7PetQFvfTHMWdnphrkhKuh5N21bYkc432Ud7B3XK8\"]},\"07_07_TwoStepOwnableInterface.sol\":{\"keccak256\":\"0x4f9847b170095546488a6dfbb3d3c619bdb58829ebc2468d48b83cb6acfe224e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bf874724046b8b00f6290a3dfa9dc7c94ce18a2c0ad139d4a99745a15318beab\",\"dweb:/ipfs/QmXXAN3akSkYPcRcie9x3SKrcj53eayv3k9ybcTsLjUkHJ\"]}},\"version\":1}", "userdoc": {"kind": "user", "methods": {"acceptOwnership()": {"notice": "Accept ownership of this contract. Only the account that the         current owner has set as the new potential owner may call this         function."}, "acceptZoneOwnership(address)": {"notice": "Accept ownership of a given zone once the address has been set         as the current potential owner. Only callable by the owner."}, "cancelOwnershipTransfer()": {"notice": "Clear the currently set potential owner, if any. Only the owner         of this contract may call this function."}, "cancelZoneOwnershipTransfer(address)": {"notice": "Clear the currently set potential owner, if any, from a zone.         Only callable by the owner."}, "getRotator()": {"notice": "Get the rotator address."}, "getSanitizer()": {"notice": "Get the sanitizer address."}, "initialize(address,address,address,string,string,string,bytes32)": {"notice": "External initialization called by the deployer to set the owner,         rotator and sanitizer, and create a signed zone with the given         name, API endpoint, documentation URI. This function can only be         called once, as there is a check to ensure that the current         owner is address(0) before the initialization is performed, the         owner must then be set to a non address(0) address during         initialization and finally the owner cannot be set to address(0)         after initialization."}, "owner()": {"notice": "A public view function that returns the owner."}, "potentialOwner()": {"notice": "An external view function that returns the potential owner."}, "rotateSigners(address,address,address)": {"notice": "Rotate the signers for a given zone. Only callable by the owner         or the rotator of the zone."}, "sanitizeSignedZone(address)": {"notice": "This will remove all active signers of the given zone and clear         the rotator address on the captain. Only callable by the owner         or the sanitizer of the zone."}, "transferOwnership(address)": {"notice": "Initiate ownership transfer by assigning a new potential owner         to this contract. Once set, the new potential owner may call         `acceptOwnership` to claim ownership. Only the owner may call         this function."}, "transferZoneOwnership(address,address)": {"notice": "Initiate zone ownership transfer by assigning a new potential         owner for the given zone. Only callable by the owner."}, "updateRotator(address)": {"notice": "Update the rotator role on the captain."}, "updateSanitizer(address)": {"notice": "Update the sanitizer role on the captain."}, "updateZoneAPIEndpoint(address,string)": {"notice": "Update the API endpoint returned by the supplied zone.         Only the owner can call this function."}, "updateZoneDocumentationURI(address,string)": {"notice": "Update the documentationURI returned by a zone. Only the owner         of the supplied zone can call this function."}, "updateZoneSigner(address,address,bool)": {"notice": "Update the signer for a given signed zone."}}, "notice": "SignedZoneCaptain is a contract that owns signed zones and manages         their active signers via two roles. The rotator role can update         the active signers of a zone. The sanitizer role can remove all         active signers of a zone controlled by the captain and clear the         rotator role on the captain.", "version": 1}}}, "03_07_TwoStepOwnable.sol": {"TwoStepOwnable": {"abi": [{"inputs": [], "name": "CallerIsNotNewPotentialOwner", "type": "error"}, {"inputs": [], "name": "CallerIsNotOwner", "type": "error"}, {"inputs": [], "name": "InitialOwnerIsNullAddress", "type": "error"}, {"inputs": [{"internalType": "address", "name": "newPotentialOwner", "type": "address"}], "name": "NewPotentialOwnerAlreadySet", "type": "error"}, {"inputs": [], "name": "NewPotentialOwnerIsNullAddress", "type": "error"}, {"inputs": [], "name": "NoPotentialOwnerCurrentlySet", "type": "error"}, {"inputs": [{"internalType": "address", "name": "owner", "type": "address"}], "name": "OwnerAlreadySet", "type": "error"}, {"anonymous": false, "inputs": [{"indexed": false, "internalType": "address", "name": "previousOwner", "type": "address"}, {"indexed": false, "internalType": "address", "name": "newOwner", "type": "address"}], "name": "OwnershipTransferred", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": false, "internalType": "address", "name": "newPotentialOwner", "type": "address"}], "name": "PotentialOwnerUpdated", "type": "event"}, {"inputs": [], "name": "acceptOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [], "name": "cancelOwnershipTransfer", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [], "name": "owner", "outputs": [{"internalType": "address", "name": "", "type": "address"}], "stateMutability": "view", "type": "function"}, {"inputs": [], "name": "potentialOwner", "outputs": [{"internalType": "address", "name": "", "type": "address"}], "stateMutability": "view", "type": "function"}, {"inputs": [{"internalType": "address", "name": "newPotentialOwner", "type": "address"}], "name": "transferOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function"}], "devdoc": {"author": "OpenSea Protocol Team", "errors": {"CallerIsNotNewPotentialOwner()": [{"details": "Revert with an error when attempting to claim ownership of the      contract with a caller that is not the current potential owner."}], "CallerIsNotOwner()": [{"details": "Revert with an error when attempting to call a function that      requires ownership with a caller that is not the owner."}], "InitialOwnerIsNullAddress()": [{"details": "Revert with an error when attempting to register an initial owner      and supplying the null address."}], "NewPotentialOwnerAlreadySet(address)": [{"details": "Revert with an error when attempting to set a new potential owner      that is already set."}], "NewPotentialOwnerIsNullAddress()": [{"details": "Revert with an error when attempting to register a new potential      owner and supplying the null address."}], "NoPotentialOwnerCurrentlySet()": [{"details": "Revert with an error when attempting to cancel ownership transfer      when no new potential owner is currently set."}], "OwnerAlreadySet(address)": [{"details": "Revert with an error when attempting to call a function that      requires the owner to not have been set."}]}, "events": {"OwnershipTransferred(address,address)": {"details": "Emit an event whenever contract ownership is transferred.", "params": {"newOwner": "The new owner of the contract.", "previousOwner": "The previous owner of the contract."}}, "PotentialOwnerUpdated(address)": {"details": "Emit an event whenever the contract owner registers a new potential      owner.", "params": {"newPotentialOwner": "The new potential owner of the contract."}}}, "kind": "dev", "methods": {"owner()": {"returns": {"_0": "The address of the owner."}}, "potentialOwner()": {"returns": {"_0": "The address of the potential owner."}}, "transferOwnership(address)": {"params": {"newPotentialOwner": "The address for which to initiate ownership                          transfer to."}}}, "title": "TwoStepOwnable", "version": 1}, "evm": {"bytecode": {"functionDebugData": {}, "generatedSources": [], "linkReferences": {}, "object": "", "opcodes": "", "sourceMap": ""}, "deployedBytecode": {"functionDebugData": {}, "generatedSources": [], "immutableReferences": {}, "linkReferences": {}, "object": "", "opcodes": "", "sourceMap": ""}}, "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CallerIsNotNewPotentialOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerIsNotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InitialOwnerIsNullAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPotentialOwner\",\"type\":\"address\"}],\"name\":\"NewPotentialOwnerAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewPotentialOwnerIsNullAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoPotentialOwnerCurrentlySet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAlreadySet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPotentialOwner\",\"type\":\"address\"}],\"name\":\"PotentialOwnerUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelOwnershipTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"potentialOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPotentialOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"OpenSea Protocol Team\",\"errors\":{\"CallerIsNotNewPotentialOwner()\":[{\"details\":\"Revert with an error when attempting to claim ownership of the      contract with a caller that is not the current potential owner.\"}],\"CallerIsNotOwner()\":[{\"details\":\"Revert with an error when attempting to call a function that      requires ownership with a caller that is not the owner.\"}],\"InitialOwnerIsNullAddress()\":[{\"details\":\"Revert with an error when attempting to register an initial owner      and supplying the null address.\"}],\"NewPotentialOwnerAlreadySet(address)\":[{\"details\":\"Revert with an error when attempting to set a new potential owner      that is already set.\"}],\"NewPotentialOwnerIsNullAddress()\":[{\"details\":\"Revert with an error when attempting to register a new potential      owner and supplying the null address.\"}],\"NoPotentialOwnerCurrentlySet()\":[{\"details\":\"Revert with an error when attempting to cancel ownership transfer      when no new potential owner is currently set.\"}],\"OwnerAlreadySet(address)\":[{\"details\":\"Revert with an error when attempting to call a function that      requires the owner to not have been set.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"details\":\"Emit an event whenever contract ownership is transferred.\",\"params\":{\"newOwner\":\"The new owner of the contract.\",\"previousOwner\":\"The previous owner of the contract.\"}},\"PotentialOwnerUpdated(address)\":{\"details\":\"Emit an event whenever the contract owner registers a new potential      owner.\",\"params\":{\"newPotentialOwner\":\"The new potential owner of the contract.\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"The address of the owner.\"}},\"potentialOwner()\":{\"returns\":{\"_0\":\"The address of the potential owner.\"}},\"transferOwnership(address)\":{\"params\":{\"newPotentialOwner\":\"The address for which to initiate ownership                          transfer to.\"}}},\"title\":\"TwoStepOwnable\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Accept ownership of this contract. Only the account that the         current owner has set as the new potential owner may call this         function.\"},\"cancelOwnershipTransfer()\":{\"notice\":\"Clear the currently set potential owner, if any. Only the owner         of this contract may call this function.\"},\"owner()\":{\"notice\":\"A public view function that returns the owner.\"},\"potentialOwner()\":{\"notice\":\"An external view function that returns the potential owner.\"},\"transferOwnership(address)\":{\"notice\":\"Initiate ownership transfer by assigning a new potential owner         to this contract. Once set, the new potential owner may call         `acceptOwnership` to claim ownership. Only the owner may call         this function.\"}},\"notice\":\"TwoStepOwnable provides access control for inheriting contracts,          where the ownership of the contract can be exchanged via a two step          process. A potential owner is set by the current owner by calling          `transferOwnership`, then accepted by the new potential owner by          calling `acceptOwnership`.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"03_07_TwoStepOwnable.sol\":\"TwoStepOwnable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"03_07_TwoStepOwnable.sol\":{\"keccak256\":\"0x91bf1b66ee3032f81f626e8b1de5f6dee1f0b5fed50bd121eded2d0262593cdd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://31ddb4c0ba0b4f7f2c117836d242b02b460b56c00538b29342d07ce596b3cbb1\",\"dweb:/ipfs/QmNgRWz57qpZdgot9b5kdEiC1scJGnGMuzo17V8JkgFXN3\"]},\"07_07_TwoStepOwnableInterface.sol\":{\"keccak256\":\"0x4f9847b170095546488a6dfbb3d3c619bdb58829ebc2468d48b83cb6acfe224e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bf874724046b8b00f6290a3dfa9dc7c94ce18a2c0ad139d4a99745a15318beab\",\"dweb:/ipfs/QmXXAN3akSkYPcRcie9x3SKrcj53eayv3k9ybcTsLjUkHJ\"]}},\"version\":1}", "userdoc": {"kind": "user", "methods": {"acceptOwnership()": {"notice": "Accept ownership of this contract. Only the account that the         current owner has set as the new potential owner may call this         function."}, "cancelOwnershipTransfer()": {"notice": "Clear the currently set potential owner, if any. Only the owner         of this contract may call this function."}, "owner()": {"notice": "A public view function that returns the owner."}, "potentialOwner()": {"notice": "An external view function that returns the potential owner."}, "transferOwnership(address)": {"notice": "Initiate ownership transfer by assigning a new potential owner         to this contract. Once set, the new potential owner may call         `acceptOwnership` to claim ownership. Only the owner may call         this function."}}, "notice": "TwoStepOwnable provides access control for inheriting contracts,          where the ownership of the contract can be exchanged via a two step          process. A potential owner is set by the current owner by calling          `transferOwnership`, then accepted by the new potential owner by          calling `acceptOwnership`.", "version": 1}}}, "04_07_SignedZoneCaptainInterface.sol": {"SignedZoneCaptainInterface": {"abi": [{"inputs": [{"internalType": "address", "name": "zone", "type": "address"}], "name": "acceptZoneOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "address", "name": "zone", "type": "address"}], "name": "cancelZoneOwnershipTransfer", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [], "name": "getRotator", "outputs": [{"internalType": "address", "name": "", "type": "address"}], "stateMutability": "view", "type": "function"}, {"inputs": [], "name": "getSanitizer", "outputs": [{"internalType": "address", "name": "", "type": "address"}], "stateMutability": "view", "type": "function"}, {"inputs": [{"internalType": "address", "name": "initialOwner", "type": "address"}, {"internalType": "address", "name": "initialRotator", "type": "address"}, {"internalType": "address", "name": "initialSanitizer", "type": "address"}, {"internalType": "string", "name": "zoneName", "type": "string"}, {"internalType": "string", "name": "apiEndpoint", "type": "string"}, {"internalType": "string", "name": "documentationURI", "type": "string"}, {"internalType": "bytes32", "name": "zoneSalt", "type": "bytes32"}], "name": "initialize", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "address", "name": "zone", "type": "address"}, {"internalType": "address", "name": "signerToRemove", "type": "address"}, {"internalType": "address", "name": "signerToAdd", "type": "address"}], "name": "rotateSigners", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "address", "name": "zone", "type": "address"}], "name": "sanitizeSignedZone", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "address", "name": "zone", "type": "address"}, {"internalType": "address", "name": "newPotentialOwner", "type": "address"}], "name": "transferZoneOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "address", "name": "newRotator", "type": "address"}], "name": "updateRotator", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "address", "name": "newSanitizer", "type": "address"}], "name": "updateSanitizer", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "address", "name": "zone", "type": "address"}, {"internalType": "string", "name": "newApiEndpoint", "type": "string"}], "name": "updateZoneAPIEndpoint", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "address", "name": "zone", "type": "address"}, {"internalType": "string", "name": "newDocumentationURI", "type": "string"}], "name": "updateZoneDocumentationURI", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "address", "name": "zone", "type": "address"}, {"internalType": "address", "name": "signer", "type": "address"}, {"internalType": "bool", "name": "active", "type": "bool"}], "name": "updateZoneSigner", "outputs": [], "stateMutability": "nonpayable", "type": "function"}], "devdoc": {"author": "BCLeFevre", "kind": "dev", "methods": {"acceptZoneOwnership(address)": {"params": {"zone": "The zone for which to accept ownership transfer."}}, "cancelZoneOwnershipTransfer(address)": {"params": {"zone": "The zone for which to cancel ownership transfer."}}, "getRotator()": {"returns": {"_0": "The rotator address."}}, "getSanitizer()": {"returns": {"_0": "The sanitizer address."}}, "initialize(address,address,address,string,string,string,bytes32)": {"params": {"apiEndpoint": "The API endpoint of the zone being created.", "documentationURI": "The documentation URI of the zone being created.", "initialOwner": "The address to be set as the owner.", "initialRotator": "The address to be set as the rotator.", "initialSanitizer": "The address to be set as the sanitizer.", "zoneName": "The name of the zone being created.", "zoneSalt": "The salt to use when creating the zone."}}, "rotateSigners(address,address,address)": {"params": {"signerToAdd": "The signer to add.", "signerToRemove": "The signer to remove.", "zone": "The zone to rotate the signers for."}}, "sanitizeSignedZone(address)": {"params": {"zone": "The zone to sanitize."}}, "transferZoneOwnership(address,address)": {"params": {"newPotentialOwner": "The new potential owner to set.", "zone": "The zone for which to initiate ownership                          transfer."}}, "updateRotator(address)": {"params": {"newRotator": "The new rotator of the captain."}}, "updateSanitizer(address)": {"params": {"newSanitizer": "The new sanitizer of the captain."}}, "updateZoneAPIEndpoint(address,string)": {"params": {"newApiEndpoint": "The new API endpoint.", "zone": "The signed zone to update the API endpoint for."}}, "updateZoneDocumentationURI(address,string)": {"params": {"newDocumentationURI": "The new documentation URI.", "zone": "The signed zone to update the API endpoint                            for."}}, "updateZoneSigner(address,address,bool)": {"params": {"active": "If the signer should be active or not.", "signer": "The signer to update.", "zone": "The signed zone to update the signer for."}}}, "title": "SignedZoneCaptainInterface", "version": 1}, "evm": {"bytecode": {"functionDebugData": {}, "generatedSources": [], "linkReferences": {}, "object": "", "opcodes": "", "sourceMap": ""}, "deployedBytecode": {"functionDebugData": {}, "generatedSources": [], "immutableReferences": {}, "linkReferences": {}, "object": "", "opcodes": "", "sourceMap": ""}}, "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"}],\"name\":\"acceptZoneOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"}],\"name\":\"cancelZoneOwnershipTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRotator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSanitizer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialRotator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialSanitizer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"zoneName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"apiEndpoint\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"documentationURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"zoneSalt\",\"type\":\"bytes32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signerToRemove\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signerToAdd\",\"type\":\"address\"}],\"name\":\"rotateSigners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"}],\"name\":\"sanitizeSignedZone\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newPotentialOwner\",\"type\":\"address\"}],\"name\":\"transferZoneOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRotator\",\"type\":\"address\"}],\"name\":\"updateRotator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSanitizer\",\"type\":\"address\"}],\"name\":\"updateSanitizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"newApiEndpoint\",\"type\":\"string\"}],\"name\":\"updateZoneAPIEndpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"newDocumentationURI\",\"type\":\"string\"}],\"name\":\"updateZoneDocumentationURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"updateZoneSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"BCLeFevre\",\"kind\":\"dev\",\"methods\":{\"acceptZoneOwnership(address)\":{\"params\":{\"zone\":\"The zone for which to accept ownership transfer.\"}},\"cancelZoneOwnershipTransfer(address)\":{\"params\":{\"zone\":\"The zone for which to cancel ownership transfer.\"}},\"getRotator()\":{\"returns\":{\"_0\":\"The rotator address.\"}},\"getSanitizer()\":{\"returns\":{\"_0\":\"The sanitizer address.\"}},\"initialize(address,address,address,string,string,string,bytes32)\":{\"params\":{\"apiEndpoint\":\"The API endpoint of the zone being created.\",\"documentationURI\":\"The documentation URI of the zone being created.\",\"initialOwner\":\"The address to be set as the owner.\",\"initialRotator\":\"The address to be set as the rotator.\",\"initialSanitizer\":\"The address to be set as the sanitizer.\",\"zoneName\":\"The name of the zone being created.\",\"zoneSalt\":\"The salt to use when creating the zone.\"}},\"rotateSigners(address,address,address)\":{\"params\":{\"signerToAdd\":\"The signer to add.\",\"signerToRemove\":\"The signer to remove.\",\"zone\":\"The zone to rotate the signers for.\"}},\"sanitizeSignedZone(address)\":{\"params\":{\"zone\":\"The zone to sanitize.\"}},\"transferZoneOwnership(address,address)\":{\"params\":{\"newPotentialOwner\":\"The new potential owner to set.\",\"zone\":\"The zone for which to initiate ownership                          transfer.\"}},\"updateRotator(address)\":{\"params\":{\"newRotator\":\"The new rotator of the captain.\"}},\"updateSanitizer(address)\":{\"params\":{\"newSanitizer\":\"The new sanitizer of the captain.\"}},\"updateZoneAPIEndpoint(address,string)\":{\"params\":{\"newApiEndpoint\":\"The new API endpoint.\",\"zone\":\"The signed zone to update the API endpoint for.\"}},\"updateZoneDocumentationURI(address,string)\":{\"params\":{\"newDocumentationURI\":\"The new documentation URI.\",\"zone\":\"The signed zone to update the API endpoint                            for.\"}},\"updateZoneSigner(address,address,bool)\":{\"params\":{\"active\":\"If the signer should be active or not.\",\"signer\":\"The signer to update.\",\"zone\":\"The signed zone to update the signer for.\"}}},\"title\":\"SignedZoneCaptainInterface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptZoneOwnership(address)\":{\"notice\":\"Accept ownership of a given zone once the address has been set         as the current potential owner. Only callable by the owner.\"},\"cancelZoneOwnershipTransfer(address)\":{\"notice\":\"Clear the currently set potential owner, if any, from a zone.         Only callable by the owner.\"},\"getRotator()\":{\"notice\":\"Get the rotator address.\"},\"getSanitizer()\":{\"notice\":\"Get the sanitizer address.\"},\"initialize(address,address,address,string,string,string,bytes32)\":{\"notice\":\"External initialization called by the deployer to set the owner,         rotator and sanitizer, and create a signed zone with the given         name, API endpoint, documentation URI.\"},\"rotateSigners(address,address,address)\":{\"notice\":\"Rotate the signers for a given zone. Only callable by the owner         or the rotator of the zone.\"},\"sanitizeSignedZone(address)\":{\"notice\":\"This will remove all active signers and clear the rotator         address on the captain. Only callable by the owner or the         sanitizer of the zone.\"},\"transferZoneOwnership(address,address)\":{\"notice\":\"Initiate zone ownership transfer by assigning a new potential         owner for the given zone. Only callable by the owner.\"},\"updateRotator(address)\":{\"notice\":\"Update the rotator role on the captain.\"},\"updateSanitizer(address)\":{\"notice\":\"Update the sanitizer role on the captain.\"},\"updateZoneAPIEndpoint(address,string)\":{\"notice\":\"Update the API endpoint returned by the supplied zone.         Only the owner can call this function.\"},\"updateZoneDocumentationURI(address,string)\":{\"notice\":\"Update the documentationURI returned by a zone. Only the owner         of the supplied zone can call this function.\"},\"updateZoneSigner(address,address,bool)\":{\"notice\":\"Update the signer for a given signed zone.\"}},\"notice\":\"SignedZoneCaptainInterface contains function declarations for the         SignedZoneCaptain contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"04_07_SignedZoneCaptainInterface.sol\":\"SignedZoneCaptainInterface\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"04_07_SignedZoneCaptainInterface.sol\":{\"keccak256\":\"0x363b3f2f56a0a10efb88a2b8319433aec0c23df1bd26b0374ce1a670741a7f71\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1f6164618a12a8ce29f4d6ca8e879fb237a4d0d825652d8eba813eeab0b20c14\",\"dweb:/ipfs/QmSLWGni1vsrqqoE6w8RGAXSbXVVYVxFGJ8K5JhHTC92pF\"]}},\"version\":1}", "userdoc": {"kind": "user", "methods": {"acceptZoneOwnership(address)": {"notice": "Accept ownership of a given zone once the address has been set         as the current potential owner. Only callable by the owner."}, "cancelZoneOwnershipTransfer(address)": {"notice": "Clear the currently set potential owner, if any, from a zone.         Only callable by the owner."}, "getRotator()": {"notice": "Get the rotator address."}, "getSanitizer()": {"notice": "Get the sanitizer address."}, "initialize(address,address,address,string,string,string,bytes32)": {"notice": "External initialization called by the deployer to set the owner,         rotator and sanitizer, and create a signed zone with the given         name, API endpoint, documentation URI."}, "rotateSigners(address,address,address)": {"notice": "Rotate the signers for a given zone. Only callable by the owner         or the rotator of the zone."}, "sanitizeSignedZone(address)": {"notice": "This will remove all active signers and clear the rotator         address on the captain. Only callable by the owner or the         sanitizer of the zone."}, "transferZoneOwnership(address,address)": {"notice": "Initiate zone ownership transfer by assigning a new potential         owner for the given zone. Only callable by the owner."}, "updateRotator(address)": {"notice": "Update the rotator role on the captain."}, "updateSanitizer(address)": {"notice": "Update the sanitizer role on the captain."}, "updateZoneAPIEndpoint(address,string)": {"notice": "Update the API endpoint returned by the supplied zone.         Only the owner can call this function."}, "updateZoneDocumentationURI(address,string)": {"notice": "Update the documentationURI returned by a zone. Only the owner         of the supplied zone can call this function."}, "updateZoneSigner(address,address,bool)": {"notice": "Update the signer for a given signed zone."}}, "notice": "SignedZoneCaptainInterface contains function declarations for the         SignedZoneCaptain contract.", "version": 1}}}, "05_07_SignedZoneControllerInterface.sol": {"SignedZoneControllerInterface": {"abi": [{"inputs": [{"internalType": "address", "name": "zone", "type": "address"}], "name": "acceptOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "address", "name": "zone", "type": "address"}], "name": "cancelOwnershipTransfer", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "string", "name": "zoneName", "type": "string"}, {"internalType": "string", "name": "apiEndpoint", "type": "string"}, {"internalType": "string", "name": "documentationURI", "type": "string"}, {"internalType": "address", "name": "initialOwner", "type": "address"}, {"internalType": "bytes32", "name": "salt", "type": "bytes32"}], "name": "createZone", "outputs": [{"internalType": "address", "name": "signedZone", "type": "address"}], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "address", "name": "signedZone", "type": "address"}], "name": "getActiveSigners", "outputs": [{"internalType": "address[]", "name": "signers", "type": "address[]"}], "stateMutability": "view", "type": "function"}, {"inputs": [{"internalType": "address", "name": "zone", "type": "address"}], "name": "getAdditionalZoneInformation", "outputs": [{"internalType": "bytes32", "name": "domainSeparator", "type": "bytes32"}, {"internalType": "string", "name": "zoneName", "type": "string"}, {"internalType": "string", "name": "apiEndpoint", "type": "string"}, {"internalType": "uint256[]", "name": "substandards", "type": "uint256[]"}, {"internalType": "string", "name": "documentationURI", "type": "string"}], "stateMutability": "view", "type": "function"}, {"inputs": [{"internalType": "address", "name": "zone", "type": "address"}], "name": "getPotentialOwner", "outputs": [{"internalType": "address", "name": "potentialOwner", "type": "address"}], "stateMutability": "view", "type": "function"}, {"inputs": [{"internalType": "string", "name": "zoneName", "type": "string"}, {"internalType": "bytes32", "name": "salt", "type": "bytes32"}], "name": "getZone", "outputs": [{"internalType": "address", "name": "derivedAddress", "type": "address"}], "stateMutability": "view", "type": "function"}, {"inputs": [{"internalType": "address", "name": "zone", "type": "address"}, {"internalType": "address", "name": "signer", "type": "address"}], "name": "isActiveSigner", "outputs": [{"internalType": "bool", "name": "", "type": "bool"}], "stateMutability": "view", "type": "function"}, {"inputs": [{"internalType": "address", "name": "zone", "type": "address"}], "name": "ownerOf", "outputs": [{"internalType": "address", "name": "owner", "type": "address"}], "stateMutability": "view", "type": "function"}, {"inputs": [{"internalType": "address", "name": "zone", "type": "address"}, {"internalType": "address", "name": "newPotentialOwner", "type": "address"}], "name": "transferOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "address", "name": "signedZone", "type": "address"}, {"internalType": "string", "name": "newApiEndpoint", "type": "string"}], "name": "updateAPIEndpoint", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "address", "name": "zone", "type": "address"}, {"internalType": "string", "name": "documentationURI", "type": "string"}], "name": "updateDocumentationURI", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "address", "name": "signedZone", "type": "address"}, {"internalType": "address", "name": "signer", "type": "address"}, {"internalType": "bool", "name": "active", "type": "bool"}], "name": "updateSigner", "outputs": [], "stateMutability": "nonpayable", "type": "function"}], "devdoc": {"author": "BCLeFevre", "kind": "dev", "methods": {"acceptOwnership(address)": {"params": {"zone": "The zone for which to accept ownership."}}, "cancelOwnershipTransfer(address)": {"params": {"zone": "The zone for which to cancel ownership transfer."}}, "createZone(string,string,string,address,bytes32)": {"params": {"apiEndpoint": "The API endpoint where orders for this zone can                          be signed.", "documentationURI": "The URI to the documentation describing the                          behavior of the contract. Request and response                          payloads are defined in SIP-7.", "initialOwner": "The initial owner to set for the new zone.", "salt": "The salt to be used to derive the zone address", "zoneName": "The name for the zone returned in                          getSeaportMetadata()."}, "returns": {"signedZone": "The derived address for the zone."}}, "getActiveSigners(address)": {"params": {"signedZone": "The signed zone to get the active signers for."}, "returns": {"signers": "The active signers."}}, "getAdditionalZoneInformation(address)": {"params": {"zone": "The zone to get the additional information for."}, "returns": {"apiEndpoint": "     The API endpoint for the zone.", "documentationURI": "The documentation URI for the zone.", "domainSeparator": " The domain separator used for signing.", "substandards": "    The substandards supported by the zone.", "zoneName": "        The name of the zone."}}, "getPotentialOwner(address)": {"params": {"zone": "The zone for which to retrieve the potential owner."}, "returns": {"potentialOwner": "The potential owner, if any, for the zone."}}, "getZone(string,bytes32)": {"params": {"salt": "The salt to be used to derive the zone address.", "zoneName": "The name of the zone."}, "returns": {"derivedAddress": "The derived address of the signed zone."}}, "isActiveSigner(address,address)": {"params": {"signer": "The address to check if it is an active signer for", "zone": "The zone to check if the supplied address is an active               signer for."}, "returns": {"_0": "active If the supplied address is an active signer for the                supplied zone."}}, "ownerOf(address)": {"params": {"zone": "The zone for which to retrieve the associated owner."}, "returns": {"owner": "The owner of the supplied zone."}}, "transferOwnership(address,address)": {"params": {"newPotentialOwner": "The new potential owner of the zone.", "zone": "The zone for which to initiate ownership                          transfer."}}, "updateAPIEndpoint(address,string)": {"params": {"newApiEndpoint": "The new API endpoint.", "signedZone": "The signed zone to update the API endpoint for."}}, "updateDocumentationURI(address,string)": {"params": {"documentationURI": "The new documentation URI.", "zone": "The signed zone to update the API endpoint for."}}, "updateSigner(address,address,bool)": {"params": {"active": "If the signer should be active or not.", "signedZone": "The signed zone to update the signer for.", "signer": "The signer to update."}}}, "title": "SignedZoneControllerInterface", "version": 1}, "evm": {"bytecode": {"functionDebugData": {}, "generatedSources": [], "linkReferences": {}, "object": "", "opcodes": "", "sourceMap": ""}, "deployedBytecode": {"functionDebugData": {}, "generatedSources": [], "immutableReferences": {}, "linkReferences": {}, "object": "", "opcodes": "", "sourceMap": ""}}, "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"}],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"}],\"name\":\"cancelOwnershipTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"zoneName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"apiEndpoint\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"documentationURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"createZone\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"signedZone\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signedZone\",\"type\":\"address\"}],\"name\":\"getActiveSigners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"}],\"name\":\"getAdditionalZoneInformation\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainSeparator\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"zoneName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"apiEndpoint\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"substandards\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"documentationURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"}],\"name\":\"getPotentialOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"potentialOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"zoneName\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"getZone\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"derivedAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"isActiveSigner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newPotentialOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signedZone\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"newApiEndpoint\",\"type\":\"string\"}],\"name\":\"updateAPIEndpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"documentationURI\",\"type\":\"string\"}],\"name\":\"updateDocumentationURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signedZone\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"updateSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"BCLeFevre\",\"kind\":\"dev\",\"methods\":{\"acceptOwnership(address)\":{\"params\":{\"zone\":\"The zone for which to accept ownership.\"}},\"cancelOwnershipTransfer(address)\":{\"params\":{\"zone\":\"The zone for which to cancel ownership transfer.\"}},\"createZone(string,string,string,address,bytes32)\":{\"params\":{\"apiEndpoint\":\"The API endpoint where orders for this zone can                          be signed.\",\"documentationURI\":\"The URI to the documentation describing the                          behavior of the contract. Request and response                          payloads are defined in SIP-7.\",\"initialOwner\":\"The initial owner to set for the new zone.\",\"salt\":\"The salt to be used to derive the zone address\",\"zoneName\":\"The name for the zone returned in                          getSeaportMetadata().\"},\"returns\":{\"signedZone\":\"The derived address for the zone.\"}},\"getActiveSigners(address)\":{\"params\":{\"signedZone\":\"The signed zone to get the active signers for.\"},\"returns\":{\"signers\":\"The active signers.\"}},\"getAdditionalZoneInformation(address)\":{\"params\":{\"zone\":\"The zone to get the additional information for.\"},\"returns\":{\"apiEndpoint\":\"     The API endpoint for the zone.\",\"documentationURI\":\"The documentation URI for the zone.\",\"domainSeparator\":\" The domain separator used for signing.\",\"substandards\":\"    The substandards supported by the zone.\",\"zoneName\":\"        The name of the zone.\"}},\"getPotentialOwner(address)\":{\"params\":{\"zone\":\"The zone for which to retrieve the potential owner.\"},\"returns\":{\"potentialOwner\":\"The potential owner, if any, for the zone.\"}},\"getZone(string,bytes32)\":{\"params\":{\"salt\":\"The salt to be used to derive the zone address.\",\"zoneName\":\"The name of the zone.\"},\"returns\":{\"derivedAddress\":\"The derived address of the signed zone.\"}},\"isActiveSigner(address,address)\":{\"params\":{\"signer\":\"The address to check if it is an active signer for\",\"zone\":\"The zone to check if the supplied address is an active               signer for.\"},\"returns\":{\"_0\":\"active If the supplied address is an active signer for the                supplied zone.\"}},\"ownerOf(address)\":{\"params\":{\"zone\":\"The zone for which to retrieve the associated owner.\"},\"returns\":{\"owner\":\"The owner of the supplied zone.\"}},\"transferOwnership(address,address)\":{\"params\":{\"newPotentialOwner\":\"The new potential owner of the zone.\",\"zone\":\"The zone for which to initiate ownership                          transfer.\"}},\"updateAPIEndpoint(address,string)\":{\"params\":{\"newApiEndpoint\":\"The new API endpoint.\",\"signedZone\":\"The signed zone to update the API endpoint for.\"}},\"updateDocumentationURI(address,string)\":{\"params\":{\"documentationURI\":\"The new documentation URI.\",\"zone\":\"The signed zone to update the API endpoint for.\"}},\"updateSigner(address,address,bool)\":{\"params\":{\"active\":\"If the signer should be active or not.\",\"signedZone\":\"The signed zone to update the signer for.\",\"signer\":\"The signer to update.\"}}},\"title\":\"SignedZoneControllerInterface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership(address)\":{\"notice\":\"Accept ownership of a supplied zone. Only accounts that the         current owner has set as the new potential owner may call this         function.\"},\"cancelOwnershipTransfer(address)\":{\"notice\":\"Clear the currently set potential owner, if any, from a zone.         Only the owner of the zone in question may call this function.\"},\"createZone(string,string,string,address,bytes32)\":{\"notice\":\"Deploy a SignedZone to a precomputed address.\"},\"getActiveSigners(address)\":{\"notice\":\"Returns the active signers for the zone.\"},\"getAdditionalZoneInformation(address)\":{\"notice\":\"Returns additional information about the zone.\"},\"getPotentialOwner(address)\":{\"notice\":\"Retrieve the potential owner, if any, for a given zone. The         current owner may set a new potential owner via         `transferOwnership` and that owner may then accept ownership of         the zone in question via `acceptOwnership`.\"},\"getZone(string,bytes32)\":{\"notice\":\"Derive the zone address associated with a salt.\"},\"isActiveSigner(address,address)\":{\"notice\":\"Returns whether or not the supplied address is an active signer         for the supplied zone.\"},\"ownerOf(address)\":{\"notice\":\"Retrieve the current owner of a deployed zone.\"},\"transferOwnership(address,address)\":{\"notice\":\"Initiate zone ownership transfer by assigning a new potential         owner for the given zone. Once set, the new potential owner         may call `acceptOwnership` to claim ownership of the zone.         Only the owner of the zone in question may call this function.\"},\"updateAPIEndpoint(address,string)\":{\"notice\":\"Update the API endpoint returned by the supplied zone.         Only the owner or an active signer can call this function.\"},\"updateDocumentationURI(address,string)\":{\"notice\":\"Update the documentationURI returned by a zone.         Only the owner or an active signer of the supplied zone can call         this function.\"},\"updateSigner(address,address,bool)\":{\"notice\":\"Update the signer for a given signed zone.\"}},\"notice\":\"SignedZoneControllerInterface enables the deploying of SignedZones.         SignedZones are an implementation of SIP-7 that requires orders         to be signed by an approved signer.         https://github.com/ProjectOpenSea/SIPs/blob/main/SIPS/sip-7.md\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"05_07_SignedZoneControllerInterface.sol\":\"SignedZoneControllerInterface\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"05_07_SignedZoneControllerInterface.sol\":{\"keccak256\":\"0xa948eb62a1b1d7c1b3e1b55b5e05c96c8c557f251db15c8a07bf12ee8bd6517d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://245edcc4f245b3386c23c7b5414845b4430eb59b3ff555400be9aa58a05030f0\",\"dweb:/ipfs/QmUAMaCyj2VbmppwajghANGMPfMZyqvVBBwJJKJTGhkyY1\"]}},\"version\":1}", "userdoc": {"kind": "user", "methods": {"acceptOwnership(address)": {"notice": "Accept ownership of a supplied zone. Only accounts that the         current owner has set as the new potential owner may call this         function."}, "cancelOwnershipTransfer(address)": {"notice": "Clear the currently set potential owner, if any, from a zone.         Only the owner of the zone in question may call this function."}, "createZone(string,string,string,address,bytes32)": {"notice": "Deploy a SignedZone to a precomputed address."}, "getActiveSigners(address)": {"notice": "Returns the active signers for the zone."}, "getAdditionalZoneInformation(address)": {"notice": "Returns additional information about the zone."}, "getPotentialOwner(address)": {"notice": "Retrieve the potential owner, if any, for a given zone. The         current owner may set a new potential owner via         `transferOwnership` and that owner may then accept ownership of         the zone in question via `acceptOwnership`."}, "getZone(string,bytes32)": {"notice": "Derive the zone address associated with a salt."}, "isActiveSigner(address,address)": {"notice": "Returns whether or not the supplied address is an active signer         for the supplied zone."}, "ownerOf(address)": {"notice": "Retrieve the current owner of a deployed zone."}, "transferOwnership(address,address)": {"notice": "Initiate zone ownership transfer by assigning a new potential         owner for the given zone. Once set, the new potential owner         may call `acceptOwnership` to claim ownership of the zone.         Only the owner of the zone in question may call this function."}, "updateAPIEndpoint(address,string)": {"notice": "Update the API endpoint returned by the supplied zone.         Only the owner or an active signer can call this function."}, "updateDocumentationURI(address,string)": {"notice": "Update the documentationURI returned by a zone.         Only the owner or an active signer of the supplied zone can call         this function."}, "updateSigner(address,address,bool)": {"notice": "Update the signer for a given signed zone."}}, "notice": "SignedZoneControllerInterface enables the deploying of SignedZones.         SignedZones are an implementation of SIP-7 that requires orders         to be signed by an approved signer.         https://github.com/ProjectOpenSea/SIPs/blob/main/SIPS/sip-7.md", "version": 1}}}, "06_07_SignedZoneCaptainEventsAndErrors.sol": {"SignedZoneCaptainEventsAndErrors": {"abi": [{"inputs": [], "name": "CallerIsNotOwnerOrRotator", "type": "error"}, {"inputs": [], "name": "CallerIsNotOwnerOrSanitizer", "type": "error"}, {"inputs": [], "name": "InvalidDeployer", "type": "error"}, {"inputs": [{"internalType": "address", "name": "signedZoneController", "type": "address"}], "name": "InvalidSignedZoneController", "type": "error"}, {"inputs": [], "name": "RotatorCannotBeNullAddress", "type": "error"}, {"inputs": [], "name": "SanitizerCannotBeNullAddress", "type": "error"}, {"anonymous": false, "inputs": [{"indexed": false, "internalType": "address", "name": "newRotator", "type": "address"}], "name": "RotatorUpdated", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": false, "internalType": "address", "name": "newSanitizer", "type": "address"}], "name": "SanitizerUpdated", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": false, "internalType": "address", "name": "zone", "type": "address"}], "name": "ZoneSanitized", "type": "event"}], "devdoc": {"errors": {"CallerIsNotOwnerOrRotator()": [{"details": "Revert with an error when attempting to call a function that      requires the caller to be the owner or rotator of the zone."}], "CallerIsNotOwnerOrSanitizer()": [{"details": "Revert with an error when attempting to call a function that      requires the caller to be the owner or sanitizer of the zone."}], "InvalidDeployer()": [{"details": "Revert with an error when attempting to deploy the contract with an      invalid deployer."}], "InvalidSignedZoneController(address)": [{"details": "Revert with an error when attempting to set a zone controller      that does not contain contract code.", "params": {"signedZoneController": "The invalid address."}}], "RotatorCannotBeNullAddress()": [{"details": "Revert with an error when attempting to set the rotator      to the null address."}], "SanitizerCannotBeNullAddress()": [{"details": "Revert with an error when attempting to set the sanitizer      to the null address."}]}, "events": {"RotatorUpdated(address)": {"details": "Emit an event when the contract owner updates the rotator.", "params": {"newRotator": "The new rotator of the contract."}}, "SanitizerUpdated(address)": {"details": "Emit an event when the contract owner updates the sanitizer.", "params": {"newSanitizer": "The new sanitizer of the contract."}}, "ZoneSanitized(address)": {"details": "Emit an event when the sanitizer sanitizes a zone.", "params": {"zone": "The zone address being sanitized."}}}, "kind": "dev", "methods": {}, "version": 1}, "evm": {"bytecode": {"functionDebugData": {}, "generatedSources": [], "linkReferences": {}, "object": "", "opcodes": "", "sourceMap": ""}, "deployedBytecode": {"functionDebugData": {}, "generatedSources": [], "immutableReferences": {}, "linkReferences": {}, "object": "", "opcodes": "", "sourceMap": ""}}, "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CallerIsNotOwnerOrRotator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerIsNotOwnerOrSanitizer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDeployer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signedZoneController\",\"type\":\"address\"}],\"name\":\"InvalidSignedZoneController\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RotatorCannotBeNullAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SanitizerCannotBeNullAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRotator\",\"type\":\"address\"}],\"name\":\"RotatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSanitizer\",\"type\":\"address\"}],\"name\":\"SanitizerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"}],\"name\":\"ZoneSanitized\",\"type\":\"event\"}],\"devdoc\":{\"errors\":{\"CallerIsNotOwnerOrRotator()\":[{\"details\":\"Revert with an error when attempting to call a function that      requires the caller to be the owner or rotator of the zone.\"}],\"CallerIsNotOwnerOrSanitizer()\":[{\"details\":\"Revert with an error when attempting to call a function that      requires the caller to be the owner or sanitizer of the zone.\"}],\"InvalidDeployer()\":[{\"details\":\"Revert with an error when attempting to deploy the contract with an      invalid deployer.\"}],\"InvalidSignedZoneController(address)\":[{\"details\":\"Revert with an error when attempting to set a zone controller      that does not contain contract code.\",\"params\":{\"signedZoneController\":\"The invalid address.\"}}],\"RotatorCannotBeNullAddress()\":[{\"details\":\"Revert with an error when attempting to set the rotator      to the null address.\"}],\"SanitizerCannotBeNullAddress()\":[{\"details\":\"Revert with an error when attempting to set the sanitizer      to the null address.\"}]},\"events\":{\"RotatorUpdated(address)\":{\"details\":\"Emit an event when the contract owner updates the rotator.\",\"params\":{\"newRotator\":\"The new rotator of the contract.\"}},\"SanitizerUpdated(address)\":{\"details\":\"Emit an event when the contract owner updates the sanitizer.\",\"params\":{\"newSanitizer\":\"The new sanitizer of the contract.\"}},\"ZoneSanitized(address)\":{\"details\":\"Emit an event when the sanitizer sanitizes a zone.\",\"params\":{\"zone\":\"The zone address being sanitized.\"}}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"SignedZoneCaptainEventsAndErrors contains errors and events         related to owning signed zones.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"06_07_SignedZoneCaptainEventsAndErrors.sol\":\"SignedZoneCaptainEventsAndErrors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"06_07_SignedZoneCaptainEventsAndErrors.sol\":{\"keccak256\":\"0x8da71596bacc106da06980e3e3f52e06935d617009fce10dc3b9014b36cfbb25\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://048b2594d54ef761d1b1b72669694cfe9f5f4f12888107b3b9b865854bce7f71\",\"dweb:/ipfs/QmY4U7PetQFvfTHMWdnphrkhKuh5N21bYkc432Ud7B3XK8\"]}},\"version\":1}", "userdoc": {"kind": "user", "methods": {}, "notice": "SignedZoneCaptainEventsAndErrors contains errors and events         related to owning signed zones.", "version": 1}}}, "07_07_TwoStepOwnableInterface.sol": {"TwoStepOwnableInterface": {"abi": [{"inputs": [], "name": "CallerIsNotNewPotentialOwner", "type": "error"}, {"inputs": [], "name": "CallerIsNotOwner", "type": "error"}, {"inputs": [], "name": "InitialOwnerIsNullAddress", "type": "error"}, {"inputs": [{"internalType": "address", "name": "newPotentialOwner", "type": "address"}], "name": "NewPotentialOwnerAlreadySet", "type": "error"}, {"inputs": [], "name": "NewPotentialOwnerIsNullAddress", "type": "error"}, {"inputs": [], "name": "NoPotentialOwnerCurrentlySet", "type": "error"}, {"inputs": [{"internalType": "address", "name": "owner", "type": "address"}], "name": "OwnerAlreadySet", "type": "error"}, {"anonymous": false, "inputs": [{"indexed": false, "internalType": "address", "name": "previousOwner", "type": "address"}, {"indexed": false, "internalType": "address", "name": "newOwner", "type": "address"}], "name": "OwnershipTransferred", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": false, "internalType": "address", "name": "newPotentialOwner", "type": "address"}], "name": "PotentialOwnerUpdated", "type": "event"}, {"inputs": [], "name": "acceptOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [], "name": "cancelOwnershipTransfer", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [], "name": "owner", "outputs": [{"internalType": "address", "name": "", "type": "address"}], "stateMutability": "view", "type": "function"}, {"inputs": [], "name": "potentialOwner", "outputs": [{"internalType": "address", "name": "", "type": "address"}], "stateMutability": "view", "type": "function"}, {"inputs": [{"internalType": "address", "name": "newPotentialOwner", "type": "address"}], "name": "transferOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function"}], "devdoc": {"author": "OpenSea Protocol", "errors": {"CallerIsNotNewPotentialOwner()": [{"details": "Revert with an error when attempting to claim ownership of the      contract with a caller that is not the current potential owner."}], "CallerIsNotOwner()": [{"details": "Revert with an error when attempting to call a function that      requires ownership with a caller that is not the owner."}], "InitialOwnerIsNullAddress()": [{"details": "Revert with an error when attempting to register an initial owner      and supplying the null address."}], "NewPotentialOwnerAlreadySet(address)": [{"details": "Revert with an error when attempting to set a new potential owner      that is already set."}], "NewPotentialOwnerIsNullAddress()": [{"details": "Revert with an error when attempting to register a new potential      owner and supplying the null address."}], "NoPotentialOwnerCurrentlySet()": [{"details": "Revert with an error when attempting to cancel ownership transfer      when no new potential owner is currently set."}], "OwnerAlreadySet(address)": [{"details": "Revert with an error when attempting to call a function that      requires the owner to not have been set."}]}, "events": {"OwnershipTransferred(address,address)": {"details": "Emit an event whenever contract ownership is transferred.", "params": {"newOwner": "The new owner of the contract.", "previousOwner": "The previous owner of the contract."}}, "PotentialOwnerUpdated(address)": {"details": "Emit an event whenever the contract owner registers a new potential      owner.", "params": {"newPotentialOwner": "The new potential owner of the contract."}}}, "kind": "dev", "methods": {"owner()": {"returns": {"_0": "The address of the owner."}}, "potentialOwner()": {"returns": {"_0": "The address of the potential owner."}}, "transferOwnership(address)": {"params": {"newPotentialOwner": "The address for which to initiate ownership                          transfer to."}}}, "title": "TwoStepOwnableInterface", "version": 1}, "evm": {"bytecode": {"functionDebugData": {}, "generatedSources": [], "linkReferences": {}, "object": "", "opcodes": "", "sourceMap": ""}, "deployedBytecode": {"functionDebugData": {}, "generatedSources": [], "immutableReferences": {}, "linkReferences": {}, "object": "", "opcodes": "", "sourceMap": ""}}, "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CallerIsNotNewPotentialOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerIsNotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InitialOwnerIsNullAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPotentialOwner\",\"type\":\"address\"}],\"name\":\"NewPotentialOwnerAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewPotentialOwnerIsNullAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoPotentialOwnerCurrentlySet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAlreadySet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPotentialOwner\",\"type\":\"address\"}],\"name\":\"PotentialOwnerUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelOwnershipTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"potentialOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPotentialOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"OpenSea Protocol\",\"errors\":{\"CallerIsNotNewPotentialOwner()\":[{\"details\":\"Revert with an error when attempting to claim ownership of the      contract with a caller that is not the current potential owner.\"}],\"CallerIsNotOwner()\":[{\"details\":\"Revert with an error when attempting to call a function that      requires ownership with a caller that is not the owner.\"}],\"InitialOwnerIsNullAddress()\":[{\"details\":\"Revert with an error when attempting to register an initial owner      and supplying the null address.\"}],\"NewPotentialOwnerAlreadySet(address)\":[{\"details\":\"Revert with an error when attempting to set a new potential owner      that is already set.\"}],\"NewPotentialOwnerIsNullAddress()\":[{\"details\":\"Revert with an error when attempting to register a new potential      owner and supplying the null address.\"}],\"NoPotentialOwnerCurrentlySet()\":[{\"details\":\"Revert with an error when attempting to cancel ownership transfer      when no new potential owner is currently set.\"}],\"OwnerAlreadySet(address)\":[{\"details\":\"Revert with an error when attempting to call a function that      requires the owner to not have been set.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"details\":\"Emit an event whenever contract ownership is transferred.\",\"params\":{\"newOwner\":\"The new owner of the contract.\",\"previousOwner\":\"The previous owner of the contract.\"}},\"PotentialOwnerUpdated(address)\":{\"details\":\"Emit an event whenever the contract owner registers a new potential      owner.\",\"params\":{\"newPotentialOwner\":\"The new potential owner of the contract.\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"The address of the owner.\"}},\"potentialOwner()\":{\"returns\":{\"_0\":\"The address of the potential owner.\"}},\"transferOwnership(address)\":{\"params\":{\"newPotentialOwner\":\"The address for which to initiate ownership                          transfer to.\"}}},\"title\":\"TwoStepOwnableInterface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Accept ownership of this contract. Only the account that the         current owner has set as the new potential owner may call this         function.\"},\"cancelOwnershipTransfer()\":{\"notice\":\"Clear the currently set potential owner, if any. Only the owner         of this contract may call this function.\"},\"owner()\":{\"notice\":\"An external view function that returns the owner.\"},\"potentialOwner()\":{\"notice\":\"An external view function that returns the potential owner.\"},\"transferOwnership(address)\":{\"notice\":\"Initiate ownership transfer by assigning a new potential owner         to this contract. Once set, the new potential owner may call         `acceptOwnership` to claim ownership. Only the owner may call         this function.\"}},\"notice\":\"TwoStepOwnableInterface contains all external function interfaces,          events and errors for the TwoStepOwnable contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"07_07_TwoStepOwnableInterface.sol\":\"TwoStepOwnableInterface\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"07_07_TwoStepOwnableInterface.sol\":{\"keccak256\":\"0x4f9847b170095546488a6dfbb3d3c619bdb58829ebc2468d48b83cb6acfe224e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bf874724046b8b00f6290a3dfa9dc7c94ce18a2c0ad139d4a99745a15318beab\",\"dweb:/ipfs/QmXXAN3akSkYPcRcie9x3SKrcj53eayv3k9ybcTsLjUkHJ\"]}},\"version\":1}", "userdoc": {"kind": "user", "methods": {"acceptOwnership()": {"notice": "Accept ownership of this contract. Only the account that the         current owner has set as the new potential owner may call this         function."}, "cancelOwnershipTransfer()": {"notice": "Clear the currently set potential owner, if any. Only the owner         of this contract may call this function."}, "owner()": {"notice": "An external view function that returns the owner."}, "potentialOwner()": {"notice": "An external view function that returns the potential owner."}, "transferOwnership(address)": {"notice": "Initiate ownership transfer by assigning a new potential owner         to this contract. Once set, the new potential owner may call         `acceptOwnership` to claim ownership. Only the owner may call         this function."}}, "notice": "TwoStepOwnableInterface contains all external function interfaces,          events and errors for the TwoStepOwnable contract.", "version": 1}}}}, "errors": [{"component": "general", "errorCode": "1878", "formattedMessage": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> 01_07_OpenSeaSignedZoneCaptain.sol\n\n", "message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.", "severity": "warning", "sourceLocation": {"end": -1, "file": "01_07_OpenSeaSignedZoneCaptain.sol", "start": -1}, "type": "Warning"}, {"component": "general", "errorCode": "5740", "formattedMessage": "Warning: Unreachable code.\n  --> 02_07_SignedZoneCaptain.sol:55:9:\n   |\n55 |         if (signedZoneController.code.length == 0) {\n   |         ^ (Relevant source part starts here and spans across multiple lines).\n\n", "message": "Unreachable code.", "severity": "warning", "sourceLocation": {"end": 2087, "file": "02_07_SignedZoneCaptain.sol", "start": 1961}, "type": "Warning"}, {"component": "general", "errorCode": "5740", "formattedMessage": "Warning: Unreachable code.\n  --> 02_07_SignedZoneCaptain.sol:60:9:\n   |\n60 |         _SIGNED_ZONE_CONTROLLER = SignedZoneControllerInterface(\n   |         ^ (Relevant source part starts here and spans across multiple lines).\n\n", "message": "Unreachable code.", "severity": "warning", "sourceLocation": {"end": 2244, "file": "02_07_SignedZoneCaptain.sol", "start": 2143}, "type": "Warning"}, {"component": "general", "errorCode": "5740", "formattedMessage": "Warning: Unreachable code.\n  --> 02_07_SignedZoneCaptain.sol:96:9:\n   |\n96 |         _initialize(\n   |         ^ (Relevant source part starts here and spans across multiple lines).\n\n", "message": "Unreachable code.", "severity": "warning", "sourceLocation": {"end": 4006, "file": "02_07_SignedZoneCaptain.sol", "start": 3794}, "type": "Warning"}], "sources": {"01_07_OpenSeaSignedZoneCaptain.sol": {"id": 0}, "02_07_SignedZoneCaptain.sol": {"id": 1}, "03_07_TwoStepOwnable.sol": {"id": 2}, "04_07_SignedZoneCaptainInterface.sol": {"id": 3}, "05_07_SignedZoneControllerInterface.sol": {"id": 4}, "06_07_SignedZoneCaptainEventsAndErrors.sol": {"id": 5}, "07_07_TwoStepOwnableInterface.sol": {"id": 6}}}